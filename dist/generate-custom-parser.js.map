{"version":3,"file":null,"sources":["../src/utils/dom/constants.js","../src/utils/dom/brs-to-ps.js","../src/utils/dom/paragraphize.js","../src/utils/dom/convert-to-paragraphs.js","../src/utils/dom/convert-node-to.js","../src/utils/dom/clean-images.js","../src/utils/dom/strip-junk-tags.js","../src/utils/dom/clean-attributes.js","../src/extractors/generic/content/scoring/constants.js","../src/extractors/generic/content/scoring/get-weight.js","../src/extractors/generic/content/scoring/get-score.js","../src/extractors/generic/content/scoring/score-commas.js","../src/extractors/generic/content/scoring/score-length.js","../src/extractors/generic/content/scoring/score-paragraph.js","../src/extractors/generic/content/scoring/set-score.js","../src/extractors/generic/content/scoring/add-score.js","../src/extractors/generic/content/scoring/add-to-parent.js","../src/extractors/generic/content/scoring/get-or-init-score.js","../src/extractors/generic/content/scoring/score-node.js","../src/extractors/generic/content/scoring/score-content.js","../src/utils/text/normalize-spaces.js","../src/utils/text/extract-from-url.js","../src/utils/text/constants.js","../src/utils/text/article-base-url.js","../src/utils/text/has-sentence-end.js","../src/extractors/generic/content/scoring/merge-siblings.js","../src/extractors/generic/content/scoring/index.js","../src/utils/dom/clean-tags.js","../src/utils/dom/make-links-absolute.js","../src/utils/dom/link-density.js","../src/utils/dom/extract-from-selectors.js","../src/utils/dom/strip-tags.js","../src/utils/dom/within-comment.js","../src/utils/dom/node-is-sufficient.js","../src/utils/dom/get-attrs.js","../src/utils/dom/set-attr.js","../src/utils/dom/set-attrs.js","../src/utils/dom/index.js","mercury.js","../scripts/templates/insert-values.js","../scripts/templates/index.js","../scripts/templates/custom-extractor.js","../scripts/templates/custom-extractor-test.js","../scripts/generate-custom-parser.js"],"sourcesContent":["// Spacer images to be removed\nexport const SPACER_RE = new RegExp('transparent|spacer|blank', 'i');\n\n// The class we will use to mark elements we want to keep\n// but would normally remove\nexport const KEEP_CLASS = 'mercury-parser-keep';\n\nexport const KEEP_SELECTORS = [\n  'iframe[src^=\"https://www.youtube.com\"]',\n  'iframe[src^=\"http://www.youtube.com\"]',\n  'iframe[src^=\"https://player.vimeo\"]',\n  'iframe[src^=\"http://player.vimeo\"]',\n];\n\n// A list of tags to strip from the output if we encounter them.\nexport const STRIP_OUTPUT_TAGS = [\n  'title',\n  'script',\n  'noscript',\n  'link',\n  'style',\n  'hr',\n  'embed',\n  'iframe',\n  'object',\n];\n\n// cleanAttributes\nexport const REMOVE_ATTRS = ['style', 'align'];\nexport const REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(selector => `[${selector}]`);\nexport const REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nexport const WHITELIST_ATTRS = ['src', 'srcset', 'href', 'class', 'id', 'alt'];\nexport const WHITELIST_ATTRS_RE = new RegExp(`^(${WHITELIST_ATTRS.join('|')})$`, 'i');\n\n// removeEmpty\nexport const REMOVE_EMPTY_TAGS = ['p'];\nexport const REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(tag => `${tag}:empty`).join(',');\n\n// cleanTags\nexport const CLEAN_CONDITIONALLY_TAGS = ['ul', 'ol', 'table', 'div', 'button', 'form'].join(',');\n\n// cleanHeaders\nconst HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nexport const HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  // 'form', // This is too generic, has too many false positives\n  'header',\n  'hidden',\n  'loader',\n  'login',                     // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'outbrain',\n  'pager',\n  'pagination',\n  'predicta',                  // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'taboola',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE =\n  new RegExp(`^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`, 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = [\n  'figure',\n  'photo',\n  'image',\n  'caption',\n];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nexport const IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(EXTRANEOUS_LINK_HINTS.join('|'), 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\nexport const NEXT_LINK_TEXT_RE = /(next|weiter|continue|>([^|]|$)|»([^|]|$))/i;\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(`^(${BLOCK_LEVEL_TAGS.join('|')})$`, 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(`!(${candidatesWhitelist})|(${candidatesBlacklist})`, 'i');\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import { paragraphize } from './index';\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nexport default function brsToPs($) {\n  let collapsing = false;\n  $('br').each((index, element) => {\n    const $element = $(element);\n    const nextElement = $element.next().get(0);\n\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\n      collapsing = true;\n      $element.remove();\n    } else if (collapsing) {\n      collapsing = false;\n      // $(element).replaceWith('<p />')\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n","import { BLOCK_LEVEL_TAGS_RE } from './constants';\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nexport default function paragraphize(node, $, br = false) {\n  const $node = $(node);\n\n  if (br) {\n    let sibling = node.nextSibling;\n    const p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (sibling && !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))) {\n      const nextSibling = sibling.nextSibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n","import { brsToPs, convertNodeTo } from 'utils/dom';\n\nimport { DIV_TO_P_BLOCK_TAGS } from './constants';\n\nfunction convertDivs($) {\n  $('div').each((index, div) => {\n    const $div = $(div);\n    const convertable = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertable) {\n      convertNodeTo($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each((index, span) => {\n    const $span = $(span);\n    const convertable = $span.parents('p, div').length === 0;\n    if (convertable) {\n      convertNodeTo($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nexport default function convertToParagraphs($) {\n  $ = brsToPs($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function convertNodeTo($node, $, tag = 'p') {\n  const node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n  const attrs = getAttrs(node) || {};\n  // console.log(attrs)\n\n  const attribString = Reflect.ownKeys(attrs)\n                              .map(key => `${key}=${attrs[key]}`)\n                              .join(' ');\n  let html;\n\n  if ($.browser) {\n    // In the browser, the contents of noscript tags aren't rendered, therefore\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\n    // as expected. This test case handles that\n    html = node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\n  } else {\n    html = $node.contents();\n  }\n  $node.replaceWith(\n    `<${tag} ${attribString}>${html}</${tag}>`\n  );\n  return $;\n}\n","import { SPACER_RE } from './constants';\n\nfunction cleanForHeight($img, $) {\n  const height = parseInt($img.attr('height'), 10);\n  const width = parseInt($img.attr('width'), 10) || 20;\n\n  // Remove images that explicitly have very small heights or\n  // widths, because they are most likely shims or icons,\n  // which aren't very useful for reading.\n  if ((height || 20) < 10 || width < 10) {\n    $img.remove();\n  } else if (height) {\n    // Don't ever specify a height on images, so that we can\n    // scale with respect to width without screwing up the\n    // aspect ratio.\n    $img.removeAttr('height');\n  }\n\n  return $;\n}\n\n// Cleans out images where the source string matches transparent/spacer/etc\n// TODO This seems very aggressive - AP\nfunction removeSpacers($img, $) {\n  if (SPACER_RE.test($img.attr('src'))) {\n    $img.remove();\n  }\n\n  return $;\n}\n\nexport default function cleanImages($article, $) {\n  $article.find('img').each((index, img) => {\n    const $img = $(img);\n\n    cleanForHeight($img, $);\n    removeSpacers($img, $);\n  });\n\n  return $;\n}\n","import {\n  STRIP_OUTPUT_TAGS,\n  KEEP_CLASS,\n} from './constants';\n\nexport default function stripJunkTags(article, $, tags = []) {\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  // Remove matching elements, but ignore\n  // any element with a class of mercury-parser-keep\n  $(tags.join(','), article).not(`.${KEEP_CLASS}`).remove();\n\n  // Remove the mercury-parser-keep class from result\n  $(`.${KEEP_CLASS}`, article).removeClass(KEEP_CLASS);\n\n  return $;\n}\n","import {\n  getAttrs,\n  setAttrs,\n} from 'utils/dom';\n\nimport { WHITELIST_ATTRS_RE } from './constants';\n\nfunction removeAllButWhitelist($article) {\n  $article.find('*').each((index, node) => {\n    const attrs = getAttrs(node);\n\n    setAttrs(node, Reflect.ownKeys(attrs).reduce((acc, attr) => {\n      if (WHITELIST_ATTRS_RE.test(attr)) {\n        return { ...acc, [attr]: attrs[attr] };\n      }\n\n      return acc;\n    }, {}));\n  });\n\n  return $article;\n}\n\n// function removeAttrs(article, $) {\n//   REMOVE_ATTRS.forEach((attr) => {\n//     $(`[${attr}]`, article).removeAttr(attr);\n//   });\n// }\n\n// Remove attributes like style or align\nexport default function cleanAttributes($article) {\n  // Grabbing the parent because at this point\n  // $article will be wrapped in a div which will\n  // have a score set on it.\n  return removeAllButWhitelist(\n    $article.parent().length ?\n      $article.parent() : $article\n  );\n}\n","// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  'form',\n  'header',\n  'hidden',\n  'loader',\n  'login',                     // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'pager',\n  'pagination',\n  'predicta',                  // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE =\n  new RegExp(`^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`, 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = [\n  'figure',\n  'photo',\n  'image',\n  'caption',\n];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(`^(${BLOCK_LEVEL_TAGS.join('|')})$`, 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(`!(${candidatesWhitelist})|(${candidatesBlacklist})`, 'i');\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PHOTO_HINTS_RE,\n  READABILITY_ASSET,\n} from './constants';\n\n// Get the score of a node based on its className and id.\nexport default function getWeight(node) {\n  const classes = node.attr('class');\n  const id = node.attr('id');\n  let score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n","// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nexport default function getScore($node) {\n  return parseFloat($node.attr('score')) || null;\n}\n","// return 1 for every comma in text\nexport default function scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n","const idkRe = new RegExp('^(p|pre)$', 'i');\n\nexport default function scoreLength(textLength, tagName = 'p') {\n  const chunks = textLength / 50;\n\n  if (chunks > 0) {\n    let lengthBonus;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n","import {\n  scoreCommas,\n  scoreLength,\n} from './index';\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nexport default function scoreParagraph(node) {\n  let score = 1;\n  const text = node.text().trim();\n  const textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n","export default function setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n","import {\n  getOrInitScore,\n  setScore,\n} from './index';\n\nexport default function addScore($node, $, amount) {\n  try {\n    const score = getOrInitScore($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n","import { addScore } from './index';\n\n// Adds 1/4 of a child's score to its parent\nexport default function addToParent(node, $, score) {\n  const parent = node.parent();\n  if (parent) {\n    addScore(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n","import {\n  getScore,\n  scoreNode,\n  getWeight,\n  addToParent,\n} from './index';\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nexport default function getOrInitScore($node, $, weightNodes = true) {\n  let score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent($node, $, score);\n\n  return score;\n}\n","import { scoreParagraph } from './index';\nimport {\n  PARAGRAPH_SCORE_TAGS,\n  CHILD_CONTENT_TAGS,\n  BAD_TAGS,\n} from './constants';\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nexport default function scoreNode($node) {\n  const { tagName } = $node.get(0);\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n  if (PARAGRAPH_SCORE_TAGS.test(tagName)) {\n    return scoreParagraph($node);\n  } else if (tagName.toLowerCase() === 'div') {\n    return 5;\n  } else if (CHILD_CONTENT_TAGS.test(tagName)) {\n    return 3;\n  } else if (BAD_TAGS.test(tagName)) {\n    return -3;\n  } else if (tagName.toLowerCase() === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n","import { convertNodeTo } from 'utils/dom';\n\nimport { HNEWS_CONTENT_SELECTORS } from './constants';\nimport {\n  scoreNode,\n  setScore,\n  getOrInitScore,\n  addScore,\n} from './index';\n\nfunction convertSpans($node, $) {\n  if ($node.get(0)) {\n    const { tagName } = $node.get(0);\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans($node, $);\n    addScore($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre').not('[score]').each((index, node) => {\n    // The raw score for this paragraph, before we add any parent/child\n    // scores.\n    let $node = $(node);\n    $node = setScore($node, $, getOrInitScore($node, $, weightNodes));\n\n    const $parent = $node.parent();\n    const rawScore = scoreNode($node);\n\n    addScoreTo($parent, $, rawScore, weightNodes);\n    if ($parent) {\n      // Add half of the individual content score to the\n      // grandparent\n      addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n    }\n  });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nexport default function scoreContent($, weightNodes = true) {\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS.forEach(([parentSelector, childSelector]) => {\n    $(`${parentSelector} ${childSelector}`).each((index, node) => {\n      addScore($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n","const NORMALIZE_RE = /\\s{2,}/g;\n\nexport default function normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n","// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nexport default function extractFromUrl(url, regexList) {\n  const matchRe = regexList.find(re => re.test(url));\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n","// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nexport const PAGE_IN_HREF_RE = new RegExp('(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})', 'i');\n\nexport const HAS_ALPHA_RE = /[a-z]/i;\n\nexport const IS_ALPHA_RE = /^[a-z]+$/i;\nexport const IS_DIGIT_RE = /^[0-9]+$/i;\n\nexport const ENCODING_RE = /charset=([\\w-]+)\\b/;\n","import URL from 'url';\n\nimport {\n  HAS_ALPHA_RE,\n  IS_ALPHA_RE,\n  IS_DIGIT_RE,\n  PAGE_IN_HREF_RE,\n} from './constants';\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  let goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nexport default function articleBaseUrl(url, parsed) {\n  const parsedUrl = parsed || URL.parse(url);\n  const { protocol, host, path } = parsedUrl;\n\n  let firstSegmentHasLetters = false;\n  const cleanedSegments = path.split('/')\n  .reverse()\n  .reduce((acc, rawSegment, index) => {\n    let segment = rawSegment;\n\n    // Split off and save anything that looks like a file type.\n    if (segment.includes('.')) {\n      const [possibleSegment, fileExt] = segment.split('.');\n      if (IS_ALPHA_RE.test(fileExt)) {\n        segment = possibleSegment;\n      }\n    }\n\n    // If our first or second segment has anything looking like a page\n    // number, remove it.\n    if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n      segment = segment.replace(PAGE_IN_HREF_RE, '');\n    }\n\n    // If we're on the first segment, check to see if we have any\n    // characters in it. The first segment is actually the last bit of\n    // the URL, and this will be helpful to determine if we're on a URL\n    // segment that looks like \"/2/\" for example.\n    if (index === 0) {\n      firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n    }\n\n    // If it's not marked for deletion, push it to cleaned_segments.\n    if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n      acc.push(segment);\n    }\n\n    return acc;\n  }, []);\n\n  return `${protocol}//${host}${cleanedSegments.reverse().join('/')}`;\n}\n","// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nconst SENTENCE_END_RE = new RegExp('.( |$)');\nexport default function hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n","import {\n  textLength,\n  linkDensity,\n} from 'utils/dom';\nimport { hasSentenceEnd } from 'utils/text';\n\nimport { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nexport default function mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  const siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  const wrappingDiv = $('<div></div>');\n\n  $candidate.parent().children().each((index, sibling) => {\n    const $sibling = $(sibling);\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE.test(sibling.tagName)) {\n      return null;\n    }\n\n    const siblingScore = getScore($sibling);\n    if (siblingScore) {\n      if ($sibling.get(0) === $candidate.get(0)) {\n        wrappingDiv.append($sibling);\n      } else {\n        let contentBonus = 0;\n        const density = linkDensity($sibling);\n\n        // If sibling has a very low link density,\n        // give it a small bonus\n        if (density < 0.05) {\n          contentBonus += 20;\n        }\n\n        // If sibling has a high link density,\n        // give it a penalty\n        if (density >= 0.5) {\n          contentBonus -= 20;\n        }\n\n        // If sibling node has the same class as\n        // candidate, give it a bonus\n        if ($sibling.attr('class') === $candidate.attr('class')) {\n          contentBonus += topScore * 0.2;\n        }\n\n        const newScore = siblingScore + contentBonus;\n\n        if (newScore >= siblingScoreThreshold) {\n          return wrappingDiv.append($sibling);\n        } else if (sibling.tagName === 'p') {\n          const siblingContent = $sibling.text();\n          const siblingContentLength = textLength(siblingContent);\n\n          if (siblingContentLength > 80 && density < 0.25) {\n            return wrappingDiv.append($sibling);\n          } else if (siblingContentLength <= 80 && density === 0 &&\n                    hasSentenceEnd(siblingContent)) {\n            return wrappingDiv.append($sibling);\n          }\n        }\n      }\n    }\n\n    return null;\n  });\n\n  if (wrappingDiv.children().length === 1 &&\n    wrappingDiv.children().first().get(0) === $candidate.get(0)) {\n    return $candidate;\n  }\n\n  return wrappingDiv;\n}\n","// Scoring\nexport { default as getWeight } from './get-weight';\nexport { default as getScore } from './get-score';\nexport { default as scoreCommas } from './score-commas';\nexport { default as scoreLength } from './score-length';\nexport { default as scoreParagraph } from './score-paragraph';\nexport { default as setScore } from './set-score';\nexport { default as addScore } from './add-score';\nexport { default as addToParent } from './add-to-parent';\nexport { default as getOrInitScore } from './get-or-init-score';\nexport { default as scoreNode } from './score-node';\nexport { default as scoreContent } from './score-content';\nexport { default as findTopCandidate } from './find-top-candidate';\n","import {\n  getScore,\n  setScore,\n  getOrInitScore,\n  scoreCommas,\n} from 'extractors/generic/content/scoring';\n\nimport { CLEAN_CONDITIONALLY_TAGS } from './constants';\nimport { normalizeSpaces } from '../text';\nimport { linkDensity } from './index';\n\nfunction removeUnlessContent($node, $, weight) {\n    // Explicitly save entry-content-asset tags, which are\n    // noted as valuable in the Publisher guidelines. For now\n    // this works everywhere. We may want to consider making\n    // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  const content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    const pCount = $('p', $node).length;\n    const inputCount = $('input', $node).length;\n\n      // Looks like a form, too many inputs.\n    if (inputCount > (pCount / 3)) {\n      $node.remove();\n      return;\n    }\n\n    const contentLength = content.length;\n    const imgCount = $('img', $node).length;\n\n      // Content is too short, and there are no images, so\n      // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    const density = linkDensity($node);\n\n      // Too high of link density, is probably a menu or\n      // something similar.\n      // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n      // Too high of a link density, despite the score being\n      // high.\n    if (weight >= 25 && density > 0.5) {\n        // Don't remove the node if it's a list and the\n        // previous sibling starts with a colon though. That\n        // means it's probably content.\n      const tagName = $node.get(0).tagName.toLowerCase();\n      const nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        const previousNode = $node.prev();\n        if (previousNode && normalizeSpaces(previousNode.text()).slice(-1) === ':') {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    const scriptCount = $('script', $node).length;\n\n      // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n      return;\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nexport default function cleanTags($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each((index, node) => {\n    const $node = $(node);\n    let weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n","import URL from 'url';\n\nimport {\n  getAttrs,\n  setAttr,\n} from 'utils/dom';\n\nfunction absolutize($, rootUrl, attr, $content) {\n  $(`[${attr}]`, $content).each((_, node) => {\n    const attrs = getAttrs(node);\n    const url = attrs[attr];\n\n    if (url) {\n      const absoluteUrl = URL.resolve(rootUrl, url);\n      setAttr(node, attr, absoluteUrl);\n    }\n  });\n}\n\nexport default function makeLinksAbsolute($content, $, url) {\n  ['href', 'src'].forEach(attr => absolutize($, url, attr, $content));\n\n  return $content;\n}\n","export function textLength(text) {\n  return text.trim()\n             .replace(/\\s+/g, ' ')\n             .length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nexport function linkDensity($node) {\n  const totalTextLength = textLength($node.text());\n\n  const linkText = $node.find('a').text();\n  const linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  } else if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n","import { withinComment } from 'utils/dom';\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nexport default function extractFromSelectors(\n  $,\n  selectors,\n  maxChildren = 1,\n  textOnly = true\n) {\n  for (const selector of selectors) {\n    const nodes = $(selector);\n\n    // If we didn't get exactly one of this selector, this may be\n    // a list of articles or comments. Skip it.\n    if (nodes.length === 1) {\n      const $node = $(nodes[0]);\n\n      if (isGoodNode($node, maxChildren)) {\n        let content;\n        if (textOnly) {\n          content = $node.text();\n        } else {\n          content = $node.html();\n        }\n\n        if (content) {\n          return content;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n","// strips all tags from a string of text\nexport default function stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  const cleanText = $(`<span>${text}</span>`).text();\n  return cleanText === '' ? text : cleanText;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function withinComment($node) {\n  const parents = $node.parents().toArray();\n  const commentParent = parents.find((parent) => {\n    const attrs = getAttrs(parent);\n    const { class: nodeClass, id } = attrs;\n    const classAndId = `${nodeClass} ${id}`;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n","// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nexport default function nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n","export default function getAttrs(node) {\n  const { attribs, attributes } = node;\n\n  if (!attribs && attributes) {\n    const attrs = Reflect.ownKeys(attributes).reduce((acc, index) => {\n      const attr = attributes[index];\n\n      if (!attr.name || !attr.value) return acc;\n\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n    return attrs;\n  }\n\n  return attribs;\n}\n","export default function setAttr(node, attr, val) {\n  if (node.attribs) {\n    node.attribs[attr] = val;\n  } else if (node.attributes) {\n    node.setAttribute(attr, val);\n  }\n\n  return node;\n}\n","export default function setAttrs(node, attrs) {\n  if (node.attribs) {\n    node.attribs = attrs;\n  } else if (node.attributes) {\n    while (node.attributes.length > 0) {\n      node.removeAttribute(node.attributes[0].name);\n    }\n\n    Reflect.ownKeys(attrs).forEach((key) => {\n      node.setAttribute(key, attrs[key]);\n    });\n  }\n\n  return node;\n}\n","// DOM manipulation\nexport { default as stripUnlikelyCandidates } from './strip-unlikely-candidates';\nexport { default as brsToPs } from './brs-to-ps';\nexport { default as paragraphize } from './paragraphize';\nexport { default as convertToParagraphs } from './convert-to-paragraphs';\nexport { default as convertNodeTo } from './convert-node-to';\nexport { default as cleanImages } from './clean-images';\nexport { default as markToKeep } from './mark-to-keep';\nexport { default as stripJunkTags } from './strip-junk-tags';\nexport { default as cleanHOnes } from './clean-h-ones';\nexport { default as cleanAttributes } from './clean-attributes';\nexport { default as removeEmpty } from './remove-empty';\nexport { default as cleanTags } from './clean-tags';\nexport { default as cleanHeaders } from './clean-headers';\nexport { default as rewriteTopLevel } from './rewrite-top-level';\nexport { default as makeLinksAbsolute } from './make-links-absolute';\nexport { textLength, linkDensity } from './link-density';\nexport { default as extractFromMeta } from './extract-from-meta';\nexport { default as extractFromSelectors } from './extract-from-selectors';\nexport { default as stripTags } from './strip-tags';\nexport { default as withinComment } from './within-comment';\nexport { default as nodeIsSufficient } from './node-is-sufficient';\nexport { default as isWordpress } from './is-wordpress';\nexport { default as getAttrs } from './get-attrs';\nexport { default as setAttr } from './set-attr';\nexport { default as setAttrs } from './set-attrs';\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar _regeneratorRuntime = _interopDefault(require('babel-runtime/regenerator'));\nvar _extends = _interopDefault(require('babel-runtime/helpers/extends'));\nvar _asyncToGenerator = _interopDefault(require('babel-runtime/helpers/asyncToGenerator'));\nvar URL = _interopDefault(require('url'));\nvar cheerio = _interopDefault(require('cheerio'));\nvar _Promise = _interopDefault(require('babel-runtime/core-js/promise'));\nvar request = _interopDefault(require('request'));\nvar iconv = _interopDefault(require('iconv-lite'));\nvar _slicedToArray = _interopDefault(require('babel-runtime/helpers/slicedToArray'));\nvar _Reflect$ownKeys = _interopDefault(require('babel-runtime/core-js/reflect/own-keys'));\nvar _toConsumableArray = _interopDefault(require('babel-runtime/helpers/toConsumableArray'));\nvar _defineProperty = _interopDefault(require('babel-runtime/helpers/defineProperty'));\nvar _typeof = _interopDefault(require('babel-runtime/helpers/typeof'));\nvar _getIterator = _interopDefault(require('babel-runtime/core-js/get-iterator'));\nvar _Object$keys = _interopDefault(require('babel-runtime/core-js/object/keys'));\nvar stringDirection = _interopDefault(require('string-direction'));\nvar validUrl = _interopDefault(require('valid-url'));\nvar moment = _interopDefault(require('moment-timezone'));\nvar parseFormat = _interopDefault(require('moment-parseformat'));\nvar wuzzy = _interopDefault(require('wuzzy'));\nvar difflib = _interopDefault(require('difflib'));\nvar _Array$from = _interopDefault(require('babel-runtime/core-js/array/from'));\nvar ellipsize = _interopDefault(require('ellipsize'));\n\nvar _marked = [range].map(_regeneratorRuntime.mark);\n\nfunction range() {\n  var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return _regeneratorRuntime.wrap(function range$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(start <= end)) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return start += 1;\n\n        case 3:\n          _context.next = 0;\n          break;\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked[0], this);\n}\n\n// extremely simple url validation as a first step\nfunction validateUrl(_ref) {\n  var hostname = _ref.hostname;\n\n  // If this isn't a valid url, return an error message\n  return !!hostname;\n}\n\nvar Errors = {\n  badUrl: {\n    error: true,\n    messages: 'The url parameter passed does not look like a valid URL. Please check your data and try again.'\n  }\n};\n\nvar NORMALIZE_RE = /\\s{2,}/g;\n\nfunction normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n\n// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nfunction extractFromUrl(url, regexList) {\n  var matchRe = regexList.find(function (re) {\n    return re.test(url);\n  });\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n\n// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nvar PAGE_IN_HREF_RE = new RegExp('(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})', 'i');\n\nvar HAS_ALPHA_RE = /[a-z]/i;\n\nvar IS_ALPHA_RE = /^[a-z]+$/i;\nvar IS_DIGIT_RE = /^[0-9]+$/i;\n\nvar ENCODING_RE = /charset=([\\w-]+)\\b/;\n\nfunction pageNumFromUrl(url) {\n  var matches = url.match(PAGE_IN_HREF_RE);\n  if (!matches) return null;\n\n  var pageNum = parseInt(matches[6], 10);\n\n  // Return pageNum < 100, otherwise\n  // return null\n  return pageNum < 100 ? pageNum : null;\n}\n\nfunction removeAnchor(url) {\n  return url.split('#')[0].replace(/\\/$/, '');\n}\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  var goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nfunction articleBaseUrl(url, parsed) {\n  var parsedUrl = parsed || URL.parse(url);\n  var protocol = parsedUrl.protocol,\n      host = parsedUrl.host,\n      path = parsedUrl.path;\n\n\n  var firstSegmentHasLetters = false;\n  var cleanedSegments = path.split('/').reverse().reduce(function (acc, rawSegment, index) {\n    var segment = rawSegment;\n\n    // Split off and save anything that looks like a file type.\n    if (segment.includes('.')) {\n      var _segment$split = segment.split('.'),\n          _segment$split2 = _slicedToArray(_segment$split, 2),\n          possibleSegment = _segment$split2[0],\n          fileExt = _segment$split2[1];\n\n      if (IS_ALPHA_RE.test(fileExt)) {\n        segment = possibleSegment;\n      }\n    }\n\n    // If our first or second segment has anything looking like a page\n    // number, remove it.\n    if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n      segment = segment.replace(PAGE_IN_HREF_RE, '');\n    }\n\n    // If we're on the first segment, check to see if we have any\n    // characters in it. The first segment is actually the last bit of\n    // the URL, and this will be helpful to determine if we're on a URL\n    // segment that looks like \"/2/\" for example.\n    if (index === 0) {\n      firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n    }\n\n    // If it's not marked for deletion, push it to cleaned_segments.\n    if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n      acc.push(segment);\n    }\n\n    return acc;\n  }, []);\n\n  return protocol + '//' + host + cleanedSegments.reverse().join('/');\n}\n\n// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nvar SENTENCE_END_RE = new RegExp('.( |$)');\nfunction hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n\nfunction excerptContent(content) {\n              var words = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n\n              return content.trim().split(/\\s+/).slice(0, words).join(' ');\n}\n\n// check a string for encoding; this is\n// used in our fetchResource function to\n// ensure correctly encoded responses\nfunction getEncoding(str) {\n  if (ENCODING_RE.test(str)) {\n    return ENCODING_RE.exec(str)[1];\n  }\n\n  return null;\n}\n\n// Browser does not like us setting user agent\nvar REQUEST_HEADERS = cheerio.browser ? {} : {\n  'User-Agent': 'Mercury - https://mercury.postlight.com/web-parser/'\n};\n\n// The number of milliseconds to attempt to fetch a resource before timing out.\nvar FETCH_TIMEOUT = 10000;\n\n// Content types that we do not extract content from\nvar BAD_CONTENT_TYPES = ['audio/mpeg', 'image/gif', 'image/jpeg', 'image/jpg'];\n\nvar BAD_CONTENT_TYPES_RE = new RegExp('^(' + BAD_CONTENT_TYPES.join('|') + ')$', 'i');\n\n// Use this setting as the maximum size an article can be\n// for us to attempt parsing. Defaults to 5 MB.\nvar MAX_CONTENT_LENGTH = 5242880;\n\n// Turn the global proxy on or off\n// Proxying is not currently enabled in Python source\n// so not implementing logic in port.\n\nfunction get(options) {\n  return new _Promise(function (resolve, reject) {\n    request(options, function (err, response, body) {\n      if (err) {\n        reject(err);\n      } else {\n        var encoding = getEncoding(response.headers['content-type']);\n\n        if (iconv.encodingExists(encoding)) {\n          body = iconv.decode(body, encoding);\n        }\n\n        resolve({ body: body, response: response });\n      }\n    });\n  });\n}\n\n// Evaluate a response to ensure it's something we should be keeping.\n// This does not validate in the sense of a response being 200 level or\n// not. Validation here means that we haven't found reason to bail from\n// further processing of this url.\n\nfunction validateResponse(response) {\n  var parseNon2xx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  // Check if we got a valid status code\n  // This isn't great, but I'm requiring a statusMessage to be set\n  // before short circuiting b/c nock doesn't set it in tests\n  // statusMessage only not set in nock response, in which case\n  // I check statusCode, which is currently only 200 for OK responses\n  // in tests\n  if (response.statusMessage && response.statusMessage !== 'OK' || response.statusCode !== 200) {\n    if (!response.statusCode) {\n      throw new Error('Unable to fetch content. Original exception was ' + response.error);\n    } else if (!parseNon2xx) {\n      throw new Error('Resource returned a response status code of ' + response.statusCode + ' and resource was instructed to reject non-2xx level status codes.');\n    }\n  }\n\n  var _response$headers = response.headers,\n      contentType = _response$headers['content-type'],\n      contentLength = _response$headers['content-length'];\n\n  // Check that the content is not in BAD_CONTENT_TYPES\n\n  if (BAD_CONTENT_TYPES_RE.test(contentType)) {\n    throw new Error('Content-type for this resource was ' + contentType + ' and is not allowed.');\n  }\n\n  // Check that the content length is below maximum\n  if (contentLength > MAX_CONTENT_LENGTH) {\n    throw new Error('Content for this resource was too large. Maximum content length is ' + MAX_CONTENT_LENGTH + '.');\n  }\n\n  return true;\n}\n\n// Grabs the last two pieces of the URL and joins them back together\n// This is to get the 'livejournal.com' from 'erotictrains.livejournal.com'\n\n\n// Set our response attribute to the result of fetching our URL.\n// TODO: This should gracefully handle timeouts and raise the\n//       proper exceptions on the many failure cases of HTTP.\n// TODO: Ensure we are not fetching something enormous. Always return\n//       unicode content for HTML, with charset conversion.\n\nvar fetchResource$1 = (function () {\n  var _ref2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, parsedUrl) {\n    var options, _ref3, response, body;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            parsedUrl = parsedUrl || URL.parse(encodeURI(url));\n\n            options = {\n              url: parsedUrl.href,\n              headers: _extends({}, REQUEST_HEADERS),\n              timeout: FETCH_TIMEOUT,\n              // Don't set encoding; fixes issues\n              // w/gzipped responses\n              encoding: null,\n              // Accept cookies\n              jar: true,\n              // Accept and decode gzip\n              gzip: true,\n              // Follow any redirect\n              followAllRedirects: true\n            };\n            _context.next = 4;\n            return get(options);\n\n          case 4:\n            _ref3 = _context.sent;\n            response = _ref3.response;\n            body = _ref3.body;\n            _context.prev = 7;\n\n            validateResponse(response);\n            return _context.abrupt('return', {\n              body: body,\n              response: response\n            });\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context['catch'](7);\n            return _context.abrupt('return', Errors.badUrl);\n\n          case 15:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[7, 12]]);\n  }));\n\n  function fetchResource(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  }\n\n  return fetchResource;\n})();\n\nfunction convertMetaProp($, from, to) {\n  $('meta[' + from + ']').each(function (_, node) {\n    var $node = $(node);\n\n    var value = $node.attr(from);\n    $node.attr(to, value);\n    $node.removeAttr(from);\n  });\n\n  return $;\n}\n\n// For ease of use in extracting from meta tags,\n// replace the \"content\" attribute on meta tags with the\n// \"value\" attribute.\n//\n// In addition, normalize 'property' attributes to 'name' for ease of\n// querying later. See, e.g., og or twitter meta tags.\n\nfunction normalizeMetaTags($) {\n  $ = convertMetaProp($, 'content', 'value');\n  $ = convertMetaProp($, 'property', 'name');\n  return $;\n}\n\n// Spacer images to be removed\nvar SPACER_RE = new RegExp('transparent|spacer|blank', 'i');\n\n// The class we will use to mark elements we want to keep\n// but would normally remove\nvar KEEP_CLASS = 'mercury-parser-keep';\n\nvar KEEP_SELECTORS = ['iframe[src^=\"https://www.youtube.com\"]', 'iframe[src^=\"http://www.youtube.com\"]', 'iframe[src^=\"https://player.vimeo\"]', 'iframe[src^=\"http://player.vimeo\"]'];\n\n// A list of tags to strip from the output if we encounter them.\nvar STRIP_OUTPUT_TAGS = ['title', 'script', 'noscript', 'link', 'style', 'hr', 'embed', 'iframe', 'object'];\n\n// cleanAttributes\nvar REMOVE_ATTRS = ['style', 'align'];\nvar REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(function (selector) {\n  return '[' + selector + ']';\n});\nvar REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nvar WHITELIST_ATTRS = ['src', 'srcset', 'href', 'class', 'id', 'alt'];\nvar WHITELIST_ATTRS_RE = new RegExp('^(' + WHITELIST_ATTRS.join('|') + ')$', 'i');\n\n// removeEmpty\nvar REMOVE_EMPTY_TAGS = ['p'];\nvar REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(function (tag) {\n  return tag + ':empty';\n}).join(',');\n\n// cleanTags\nvar CLEAN_CONDITIONALLY_TAGS = ['ul', 'ol', 'table', 'div', 'button', 'form'].join(',');\n\n// cleanHeaders\nvar HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nvar HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nvar UNLIKELY_CANDIDATES_BLACKLIST = ['ad-break', 'adbox', 'advert', 'addthis', 'agegate', 'aux', 'blogger-labels', 'combx', 'comment', 'conversation', 'disqus', 'entry-unrelated', 'extra', 'foot',\n// 'form', // This is too generic, has too many false positives\n'header', 'hidden', 'loader', 'login', // Note: This can hit 'blogindex'.\n'menu', 'meta', 'nav', 'outbrain', 'pager', 'pagination', 'predicta', // readwriteweb inline ad box\n'presence_control_external', // lifehacker.com container full of false positives\n'popup', 'printfriendly', 'related', 'remove', 'remark', 'rss', 'share', 'shoutbox', 'sidebar', 'sociable', 'sponsor', 'taboola', 'tools'];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nvar UNLIKELY_CANDIDATES_WHITELIST = ['and', 'article', 'body', 'blogindex', 'column', 'content', 'entry-content-asset', 'format', // misuse of form\n'hfeed', 'hentry', 'hatom', 'main', 'page', 'posts', 'shadow'];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nvar DIV_TO_P_BLOCK_TAGS = ['a', 'blockquote', 'dl', 'div', 'img', 'p', 'pre', 'table'].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\n\n\n\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\n\n\n\n\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar POSITIVE_SCORE_HINTS = ['article', 'articlecontent', 'instapaper_body', 'blog', 'body', 'content', 'entry-content-asset', 'entry', 'hentry', 'main', 'Normal', 'page', 'pagination', 'permalink', 'post', 'story', 'text', '[-_]copy', // usatoday\n'\\\\Bcopy'];\n\n// The above list, joined into a matching regular expression\nvar POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\n\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar NEGATIVE_SCORE_HINTS = ['adbox', 'advert', 'author', 'bio', 'bookmark', 'bottom', 'byline', 'clear', 'com-', 'combx', 'comment', 'comment\\\\B', 'contact', 'copy', 'credit', 'crumb', 'date', 'deck', 'excerpt', 'featured', // tnr.com has a featured_content which throws us off\n'foot', 'footer', 'footnote', 'graf', 'head', 'info', 'infotext', // newscientist.com copyright\n'instapaper_ignore', 'jump', 'linebreak', 'link', 'masthead', 'media', 'meta', 'modal', 'outbrain', // slate.com junk\n'promo', 'pr_', // autoblog - press release\n'related', 'respond', 'roundcontent', // lifehacker restricted content warning\n'scroll', 'secondary', 'share', 'shopping', 'shoutbox', 'side', 'sidebar', 'sponsor', 'stamp', 'sub', 'summary', 'tags', 'tools', 'widget'];\n// The above list, joined into a matching regular expression\nvar NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nvar IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\n\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\n\n\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nvar PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\n\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\n\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\n\n\n// Match 2 or more consecutive <br> tags\n\n\n// Match 1 BR tag.\n\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nvar BLOCK_LEVEL_TAGS = ['article', 'aside', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'col', 'colgroup', 'dd', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li', 'map', 'object', 'ol', 'output', 'p', 'pre', 'progress', 'section', 'table', 'tbody', 'textarea', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nvar BLOCK_LEVEL_TAGS_RE = new RegExp('^(' + BLOCK_LEVEL_TAGS.join('|') + ')$', 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nvar candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nvar CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nvar candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nvar CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nfunction stripUnlikelyCandidates($) {\n  //  Loop through the provided document and remove any non-link nodes\n  //  that are unlikely candidates for article content.\n  //\n  //  Links are ignored because there are very often links to content\n  //  that are identified as non-body-content, but may be inside\n  //  article-like content.\n  //\n  //  :param $: a cheerio object to strip nodes from\n  //  :return $: the cleaned cheerio object\n  $('*').not('a').each(function (index, node) {\n    var $node = $(node);\n    var classes = $node.attr('class');\n    var id = $node.attr('id');\n    if (!id && !classes) return;\n\n    var classAndId = (classes || '') + ' ' + (id || '');\n    if (CANDIDATES_WHITELIST.test(classAndId)) {\n      return;\n    } else if (CANDIDATES_BLACKLIST.test(classAndId)) {\n      $node.remove();\n    }\n  });\n\n  return $;\n}\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nfunction brsToPs$$1($) {\n  var collapsing = false;\n  $('br').each(function (index, element) {\n    var $element = $(element);\n    var nextElement = $element.next().get(0);\n\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\n      collapsing = true;\n      $element.remove();\n    } else if (collapsing) {\n      collapsing = false;\n      // $(element).replaceWith('<p />')\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nfunction paragraphize(node, $) {\n  var br = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var $node = $(node);\n\n  if (br) {\n    var sibling = node.nextSibling;\n    var p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (sibling && !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))) {\n      var nextSibling = sibling.nextSibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n\nfunction convertDivs($) {\n  $('div').each(function (index, div) {\n    var $div = $(div);\n    var convertable = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertable) {\n      convertNodeTo$$1($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each(function (index, span) {\n    var $span = $(span);\n    var convertable = $span.parents('p, div').length === 0;\n    if (convertable) {\n      convertNodeTo$$1($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nfunction convertToParagraphs$$1($) {\n  $ = brsToPs$$1($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n\nfunction convertNodeTo$$1($node, $) {\n  var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'p';\n\n  var node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n  var attrs = getAttrs(node) || {};\n  // console.log(attrs)\n\n  var attribString = _Reflect$ownKeys(attrs).map(function (key) {\n    return key + '=' + attrs[key];\n  }).join(' ');\n  var html = void 0;\n\n  if ($.browser) {\n    // In the browser, the contents of noscript tags aren't rendered, therefore\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\n    // as expected. This test case handles that\n    html = node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\n  } else {\n    html = $node.contents();\n  }\n  $node.replaceWith('<' + tag + ' ' + attribString + '>' + html + '</' + tag + '>');\n  return $;\n}\n\nfunction cleanForHeight($img, $) {\n  var height = parseInt($img.attr('height'), 10);\n  var width = parseInt($img.attr('width'), 10) || 20;\n\n  // Remove images that explicitly have very small heights or\n  // widths, because they are most likely shims or icons,\n  // which aren't very useful for reading.\n  if ((height || 20) < 10 || width < 10) {\n    $img.remove();\n  } else if (height) {\n    // Don't ever specify a height on images, so that we can\n    // scale with respect to width without screwing up the\n    // aspect ratio.\n    $img.removeAttr('height');\n  }\n\n  return $;\n}\n\n// Cleans out images where the source string matches transparent/spacer/etc\n// TODO This seems very aggressive - AP\nfunction removeSpacers($img, $) {\n  if (SPACER_RE.test($img.attr('src'))) {\n    $img.remove();\n  }\n\n  return $;\n}\n\nfunction cleanImages($article, $) {\n  $article.find('img').each(function (index, img) {\n    var $img = $(img);\n\n    cleanForHeight($img, $);\n    removeSpacers($img, $);\n  });\n\n  return $;\n}\n\nfunction markToKeep(article, $, url) {\n  var tags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n  if (tags.length === 0) {\n    tags = KEEP_SELECTORS;\n  }\n\n  if (url) {\n    var _URL$parse = URL.parse(url),\n        protocol = _URL$parse.protocol,\n        hostname = _URL$parse.hostname;\n\n    tags = [].concat(_toConsumableArray(tags), ['iframe[src^=\"' + protocol + '//' + hostname + '\"]']);\n  }\n\n  $(tags.join(','), article).addClass(KEEP_CLASS);\n\n  return $;\n}\n\nfunction stripJunkTags(article, $) {\n  var tags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  // Remove matching elements, but ignore\n  // any element with a class of mercury-parser-keep\n  $(tags.join(','), article).not('.' + KEEP_CLASS).remove();\n\n  // Remove the mercury-parser-keep class from result\n  $('.' + KEEP_CLASS, article).removeClass(KEEP_CLASS);\n\n  return $;\n}\n\n// H1 tags are typically the article title, which should be extracted\n// by the title extractor instead. If there's less than 3 of them (<3),\n// strip them. Otherwise, turn 'em into H2s.\nfunction cleanHOnes$$1(article, $) {\n  var $hOnes = $('h1', article);\n\n  if ($hOnes.length < 3) {\n    $hOnes.each(function (index, node) {\n      return $(node).remove();\n    });\n  } else {\n    $hOnes.each(function (index, node) {\n      convertNodeTo$$1($(node), $, 'h2');\n    });\n  }\n\n  return $;\n}\n\nfunction removeAllButWhitelist($article) {\n  $article.find('*').each(function (index, node) {\n    var attrs = getAttrs(node);\n\n    setAttrs(node, _Reflect$ownKeys(attrs).reduce(function (acc, attr) {\n      if (WHITELIST_ATTRS_RE.test(attr)) {\n        return _extends({}, acc, _defineProperty({}, attr, attrs[attr]));\n      }\n\n      return acc;\n    }, {}));\n  });\n\n  return $article;\n}\n\n// function removeAttrs(article, $) {\n//   REMOVE_ATTRS.forEach((attr) => {\n//     $(`[${attr}]`, article).removeAttr(attr);\n//   });\n// }\n\n// Remove attributes like style or align\nfunction cleanAttributes$$1($article) {\n  // Grabbing the parent because at this point\n  // $article will be wrapped in a div which will\n  // have a score set on it.\n  return removeAllButWhitelist($article.parent().length ? $article.parent() : $article);\n}\n\nfunction removeEmpty($article, $) {\n  $article.find('p').each(function (index, p) {\n    var $p = $(p);\n    if ($p.find('iframe, img').length === 0 && $p.text().trim() === '') $p.remove();\n  });\n\n  return $;\n}\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nvar UNLIKELY_CANDIDATES_BLACKLIST$1 = ['ad-break', 'adbox', 'advert', 'addthis', 'agegate', 'aux', 'blogger-labels', 'combx', 'comment', 'conversation', 'disqus', 'entry-unrelated', 'extra', 'foot', 'form', 'header', 'hidden', 'loader', 'login', // Note: This can hit 'blogindex'.\n'menu', 'meta', 'nav', 'pager', 'pagination', 'predicta', // readwriteweb inline ad box\n'presence_control_external', // lifehacker.com container full of false positives\n'popup', 'printfriendly', 'related', 'remove', 'remark', 'rss', 'share', 'shoutbox', 'sidebar', 'sociable', 'sponsor', 'tools'];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nvar UNLIKELY_CANDIDATES_WHITELIST$1 = ['and', 'article', 'body', 'blogindex', 'column', 'content', 'entry-content-asset', 'format', // misuse of form\n'hfeed', 'hentry', 'hatom', 'main', 'page', 'posts', 'shadow'];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nvar DIV_TO_P_BLOCK_TAGS$1 = ['a', 'blockquote', 'dl', 'div', 'img', 'p', 'pre', 'table'].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nvar NON_TOP_CANDIDATE_TAGS$1 = ['br', 'b', 'i', 'label', 'hr', 'area', 'base', 'basefont', 'input', 'img', 'link', 'meta'];\n\nvar NON_TOP_CANDIDATE_TAGS_RE$1 = new RegExp('^(' + NON_TOP_CANDIDATE_TAGS$1.join('|') + ')$', 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nvar HNEWS_CONTENT_SELECTORS$1 = [['.hentry', '.entry-content'], ['entry', '.entry-content'], ['.entry', '.entry_content'], ['.post', '.postbody'], ['.post', '.post_body'], ['.post', '.post-body']];\n\nvar PHOTO_HINTS$1 = ['figure', 'photo', 'image', 'caption'];\nvar PHOTO_HINTS_RE$1 = new RegExp(PHOTO_HINTS$1.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar POSITIVE_SCORE_HINTS$1 = ['article', 'articlecontent', 'instapaper_body', 'blog', 'body', 'content', 'entry-content-asset', 'entry', 'hentry', 'main', 'Normal', 'page', 'pagination', 'permalink', 'post', 'story', 'text', '[-_]copy', // usatoday\n'\\\\Bcopy'];\n\n// The above list, joined into a matching regular expression\nvar POSITIVE_SCORE_RE$1 = new RegExp(POSITIVE_SCORE_HINTS$1.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nvar READABILITY_ASSET$1 = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar NEGATIVE_SCORE_HINTS$1 = ['adbox', 'advert', 'author', 'bio', 'bookmark', 'bottom', 'byline', 'clear', 'com-', 'combx', 'comment', 'comment\\\\B', 'contact', 'copy', 'credit', 'crumb', 'date', 'deck', 'excerpt', 'featured', // tnr.com has a featured_content which throws us off\n'foot', 'footer', 'footnote', 'graf', 'head', 'info', 'infotext', // newscientist.com copyright\n'instapaper_ignore', 'jump', 'linebreak', 'link', 'masthead', 'media', 'meta', 'modal', 'outbrain', // slate.com junk\n'promo', 'pr_', // autoblog - press release\n'related', 'respond', 'roundcontent', // lifehacker restricted content warning\n'scroll', 'secondary', 'share', 'shopping', 'shoutbox', 'side', 'sidebar', 'sponsor', 'stamp', 'sub', 'summary', 'tags', 'tools', 'widget'];\n// The above list, joined into a matching regular expression\nvar NEGATIVE_SCORE_RE$1 = new RegExp(NEGATIVE_SCORE_HINTS$1.join('|'), 'i');\n\n// Match a digit. Pretty clear.\n\n\n// Match 2 or more consecutive <br> tags\n\n\n// Match 1 BR tag.\n\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\n\n\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nvar candidatesBlacklist$1 = UNLIKELY_CANDIDATES_BLACKLIST$1.join('|');\n\n\nvar candidatesWhitelist$1 = UNLIKELY_CANDIDATES_WHITELIST$1.join('|');\n\n\n\n\nvar PARAGRAPH_SCORE_TAGS$1 = new RegExp('^(p|li|span|pre)$', 'i');\nvar CHILD_CONTENT_TAGS$1 = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nvar BAD_TAGS$1 = new RegExp('^(address|form)$', 'i');\n\n// Get the score of a node based on its className and id.\nfunction getWeight(node) {\n  var classes = node.attr('class');\n  var id = node.attr('id');\n  var score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE$1.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE$1.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE$1.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE$1.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE$1.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET$1.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n\n// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nfunction getScore($node) {\n  return parseFloat($node.attr('score')) || null;\n}\n\n// return 1 for every comma in text\nfunction scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n\nvar idkRe = new RegExp('^(p|pre)$', 'i');\n\nfunction scoreLength(textLength) {\n  var tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'p';\n\n  var chunks = textLength / 50;\n\n  if (chunks > 0) {\n    var lengthBonus = void 0;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nfunction scoreParagraph$$1(node) {\n  var score = 1;\n  var text = node.text().trim();\n  var textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n\nfunction setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n\nfunction addScore$$1($node, $, amount) {\n  try {\n    var score = getOrInitScore$$1($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n\n// Adds 1/4 of a child's score to its parent\nfunction addToParent$$1(node, $, score) {\n  var parent = node.parent();\n  if (parent) {\n    addScore$$1(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nfunction getOrInitScore$$1($node, $) {\n  var weightNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode$$1($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent$$1($node, $, score);\n\n  return score;\n}\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nfunction scoreNode$$1($node) {\n  var _$node$get = $node.get(0),\n      tagName = _$node$get.tagName;\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n\n\n  if (PARAGRAPH_SCORE_TAGS$1.test(tagName)) {\n    return scoreParagraph$$1($node);\n  } else if (tagName.toLowerCase() === 'div') {\n    return 5;\n  } else if (CHILD_CONTENT_TAGS$1.test(tagName)) {\n    return 3;\n  } else if (BAD_TAGS$1.test(tagName)) {\n    return -3;\n  } else if (tagName.toLowerCase() === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n\nfunction convertSpans$1($node, $) {\n  if ($node.get(0)) {\n    var _$node$get = $node.get(0),\n        tagName = _$node$get.tagName;\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo$$1($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans$1($node, $);\n    addScore$$1($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre').not('[score]').each(function (index, node) {\n    // The raw score for this paragraph, before we add any parent/child\n    // scores.\n    var $node = $(node);\n    $node = setScore($node, $, getOrInitScore$$1($node, $, weightNodes));\n\n    var $parent = $node.parent();\n    var rawScore = scoreNode$$1($node);\n\n    addScoreTo($parent, $, rawScore, weightNodes);\n    if ($parent) {\n      // Add half of the individual content score to the\n      // grandparent\n      addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n    }\n  });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nfunction scoreContent$$1($) {\n  var weightNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS$1.forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        parentSelector = _ref2[0],\n        childSelector = _ref2[1];\n\n    $(parentSelector + ' ' + childSelector).each(function (index, node) {\n      addScore$$1($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nfunction mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  var siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  var wrappingDiv = $('<div></div>');\n\n  $candidate.parent().children().each(function (index, sibling) {\n    var $sibling = $(sibling);\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE$1.test(sibling.tagName)) {\n      return null;\n    }\n\n    var siblingScore = getScore($sibling);\n    if (siblingScore) {\n      if ($sibling.get(0) === $candidate.get(0)) {\n        wrappingDiv.append($sibling);\n      } else {\n        var contentBonus = 0;\n        var density = linkDensity($sibling);\n\n        // If sibling has a very low link density,\n        // give it a small bonus\n        if (density < 0.05) {\n          contentBonus += 20;\n        }\n\n        // If sibling has a high link density,\n        // give it a penalty\n        if (density >= 0.5) {\n          contentBonus -= 20;\n        }\n\n        // If sibling node has the same class as\n        // candidate, give it a bonus\n        if ($sibling.attr('class') === $candidate.attr('class')) {\n          contentBonus += topScore * 0.2;\n        }\n\n        var newScore = siblingScore + contentBonus;\n\n        if (newScore >= siblingScoreThreshold) {\n          return wrappingDiv.append($sibling);\n        } else if (sibling.tagName === 'p') {\n          var siblingContent = $sibling.text();\n          var siblingContentLength = textLength(siblingContent);\n\n          if (siblingContentLength > 80 && density < 0.25) {\n            return wrappingDiv.append($sibling);\n          } else if (siblingContentLength <= 80 && density === 0 && hasSentenceEnd(siblingContent)) {\n            return wrappingDiv.append($sibling);\n          }\n        }\n      }\n    }\n\n    return null;\n  });\n\n  if (wrappingDiv.children().length === 1 && wrappingDiv.children().first().get(0) === $candidate.get(0)) {\n    return $candidate;\n  }\n\n  return wrappingDiv;\n}\n\n// After we've calculated scores, loop through all of the possible\n// candidate nodes we found and find the one with the highest score.\nfunction findTopCandidate$$1($) {\n  var $candidate = void 0;\n  var topScore = 0;\n\n  $('[score]').each(function (index, node) {\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE$1.test(node.tagName)) {\n      return;\n    }\n\n    var $node = $(node);\n    var score = getScore($node);\n\n    if (score > topScore) {\n      topScore = score;\n      $candidate = $node;\n    }\n  });\n\n  // If we don't have a candidate, return the body\n  // or whatever the first element is\n  if (!$candidate) {\n    return $('body') || $('*').first();\n  }\n\n  $candidate = mergeSiblings($candidate, topScore, $);\n\n  return $candidate;\n}\n\n// Scoring\n\nfunction removeUnlessContent($node, $, weight) {\n  // Explicitly save entry-content-asset tags, which are\n  // noted as valuable in the Publisher guidelines. For now\n  // this works everywhere. We may want to consider making\n  // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  var content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    var pCount = $('p', $node).length;\n    var inputCount = $('input', $node).length;\n\n    // Looks like a form, too many inputs.\n    if (inputCount > pCount / 3) {\n      $node.remove();\n      return;\n    }\n\n    var contentLength = content.length;\n    var imgCount = $('img', $node).length;\n\n    // Content is too short, and there are no images, so\n    // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    var density = linkDensity($node);\n\n    // Too high of link density, is probably a menu or\n    // something similar.\n    // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n    // Too high of a link density, despite the score being\n    // high.\n    if (weight >= 25 && density > 0.5) {\n      // Don't remove the node if it's a list and the\n      // previous sibling starts with a colon though. That\n      // means it's probably content.\n      var tagName = $node.get(0).tagName.toLowerCase();\n      var nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        var previousNode = $node.prev();\n        if (previousNode && normalizeSpaces(previousNode.text()).slice(-1) === ':') {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    var scriptCount = $('script', $node).length;\n\n    // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n      return;\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nfunction cleanTags$$1($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each(function (index, node) {\n    var $node = $(node);\n    var weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore$$1($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n\nfunction cleanHeaders($article, $) {\n  var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  $(HEADER_TAG_LIST, $article).each(function (index, header) {\n    var $header = $(header);\n    // Remove any headers that appear before all other p tags in the\n    // document. This probably means that it was part of the title, a\n    // subtitle or something else extraneous like a datestamp or byline,\n    // all of which should be handled by other metadata handling.\n    if ($($header, $article).prevAll('p').length === 0) {\n      return $header.remove();\n    }\n\n    // Remove any headers that match the title exactly.\n    if (normalizeSpaces($(header).text()) === title) {\n      return $header.remove();\n    }\n\n    // If this header has a negative weight, it's probably junk.\n    // Get rid of it.\n    if (getWeight($(header)) < 0) {\n      return $header.remove();\n    }\n\n    return $header;\n  });\n\n  return $;\n}\n\n// Rewrite the tag name to div if it's a top level node like body or\n// html to avoid later complications with multiple body tags.\nfunction rewriteTopLevel$$1(article, $) {\n  // I'm not using context here because\n  // it's problematic when converting the\n  // top-level/root node - AP\n  $ = convertNodeTo$$1($('html'), $, 'div');\n  $ = convertNodeTo$$1($('body'), $, 'div');\n\n  return $;\n}\n\nfunction absolutize($, rootUrl, attr, $content) {\n  $('[' + attr + ']', $content).each(function (_, node) {\n    var attrs = getAttrs(node);\n    var url = attrs[attr];\n\n    if (url) {\n      var absoluteUrl = URL.resolve(rootUrl, url);\n      setAttr(node, attr, absoluteUrl);\n    }\n  });\n}\n\nfunction makeLinksAbsolute$$1($content, $, url) {\n  ['href', 'src'].forEach(function (attr) {\n    return absolutize($, url, attr, $content);\n  });\n\n  return $content;\n}\n\nfunction textLength(text) {\n  return text.trim().replace(/\\s+/g, ' ').length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nfunction linkDensity($node) {\n  var totalTextLength = textLength($node.text());\n\n  var linkText = $node.find('a').text();\n  var linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  } else if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n\n// Given a node type to search for, and a list of meta tag names to\n// search for, find a meta tag associated.\nfunction extractFromMeta$$1($, metaNames, cachedNames) {\n  var cleanTags$$1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  var foundNames = metaNames.filter(function (name) {\n    return cachedNames.indexOf(name) !== -1;\n  });\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var name = _step.value;\n\n      var type = 'name';\n      var value = 'value';\n\n      var nodes = $('meta[' + type + '=\"' + name + '\"]');\n\n      // Get the unique value of every matching node, in case there\n      // are two meta tags with the same name and value.\n      // Remove empty values.\n      var values = nodes.map(function (index, node) {\n        return $(node).attr(value);\n      }).toArray().filter(function (text) {\n        return text !== '';\n      });\n\n      // If we have more than one value for the same name, we have a\n      // conflict and can't trust any of them. Skip this name. If we have\n      // zero, that means our meta tags had no values. Skip this name\n      // also.\n      if (values.length === 1) {\n        var metaValue = void 0;\n        // Meta values that contain HTML should be stripped, as they\n        // weren't subject to cleaning previously.\n        if (cleanTags$$1) {\n          metaValue = stripTags(values[0], $);\n        } else {\n          metaValue = values[0];\n        }\n\n        return {\n          v: metaValue\n        };\n      }\n    };\n\n    for (var _iterator = _getIterator(foundNames), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ret = _loop();\n\n      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    }\n\n    // If nothing is found, return null\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment$$1($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nfunction extractFromSelectors$$1($, selectors) {\n  var maxChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var textOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(selectors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var selector = _step.value;\n\n      var nodes = $(selector);\n\n      // If we didn't get exactly one of this selector, this may be\n      // a list of articles or comments. Skip it.\n      if (nodes.length === 1) {\n        var $node = $(nodes[0]);\n\n        if (isGoodNode($node, maxChildren)) {\n          var content = void 0;\n          if (textOnly) {\n            content = $node.text();\n          } else {\n            content = $node.html();\n          }\n\n          if (content) {\n            return content;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\n// strips all tags from a string of text\nfunction stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  var cleanText = $('<span>' + text + '</span>').text();\n  return cleanText === '' ? text : cleanText;\n}\n\nfunction withinComment$$1($node) {\n  var parents = $node.parents().toArray();\n  var commentParent = parents.find(function (parent) {\n    var attrs = getAttrs(parent);\n    var nodeClass = attrs.class,\n        id = attrs.id;\n\n    var classAndId = nodeClass + ' ' + id;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n\n// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nfunction nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n\nfunction isWordpress($) {\n  return $(IS_WP_SELECTOR).length > 0;\n}\n\nfunction getAttrs(node) {\n  var attribs = node.attribs,\n      attributes = node.attributes;\n\n\n  if (!attribs && attributes) {\n    var attrs = _Reflect$ownKeys(attributes).reduce(function (acc, index) {\n      var attr = attributes[index];\n\n      if (!attr.name || !attr.value) return acc;\n\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n    return attrs;\n  }\n\n  return attribs;\n}\n\nfunction setAttr(node, attr, val) {\n  if (node.attribs) {\n    node.attribs[attr] = val;\n  } else if (node.attributes) {\n    node.setAttribute(attr, val);\n  }\n\n  return node;\n}\n\nfunction setAttrs(node, attrs) {\n  if (node.attribs) {\n    node.attribs = attrs;\n  } else if (node.attributes) {\n    while (node.attributes.length > 0) {\n      node.removeAttribute(node.attributes[0].name);\n    }\n\n    _Reflect$ownKeys(attrs).forEach(function (key) {\n      node.setAttribute(key, attrs[key]);\n    });\n  }\n\n  return node;\n}\n\n// DOM manipulation\n\nvar IS_LINK = new RegExp('https?://', 'i');\nvar IS_IMAGE = new RegExp('.(png|gif|jpe?g)', 'i');\n\nvar TAGS_TO_REMOVE = ['script', 'style', 'form'].join(',');\n\n// Convert all instances of images with potentially\n// lazy loaded images into normal images.\n// Many sites will have img tags with no source, or an image tag with a src\n// attribute that a is a placeholer. We need to be able to properly fill in\n// the src attribute so the images are no longer lazy loaded.\nfunction convertLazyLoadedImages($) {\n  $('img').each(function (_, img) {\n    var attrs = getAttrs(img);\n\n    _Reflect$ownKeys(attrs).forEach(function (attr) {\n      var value = attrs[attr];\n\n      if (attr !== 'src' && IS_LINK.test(value) && IS_IMAGE.test(value)) {\n        $(img).attr('src', value);\n      }\n    });\n  });\n\n  return $;\n}\n\nfunction isComment(index, node) {\n  return node.type === 'comment';\n}\n\nfunction cleanComments($) {\n  $.root().find('*').contents().filter(isComment).remove();\n\n  return $;\n}\n\nfunction clean($) {\n  $(TAGS_TO_REMOVE).remove();\n\n  $ = cleanComments($);\n  return $;\n}\n\nvar Resource = {\n\n  // Create a Resource.\n  //\n  // :param url: The URL for the document we should retrieve.\n  // :param response: If set, use as the response rather than\n  //                  attempting to fetch it ourselves. Expects a\n  //                  string.\n  create: function create(url, preparedResponse, parsedUrl) {\n    var _this = this;\n\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n      var result, validResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              result = void 0;\n\n              if (!preparedResponse) {\n                _context.next = 6;\n                break;\n              }\n\n              validResponse = {\n                statusMessage: 'OK',\n                statusCode: 200,\n                headers: {\n                  'content-type': 'text/html',\n                  'content-length': 500\n                }\n              };\n\n\n              result = { body: preparedResponse, response: validResponse };\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.next = 8;\n              return fetchResource$1(url, parsedUrl);\n\n            case 8:\n              result = _context.sent;\n\n            case 9:\n              if (!result.error) {\n                _context.next = 12;\n                break;\n              }\n\n              result.failed = true;\n              return _context.abrupt('return', result);\n\n            case 12:\n              return _context.abrupt('return', _this.generateDoc(result));\n\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this);\n    }))();\n  },\n  generateDoc: function generateDoc(_ref) {\n    var content = _ref.body,\n        response = _ref.response;\n    var contentType = response.headers['content-type'];\n\n    // TODO: Implement is_text function from\n    // https://github.com/ReadabilityHoldings/readability/blob/8dc89613241d04741ebd42fa9fa7df1b1d746303/readability/utils/text.py#L57\n\n    if (!contentType.includes('html') && !contentType.includes('text')) {\n      throw new Error('Content does not appear to be text.');\n    }\n\n    var $ = cheerio.load(content, { normalizeWhitespace: true });\n\n    if ($.root().children().length === 0) {\n      throw new Error('No children, likely a bad parse.');\n    }\n\n    $ = normalizeMetaTags($);\n    $ = convertLazyLoadedImages($);\n    $ = clean($);\n\n    return $;\n  }\n};\n\nvar merge = function merge(extractor, domains) {\n  return domains.reduce(function (acc, domain) {\n    acc[domain] = extractor;\n    return acc;\n  }, {});\n};\n\nfunction mergeSupportedDomains(extractor) {\n  return extractor.supportedDomains ? merge(extractor, [extractor.domain].concat(_toConsumableArray(extractor.supportedDomains))) : merge(extractor, [extractor.domain]);\n}\n\nvar BloggerExtractor = {\n  domain: 'blogspot.com',\n  content: {\n    // Blogger is insane and does not load its content\n    // initially in the page, but it's all there\n    // in noscript\n    selectors: ['.post-content noscript'],\n\n    // Selectors to remove from the extracted content\n    clean: [],\n\n    // Convert the noscript tag to a div\n    transforms: {\n      noscript: 'div'\n    }\n  },\n\n  author: {\n    selectors: ['.post-author-name']\n  },\n\n  title: {\n    selectors: ['.post h2.title']\n  },\n\n  date_published: {\n    selectors: ['span.publishdate']\n  }\n};\n\nvar NYMagExtractor = {\n  domain: 'nymag.com',\n  content: {\n    // Order by most likely. Extractor will stop on first occurrence\n    selectors: ['div.article-content', 'section.body', 'article.article'],\n\n    // Selectors to remove from the extracted content\n    clean: ['.ad', '.single-related-story'],\n\n    // Object of tranformations to make on matched elements\n    // Each key is the selector, each value is the tag to\n    // transform to.\n    // If a function is given, it should return a string\n    // to convert to or nothing (in which case it will not perform\n    // the transformation.\n    transforms: {\n      // Convert h1s to h2s\n      h1: 'h2',\n\n      // Convert lazy-loaded noscript images to figures\n      noscript: function noscript($node, $) {\n        var $children = $.browser ? $($node.text()) : $node.children();\n        if ($children.length === 1 && $children.get(0) !== undefined && $children.get(0).tagName.toLowerCase() === 'img') {\n          return 'figure';\n        }\n\n        return null;\n      }\n    }\n  },\n\n  title: {\n    selectors: ['h1.lede-feature-title', 'h1.headline-primary', 'h1']\n  },\n\n  author: {\n    selectors: ['.by-authors', '.lede-feature-author']\n  },\n\n  dek: {\n    selectors: ['.lede-feature-teaser']\n  },\n\n  date_published: {\n    selectors: [['time.article-timestamp[datetime]', 'datetime'], 'time.article-timestamp']\n  }\n};\n\nvar WikipediaExtractor = {\n  domain: 'wikipedia.org',\n  content: {\n    selectors: ['#mw-content-text'],\n\n    defaultCleaner: false,\n\n    // transform top infobox to an image with caption\n    transforms: {\n      '.infobox img': function infoboxImg($node) {\n        var $parent = $node.parents('.infobox');\n        // Only prepend the first image in .infobox\n        if ($parent.children('img').length === 0) {\n          $parent.prepend($node);\n        }\n      },\n      '.infobox caption': 'figcaption',\n      '.infobox': 'figure'\n    },\n\n    // Selectors to remove from the extracted content\n    clean: ['.mw-editsection', 'figure tr, figure td, figure tbody', '#toc', '.navbox']\n\n  },\n\n  author: 'Wikipedia Contributors',\n\n  title: {\n    selectors: ['h2.title']\n  },\n\n  date_published: {\n    selectors: ['#footer-info-lastmod']\n  }\n\n};\n\nvar TwitterExtractor = {\n  domain: 'twitter.com',\n\n  content: {\n    transforms: {\n      // We're transforming essentially the whole page here.\n      // Twitter doesn't have nice selectors, so our initial\n      // selector grabs the whole page, then we're re-writing\n      // it to fit our needs before we clean it up.\n      '.permalink[role=main]': function permalinkRoleMain($node, $) {\n        var tweets = $node.find('.tweet');\n        var $tweetContainer = $('<div id=\"TWEETS_GO_HERE\"></div>');\n        $tweetContainer.append(tweets);\n        $node.replaceWith($tweetContainer);\n      },\n\n      // Twitter wraps @ with s, which\n      // renders as a strikethrough\n      s: 'span'\n    },\n\n    selectors: ['.permalink[role=main]'],\n\n    defaultCleaner: false,\n\n    clean: ['.stream-item-footer', 'button', '.tweet-details-fixer']\n  },\n\n  author: {\n    selectors: ['.tweet.permalink-tweet .username']\n  },\n\n  date_published: {\n    selectors: [['.permalink-tweet ._timestamp[data-time-ms]', 'data-time-ms']]\n  }\n\n};\n\nvar NYTimesExtractor = {\n  domain: 'www.nytimes.com',\n\n  title: {\n    selectors: ['.g-headline', 'h1.headline']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], '.g-byline', '.byline']\n  },\n\n  content: {\n    selectors: ['div.g-blocks', 'article#story'],\n\n    transforms: {\n      'img.g-lazy': function imgGLazy($node) {\n        var src = $node.attr('src');\n        // const widths = $node.attr('data-widths')\n        //                   .slice(1)\n        //                   .slice(0, -1)\n        //                   .split(',');\n        // if (widths.length) {\n        //   width = widths.slice(-1);\n        // } else {\n        //   width = '900';\n        // }\n        var width = 640;\n\n        src = src.replace('{{size}}', width);\n        $node.attr('src', src);\n      }\n    },\n\n    clean: ['.ad', 'header#story-header', '.story-body-1 .lede.video', '.visually-hidden', '#newsletter-promo', '.promo', '.comments-button', '.hidden', '.comments', '.supplemental', '.nocontent', '.story-footer-links']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: null,\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\nvar TheAtlanticExtractor = {\n  domain: 'www.theatlantic.com',\n  title: {\n    selectors: ['h1.hed']\n  },\n\n  author: {\n    selectors: ['article#article .article-cover-extra .metadata .byline a']\n  },\n\n  content: {\n    selectors: [['.article-cover figure.lead-img', '.article-body'], '.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.partner-box']\n  },\n\n  date_published: {\n    selectors: [['time[itemProp=\"datePublished\"]', 'datetime']]\n  },\n\n  lead_image_url: null,\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar NewYorkerExtractor = {\n  domain: 'www.newyorker.com',\n  title: {\n    selectors: ['h1.title']\n  },\n\n  author: {\n    selectors: ['.contributors']\n  },\n\n  content: {\n    selectors: ['div#articleBody', 'div.articleBody'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value'], ['time[itemProp=\"datePublished\"]', 'content']],\n\n    timezone: 'America/New_York'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['.dek', 'h2.dek']\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar WiredExtractor = {\n  domain: 'www.wired.com',\n  title: {\n    selectors: ['h1.post-title']\n  },\n\n  author: {\n    selectors: ['a[rel=\"author\"]']\n  },\n\n  content: {\n    selectors: ['article.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.visually-hidden']\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar MSNExtractor = {\n  domain: 'www.msn.com',\n  title: {\n    selectors: ['h1']\n  },\n\n  author: {\n    selectors: ['span.authorname-txt']\n  },\n\n  content: {\n    selectors: ['div.richtext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span.caption']\n  },\n\n  date_published: {\n    selectors: ['span.time']\n  },\n\n  lead_image_url: {\n    selectors: []\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar YahooExtractor = {\n  domain: 'www.yahoo.com',\n  title: {\n    selectors: ['header.canvas-header']\n  },\n\n  author: {\n    selectors: ['span.provider-name']\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.content-canvas'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.figure-caption']\n  },\n\n  date_published: {\n    selectors: [['time.date[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter dek selectors\n    ]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar BuzzfeedExtractor = {\n  domain: 'www.buzzfeed.com',\n  title: {\n    selectors: ['h1[id=\"post-title\"]']\n  },\n\n  author: {\n    selectors: ['a[data-action=\"user/username\"]', 'byline__author']\n  },\n\n  content: {\n    selectors: [['.longform_custom_header_media', '#buzz_sub_buzz'], '#buzz_sub_buzz'],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: 'b',\n\n      'div.longform_custom_header_media': function divLongform_custom_header_media($node) {\n        if ($node.has('img') && $node.has('.longform_header_image_source')) {\n          return 'figure';\n        }\n\n        return null;\n      },\n\n      'figure.longform_custom_header_media .longform_header_image_source': 'figcaption'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.instapaper_ignore', '.suplist_list_hide .buzz_superlist_item .buzz_superlist_number_inline', '.share-box', '.print']\n  },\n\n  date_published: {\n    selectors: ['.buzz-datetime']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar WikiaExtractor = {\n  domain: 'fandom.wikia.com',\n  title: {\n    selectors: ['h1.entry-title']\n  },\n\n  author: {\n    selectors: ['.author vcard', '.fn']\n  },\n\n  content: {\n    selectors: ['.grid-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar LittleThingsExtractor = {\n  domain: 'www.littlethings.com',\n  title: {\n    selectors: ['h1.post-title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.mainContentIntro', '.content-wrapper'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar PoliticoExtractor = {\n  domain: 'www.politico.com',\n  title: {\n    selectors: [\n    // enter title selectors\n    ['meta[name=\"og:title\"]', 'value']]\n  },\n\n  author: {\n    selectors: ['.story-main-content .byline .vcard']\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.story-main-content', '.content-group', '.story-core', '.story-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['figcaption']\n  },\n\n  date_published: {\n    selectors: [['.story-main-content .timestamp time[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [\n    // enter lead_image_url selectors\n    ['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\nvar DeadspinExtractor = {\n  domain: 'deadspin.com',\n\n  supportedDomains: ['jezebel.com', 'lifehacker.com', 'kotaku.com', 'gizmodo.com', 'jalopnik.com', 'kinja.com'],\n\n  title: {\n    selectors: ['h1.headline']\n  },\n\n  author: {\n    selectors: ['.author']\n  },\n\n  content: {\n    selectors: ['.post-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'iframe.lazyload[data-recommend-id^=\"youtube://\"]': function iframeLazyloadDataRecommendIdYoutube($node) {\n        var youtubeId = $node.attr('id').split('youtube-')[1];\n        $node.attr('src', 'https://www.youtube.com/embed/' + youtubeId);\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.magnifier', '.lightbox']\n  },\n\n  date_published: {\n    selectors: [['time.updated[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar BroadwayWorldExtractor = {\n  domain: 'www.broadwayworld.com',\n  title: {\n    selectors: ['h1.article-title']\n  },\n\n  author: {\n    selectors: ['span[itemprop=author]']\n  },\n\n  content: {\n    selectors: ['div[itemprop=articlebody]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=datePublished]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar ApartmentTherapyExtractor = {\n  domain: 'www.apartmenttherapy.com',\n  title: {\n    selectors: ['h1.headline']\n  },\n\n  author: {\n    selectors: ['.PostByline__name']\n  },\n\n  content: {\n    selectors: ['div.post__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[data-render-react-id=\"images/LazyPicture\"]': function divDataRenderReactIdImagesLazyPicture($node, $) {\n        var data = JSON.parse($node.attr('data-props'));\n        var src = data.sources[0].src;\n\n        var $img = $('<img />').attr('src', src);\n        $node.replaceWith($img);\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['.PostByline__timestamp[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\nvar MediumExtractor = {\n  domain: 'medium.com',\n\n  supportedDomains: ['trackchanges.postlight.com'],\n\n  title: {\n    selectors: ['h1']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.section-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // Re-write lazy-loaded youtube videos\n      iframe: function iframe($node) {\n        var ytRe = /https:\\/\\/i.embed.ly\\/.+url=https:\\/\\/i\\.ytimg\\.com\\/vi\\/(\\w+)\\//;\n        var thumb = decodeURIComponent($node.attr('data-thumbnail'));\n\n        if (ytRe.test(thumb)) {\n          var _thumb$match = thumb.match(ytRe),\n              _thumb$match2 = _slicedToArray(_thumb$match, 2),\n              _ = _thumb$match2[0],\n              youtubeId = _thumb$match2[1]; // eslint-disable-line\n\n\n          $node.attr('src', 'https://www.youtube.com/embed/' + youtubeId);\n          var $parent = $node.parents('figure');\n          $parent.prepend($node.clone());\n          $node.remove();\n        }\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['time[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\nvar WwwTmzComExtractor = {\n  domain: 'www.tmz.com',\n\n  title: {\n    selectors: ['.post-title-breadcrumb', 'h1', '.headline']\n  },\n\n  author: 'TMZ STAFF',\n\n  date_published: {\n    selectors: ['.article-posted-date'],\n\n    timezone: 'America/Los_Angeles'\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article-content', '.all-post-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.lightbox-link']\n  }\n};\n\nvar WwwWashingtonpostComExtractor = {\n  domain: 'www.washingtonpost.com',\n\n  title: {\n    selectors: ['h1', '#topper-headline-wrapper']\n  },\n\n  author: {\n    selectors: ['.pb-byline']\n  },\n\n  date_published: {\n    selectors: [['.pb-timestamp[itemprop=\"datePublished\"]', 'content']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.inline-content': function divInlineContent($node) {\n        if ($node.has('img,iframe,video').length > 0) {\n          return 'figure';\n        }\n\n        $node.remove();\n        return null;\n      },\n      '.pb-caption': 'figcaption'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.interstitial-link', '.newsletter-inline-unit']\n  }\n};\n\nvar WwwHuffingtonpostComExtractor = {\n  domain: 'www.huffingtonpost.com',\n\n  title: {\n    selectors: ['h1.headline__title']\n  },\n\n  author: {\n    selectors: ['span.author-card__details__name']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:modified_time\"]', 'value'], ['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['h2.headline__subtitle']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.entry__body'],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // 'div.top-media': ($node) => {\n      //   const $figure = $node.children('figure');\n      //   $node.replaceWith($figure);\n      // },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote', '.tag-cloud', '.embed-asset', '.below-entry', '.entry-corrections', '#suggested-story']\n  }\n};\n\nvar NewrepublicComExtractor = {\n  domain: 'newrepublic.com',\n\n  title: {\n    selectors: ['h1.article-headline', '.minutes-primary h1.minute-title']\n  },\n\n  author: {\n    selectors: ['div.author-list', '.minutes-primary h3.minute-byline']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n\n    timezone: 'America/New_York'\n  },\n\n  dek: {\n    selectors: ['h2.article-subhead']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.content-body', '.minutes-primary div.content-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['aside']\n  }\n};\n\nvar MoneyCnnComExtractor = {\n  domain: 'money.cnn.com',\n\n  title: {\n    selectors: ['.article-title']\n  },\n\n  author: {\n    selectors: ['.byline a']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n\n    timezone: 'GMT'\n  },\n\n  dek: {\n    selectors: ['#storytext h2']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['#storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inStoryHeading']\n  }\n};\n\nvar WwwThevergeComExtractor = {\n  domain: 'www.theverge.com',\n\n  title: {\n    selectors: ['h1']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['h2.p-dek']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [\n    // feature template multi-match\n    ['.c-entry-hero .e-image', '.c-entry-intro', '.c-entry-content'],\n    // regular post multi-match\n    ['.e-image--hero', '.c-entry-content'],\n    // feature template fallback\n    '.l-wrapper .l-feature',\n    // regular post fallback\n    'div.c-entry-content'],\n\n    // Transform lazy-loaded images\n    transforms: {\n      noscript: function noscript($node) {\n        var $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'span';\n        }\n\n        return null;\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.aside', 'img.c-dynamic-image']\n  }\n};\n\nvar WwwCnnComExtractor = {\n  domain: 'www.cnn.com',\n\n  title: {\n    selectors: ['h1.pg-headline', 'h1']\n  },\n\n  author: {\n    selectors: ['.metadata__byline__author']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"pubdate\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [\n    // a more specific selector to grab the lead image and the body\n    ['.media__video--thumbnail', '.zn-body-text'],\n    // a fallback for the above\n    '.zn-body-text', 'div[itemprop=\"articleBody\"]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.zn-body__paragraph, .el__leafmedia--sourced-paragraph': function znBody__paragraphEl__leafmediaSourcedParagraph($node) {\n        var $text = $node.html();\n        if ($text) {\n          return 'p';\n        }\n\n        return null;\n      },\n\n      // this transform cleans the short, all-link sections linking\n      // to related content but not marked as such in any way.\n      '.zn-body__paragraph': function znBody__paragraph($node) {\n        if ($node.has('a')) {\n          if ($node.text().trim() === $node.find('a').text().trim()) {\n            $node.remove();\n          }\n        }\n      },\n\n      '.media__video--thumbnail': 'figure'\n\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwAolComExtractor = {\n  domain: 'www.aol.com',\n\n  title: {\n    selectors: ['h1.p-article__title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: ['.p-article__byline__date'],\n\n    timezone: 'America/New_York'\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\n\n\nvar CustomExtractors = Object.freeze({\n\tBloggerExtractor: BloggerExtractor,\n\tNYMagExtractor: NYMagExtractor,\n\tWikipediaExtractor: WikipediaExtractor,\n\tTwitterExtractor: TwitterExtractor,\n\tNYTimesExtractor: NYTimesExtractor,\n\tTheAtlanticExtractor: TheAtlanticExtractor,\n\tNewYorkerExtractor: NewYorkerExtractor,\n\tWiredExtractor: WiredExtractor,\n\tMSNExtractor: MSNExtractor,\n\tYahooExtractor: YahooExtractor,\n\tBuzzfeedExtractor: BuzzfeedExtractor,\n\tWikiaExtractor: WikiaExtractor,\n\tLittleThingsExtractor: LittleThingsExtractor,\n\tPoliticoExtractor: PoliticoExtractor,\n\tDeadspinExtractor: DeadspinExtractor,\n\tBroadwayWorldExtractor: BroadwayWorldExtractor,\n\tApartmentTherapyExtractor: ApartmentTherapyExtractor,\n\tMediumExtractor: MediumExtractor,\n\tWwwTmzComExtractor: WwwTmzComExtractor,\n\tWwwWashingtonpostComExtractor: WwwWashingtonpostComExtractor,\n\tWwwHuffingtonpostComExtractor: WwwHuffingtonpostComExtractor,\n\tNewrepublicComExtractor: NewrepublicComExtractor,\n\tMoneyCnnComExtractor: MoneyCnnComExtractor,\n\tWwwThevergeComExtractor: WwwThevergeComExtractor,\n\tWwwCnnComExtractor: WwwCnnComExtractor,\n\tWwwAolComExtractor: WwwAolComExtractor\n});\n\nvar Extractors = _Object$keys(CustomExtractors).reduce(function (acc, key) {\n  var extractor = CustomExtractors[key];\n  return _extends({}, acc, mergeSupportedDomains(extractor));\n}, {});\n\n// CLEAN AUTHOR CONSTANTS\nvar CLEAN_AUTHOR_RE = /^\\s*(posted |written )?by\\s*:?\\s*(.*)/i;\n//     author = re.sub(r'^\\s*(posted |written )?by\\s*:?\\s*(.*)(?i)',\n\n// CLEAN DEK CONSTANTS\nvar TEXT_LINK_RE = new RegExp('http(s)?://', 'i');\n// An ordered list of meta tag names that denote likely article deks.\n// From most distinct to least distinct.\n//\n// NOTE: There are currently no meta tags that seem to provide the right\n// content consistenty enough. Two options were:\n//  - og:description\n//  - dc.description\n// However, these tags often have SEO-specific junk in them that's not\n// header-worthy like a dek is. Excerpt material at best.\n\n\n// An ordered list of Selectors to find likely article deks. From\n// most explicit to least explicit.\n//\n// Should be more restrictive than not, as a failed dek can be pretty\n// detrimental to the aesthetics of an article.\n\n\n// CLEAN DATE PUBLISHED CONSTANTS\nvar MS_DATE_STRING = /^\\d{13}$/i;\nvar SEC_DATE_STRING = /^\\d{10}$/i;\nvar CLEAN_DATE_STRING_RE = /^\\s*published\\s*:?\\s*(.*)/i;\nvar TIME_MERIDIAN_SPACE_RE = /(.*\\d)(am|pm)(.*)/i;\nvar TIME_MERIDIAN_DOTS_RE = /\\.m\\./i;\nvar months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\nvar allMonths = months.join('|');\nvar timestamp1 = '[0-9]{1,2}:[0-9]{2,2}( ?[ap].?m.?)?';\nvar timestamp2 = '[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2,4}';\nvar timestamp3 = '-[0-9]{3,4}$';\nvar SPLIT_DATE_STRING = new RegExp('(' + timestamp1 + ')|(' + timestamp2 + ')|(' + timestamp3 + ')|([0-9]{1,4})|(' + allMonths + ')', 'ig');\n\n// 2016-11-22T08:57-500\n// Check if datetime string has an offset at the end\nvar TIME_WITH_OFFSET_RE = /-\\d{3,4}$/;\n\n// CLEAN TITLE CONSTANTS\n// A regular expression that will match separating characters on a\n// title, that usually denote breadcrumbs or something similar.\nvar TITLE_SPLITTERS_RE = /(: | - | \\| )/g;\n\nvar DOMAIN_ENDINGS_RE = new RegExp('.com$|.net$|.org$|.co.uk$', 'g');\n\n// Take an author string (like 'By David Smith ') and clean it to\n// just the name(s): 'David Smith'.\nfunction cleanAuthor(author) {\n  return normalizeSpaces(author.replace(CLEAN_AUTHOR_RE, '$2').trim());\n}\n\nfunction clean$1(leadImageUrl) {\n  leadImageUrl = leadImageUrl.trim();\n  if (validUrl.isWebUri(leadImageUrl)) {\n    return leadImageUrl;\n  }\n\n  return null;\n}\n\n// Take a dek HTML fragment, and return the cleaned version of it.\n// Return None if the dek wasn't good enough.\nfunction cleanDek(dek, _ref) {\n  var $ = _ref.$,\n      excerpt = _ref.excerpt;\n\n  // Sanity check that we didn't get too short or long of a dek.\n  if (dek.length > 1000 || dek.length < 5) return null;\n\n  // Check that dek isn't the same as excerpt\n  if (excerpt && excerptContent(excerpt, 10) === excerptContent(dek, 10)) return null;\n\n  var dekText = stripTags(dek, $);\n\n  // Plain text links shouldn't exist in the dek. If we have some, it's\n  // not a good dek - bail.\n  if (TEXT_LINK_RE.test(dekText)) return null;\n\n  return normalizeSpaces(dekText.trim());\n}\n\n// Is there a compelling reason to use moment here?\n// Mostly only being used for the isValid() method,\n// but could just check for 'Invalid Date' string.\n\nfunction cleanDateString(dateString) {\n  return (dateString.match(SPLIT_DATE_STRING) || []).join(' ').replace(TIME_MERIDIAN_DOTS_RE, 'm').replace(TIME_MERIDIAN_SPACE_RE, '$1 $2 $3').replace(CLEAN_DATE_STRING_RE, '$1').trim();\n}\n\nfunction createDate(dateString, timezone) {\n  if (TIME_WITH_OFFSET_RE.test(dateString)) {\n    return moment(new Date(dateString));\n  }\n\n  return timezone ? moment.tz(dateString, parseFormat(dateString), timezone) : moment(dateString, parseFormat(dateString));\n}\n\n// Take a date published string, and hopefully return a date out of\n// it. Return none if we fail.\nfunction cleanDatePublished(dateString) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      timezone = _ref.timezone;\n\n  // If string is in milliseconds or seconds, convert to int and return\n  if (MS_DATE_STRING.test(dateString) || SEC_DATE_STRING.test(dateString)) {\n    return new Date(parseInt(dateString, 10)).toISOString();\n  }\n\n  var date = createDate(dateString, timezone);\n\n  if (!date.isValid()) {\n    dateString = cleanDateString(dateString);\n    date = createDate(dateString, timezone);\n  }\n\n  return date.isValid() ? date.toISOString() : null;\n}\n\n// Clean our article content, returning a new, cleaned node.\nfunction extractCleanNode(article, _ref) {\n  var $ = _ref.$,\n      _ref$cleanConditional = _ref.cleanConditionally,\n      cleanConditionally = _ref$cleanConditional === undefined ? true : _ref$cleanConditional,\n      _ref$title = _ref.title,\n      title = _ref$title === undefined ? '' : _ref$title,\n      _ref$url = _ref.url,\n      url = _ref$url === undefined ? '' : _ref$url,\n      _ref$defaultCleaner = _ref.defaultCleaner,\n      defaultCleaner = _ref$defaultCleaner === undefined ? true : _ref$defaultCleaner;\n\n  // Rewrite the tag name to div if it's a top level node like body or\n  // html to avoid later complications with multiple body tags.\n  rewriteTopLevel$$1(article, $);\n\n  // Drop small images and spacer images\n  // Only do this is defaultCleaner is set to true;\n  // this can sometimes be too aggressive.\n  if (defaultCleaner) cleanImages(article, $);\n\n  // Mark elements to keep that would normally be removed.\n  // E.g., stripJunkTags will remove iframes, so we're going to mark\n  // YouTube/Vimeo videos as elements we want to keep.\n  markToKeep(article, $, url);\n\n  // Drop certain tags like <title>, etc\n  // This is -mostly- for cleanliness, not security.\n  stripJunkTags(article, $);\n\n  // H1 tags are typically the article title, which should be extracted\n  // by the title extractor instead. If there's less than 3 of them (<3),\n  // strip them. Otherwise, turn 'em into H2s.\n  cleanHOnes$$1(article, $);\n\n  // Clean headers\n  cleanHeaders(article, $, title);\n\n  // Make links absolute\n  makeLinksAbsolute$$1(article, $, url);\n\n  // We used to clean UL's and OL's here, but it was leading to\n  // too many in-article lists being removed. Consider a better\n  // way to detect menus particularly and remove them.\n  // Also optionally running, since it can be overly aggressive.\n  if (defaultCleaner) cleanTags$$1(article, $, cleanConditionally);\n\n  // Remove empty paragraph nodes\n  removeEmpty(article, $);\n\n  // Remove unnecessary attributes\n  cleanAttributes$$1(article, $);\n\n  return article;\n}\n\nfunction cleanTitle$$1(title, _ref) {\n  var url = _ref.url,\n      $ = _ref.$;\n\n  // If title has |, :, or - in it, see if\n  // we can clean it up.\n  if (TITLE_SPLITTERS_RE.test(title)) {\n    title = resolveSplitTitle(title, url);\n  }\n\n  // Final sanity check that we didn't get a crazy title.\n  // if (title.length > 150 || title.length < 15) {\n  if (title.length > 150) {\n    // If we did, return h1 from the document if it exists\n    var h1 = $('h1');\n    if (h1.length === 1) {\n      title = h1.text();\n    }\n  }\n\n  // strip any html tags in the title text\n  return normalizeSpaces(stripTags(title, $).trim());\n}\n\nfunction extractBreadcrumbTitle(splitTitle, text) {\n  // This must be a very breadcrumbed title, like:\n  // The Best Gadgets on Earth : Bits : Blogs : NYTimes.com\n  // NYTimes - Blogs - Bits - The Best Gadgets on Earth\n  if (splitTitle.length >= 6) {\n    var _ret = function () {\n      // Look to see if we can find a breadcrumb splitter that happens\n      // more than once. If we can, we'll be able to better pull out\n      // the title.\n      var termCounts = splitTitle.reduce(function (acc, titleText) {\n        acc[titleText] = acc[titleText] ? acc[titleText] + 1 : 1;\n        return acc;\n      }, {});\n\n      var _Reflect$ownKeys$redu = _Reflect$ownKeys(termCounts).reduce(function (acc, key) {\n        if (acc[1] < termCounts[key]) {\n          return [key, termCounts[key]];\n        }\n\n        return acc;\n      }, [0, 0]),\n          _Reflect$ownKeys$redu2 = _slicedToArray(_Reflect$ownKeys$redu, 2),\n          maxTerm = _Reflect$ownKeys$redu2[0],\n          termCount = _Reflect$ownKeys$redu2[1];\n\n      // We found a splitter that was used more than once, so it\n      // is probably the breadcrumber. Split our title on that instead.\n      // Note: max_term should be <= 4 characters, so that \" >> \"\n      // will match, but nothing longer than that.\n\n\n      if (termCount >= 2 && maxTerm.length <= 4) {\n        splitTitle = text.split(maxTerm);\n      }\n\n      var splitEnds = [splitTitle[0], splitTitle.slice(-1)];\n      var longestEnd = splitEnds.reduce(function (acc, end) {\n        return acc.length > end.length ? acc : end;\n      }, '');\n\n      if (longestEnd.length > 10) {\n        return {\n          v: longestEnd\n        };\n      }\n\n      return {\n        v: text\n      };\n    }();\n\n    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n  }\n\n  return null;\n}\n\nfunction cleanDomainFromTitle(splitTitle, url) {\n  // Search the ends of the title, looking for bits that fuzzy match\n  // the URL too closely. If one is found, discard it and return the\n  // rest.\n  //\n  // Strip out the big TLDs - it just makes the matching a bit more\n  // accurate. Not the end of the world if it doesn't strip right.\n  var _URL$parse = URL.parse(url),\n      host = _URL$parse.host;\n\n  var nakedDomain = host.replace(DOMAIN_ENDINGS_RE, '');\n\n  var startSlug = splitTitle[0].toLowerCase().replace(' ', '');\n  var startSlugRatio = wuzzy.levenshtein(startSlug, nakedDomain);\n\n  if (startSlugRatio > 0.4 && startSlug.length > 5) {\n    return splitTitle.slice(2).join('');\n  }\n\n  var endSlug = splitTitle.slice(-1)[0].toLowerCase().replace(' ', '');\n  var endSlugRatio = wuzzy.levenshtein(endSlug, nakedDomain);\n\n  if (endSlugRatio > 0.4 && endSlug.length >= 5) {\n    return splitTitle.slice(0, -2).join('');\n  }\n\n  return null;\n}\n\n// Given a title with separators in it (colons, dashes, etc),\n// resolve whether any of the segments should be removed.\nfunction resolveSplitTitle(title) {\n  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  // Splits while preserving splitters, like:\n  // ['The New New York', ' - ', 'The Washington Post']\n  var splitTitle = title.split(TITLE_SPLITTERS_RE);\n  if (splitTitle.length === 1) {\n    return title;\n  }\n\n  var newTitle = extractBreadcrumbTitle(splitTitle, title);\n  if (newTitle) return newTitle;\n\n  newTitle = cleanDomainFromTitle(splitTitle, url);\n  if (newTitle) return newTitle;\n\n  // Fuzzy ratio didn't find anything, so this title is probably legit.\n  // Just return it all.\n  return title;\n}\n\nvar Cleaners = {\n  author: cleanAuthor,\n  lead_image_url: clean$1,\n  dek: cleanDek,\n  date_published: cleanDatePublished,\n  content: extractCleanNode,\n  title: cleanTitle$$1\n};\n\n// Using a variety of scoring techniques, extract the content most\n// likely to be article text.\n//\n// If strip_unlikely_candidates is True, remove any elements that\n// match certain criteria first. (Like, does this element have a\n// classname of \"comment\")\n//\n// If weight_nodes is True, use classNames and IDs to determine the\n// worthiness of nodes.\n//\n// Returns a cheerio object $\nfunction extractBestNode($, opts) {\n  // clone the node so we can get back to our\n  // initial parsed state if needed\n  // TODO Do I need this? – AP\n  // let $root = $.root().clone()\n\n  if (opts.stripUnlikelyCandidates) {\n    $ = stripUnlikelyCandidates($);\n  }\n\n  $ = convertToParagraphs$$1($);\n  $ = scoreContent$$1($, opts.weightNodes);\n  var $topCandidate = findTopCandidate$$1($);\n\n  return $topCandidate;\n}\n\nvar GenericContentExtractor = {\n  defaultOpts: {\n    stripUnlikelyCandidates: true,\n    weightNodes: true,\n    cleanConditionally: true\n  },\n\n  // Extract the content for this resource - initially, pass in our\n  // most restrictive opts which will return the highest quality\n  // content. On each failure, retry with slightly more lax opts.\n  //\n  // :param return_type: string. If \"node\", should return the content\n  // as a cheerio node rather than as an HTML string.\n  //\n  // Opts:\n  // stripUnlikelyCandidates: Remove any elements that match\n  // non-article-like criteria first.(Like, does this element\n  //   have a classname of \"comment\")\n  //\n  // weightNodes: Modify an elements score based on whether it has\n  // certain classNames or IDs. Examples: Subtract if a node has\n  // a className of 'comment', Add if a node has an ID of\n  // 'entry-content'.\n  //\n  // cleanConditionally: Clean the node to return of some\n  // superfluous content. Things like forms, ads, etc.\n  extract: function extract(_ref, opts) {\n    var $ = _ref.$,\n        html = _ref.html,\n        title = _ref.title,\n        url = _ref.url;\n\n    opts = _extends({}, this.defaultOpts, opts);\n\n    $ = $ || cheerio.load(html);\n\n    // Cascade through our extraction-specific opts in an ordered fashion,\n    // turning them off as we try to extract content.\n    var node = this.getContentNode($, title, url, opts);\n\n    if (nodeIsSufficient(node)) {\n      return this.cleanAndReturnNode(node, $);\n    }\n\n    // We didn't succeed on first pass, one by one disable our\n    // extraction opts and try again.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(_Reflect$ownKeys(opts).filter(function (k) {\n        return opts[k] === true;\n      })), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var key = _step.value;\n\n        opts[key] = false;\n        $ = cheerio.load(html);\n\n        node = this.getContentNode($, title, url, opts);\n\n        if (nodeIsSufficient(node)) {\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return this.cleanAndReturnNode(node, $);\n  },\n\n\n  // Get node given current options\n  getContentNode: function getContentNode($, title, url, opts) {\n    return extractCleanNode(extractBestNode($, opts), {\n      $: $,\n      cleanConditionally: opts.cleanConditionally,\n      title: title,\n      url: url\n    });\n  },\n\n\n  // Once we got here, either we're at our last-resort node, or\n  // we broke early. Make sure we at least have -something- before we\n  // move forward.\n  cleanAndReturnNode: function cleanAndReturnNode(node, $) {\n    if (!node) {\n      return null;\n    }\n\n    return normalizeSpaces($.html(node));\n\n    // if return_type == \"html\":\n    //     return normalize_spaces(node_to_html(node))\n    // else:\n    //     return node\n  }\n};\n\n// TODO: It would be great if we could merge the meta and selector lists into\n// a list of objects, because we could then rank them better. For example,\n// .hentry .entry-title is far better suited than <meta title>.\n\n// An ordered list of meta tag names that denote likely article titles. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\nvar STRONG_TITLE_META_TAGS = ['tweetmeme-title', 'dc.title', 'rbtitle', 'headline', 'title'];\n\n// og:title is weak because it typically contains context that we don't like,\n// for example the source site's name. Gotta get that brand into facebook!\nvar WEAK_TITLE_META_TAGS = ['og:title'];\n\n// An ordered list of XPath Selectors to find likely article titles. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nvar STRONG_TITLE_SELECTORS = ['.hentry .entry-title', 'h1#articleHeader', 'h1.articleHeader', 'h1.article', '.instapaper_title', '#meebo-title'];\n\nvar WEAK_TITLE_SELECTORS = ['article h1', '#entry-title', '.entry-title', '#entryTitle', '#entrytitle', '.entryTitle', '.entrytitle', '#articleTitle', '.articleTitle', 'post post-title', 'h1.title', 'h2.article', 'h1', 'html head title', 'title'];\n\nvar GenericTitleExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        metaCache = _ref.metaCache;\n\n    // First, check to see if we have a matching meta tag that we can make\n    // use of that is strongly associated with the headline.\n    var title = void 0;\n\n    title = extractFromMeta$$1($, STRONG_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // Second, look through our content selectors for the most likely\n    // article title that is strongly associated with the headline.\n    title = extractFromSelectors$$1($, STRONG_TITLE_SELECTORS);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // Third, check for weaker meta tags that may match.\n    title = extractFromMeta$$1($, WEAK_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // Last, look for weaker selector tags that may match.\n    title = extractFromSelectors$$1($, WEAK_TITLE_SELECTORS);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // If no matches, return an empty string\n    return '';\n  }\n};\n\n// An ordered list of meta tag names that denote likely article authors. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\n//\n// Note: \"author\" is too often the -developer- of the page, so it is not\n// added here.\nvar AUTHOR_META_TAGS = ['byl', 'clmst', 'dc.author', 'dcsext.author', 'dc.creator', 'rbauthors', 'authors'];\n\nvar AUTHOR_MAX_LENGTH = 300;\n\n// An ordered list of XPath Selectors to find likely article authors. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nvar AUTHOR_SELECTORS = ['.entry .entry-author', '.author.vcard .fn', '.author .vcard .fn', '.byline.vcard .fn', '.byline .vcard .fn', '.byline .by .author', '.byline .by', '.byline .author', '.post-author.vcard', '.post-author .vcard', 'a[rel=author]', '#by_author', '.by_author', '#entryAuthor', '.entryAuthor', '.byline a[href*=author]', '#author .authorname', '.author .authorname', '#author', '.author', '.articleauthor', '.ArticleAuthor', '.byline'];\n\n// An ordered list of Selectors to find likely article authors, with\n// regular expression for content.\nvar bylineRe = /^[\\n\\s]*By/i;\nvar BYLINE_SELECTORS_RE = [['#byline', bylineRe], ['.byline', bylineRe]];\n\nvar GenericAuthorExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        metaCache = _ref.metaCache;\n\n    var author = void 0;\n\n    // First, check to see if we have a matching\n    // meta tag that we can make use of.\n    author = extractFromMeta$$1($, AUTHOR_META_TAGS, metaCache);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Second, look through our selectors looking for potential authors.\n    author = extractFromSelectors$$1($, AUTHOR_SELECTORS, 2);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Last, use our looser regular-expression based selectors for\n    // potential authors.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(BYLINE_SELECTORS_RE), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ref4 = _step.value;\n\n        var _ref3 = _slicedToArray(_ref4, 2);\n\n        var selector = _ref3[0];\n        var regex = _ref3[1];\n\n        var node = $(selector);\n        if (node.length === 1) {\n          var text = node.text();\n          if (regex.test(text)) {\n            return cleanAuthor(text);\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\n// An ordered list of meta tag names that denote\n// likely date published dates. All attributes\n// should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nvar DATE_PUBLISHED_META_TAGS = ['article:published_time', 'displaydate', 'dc.date', 'dc.date.issued', 'rbpubdate', 'publish_date', 'pub_date', 'pagedate', 'pubdate', 'revision_date', 'doc_date', 'date_created', 'content_create_date', 'lastmodified', 'created', 'date'];\n\n// An ordered list of XPath Selectors to find\n// likely date published dates. From most explicit\n// to least explicit.\nvar DATE_PUBLISHED_SELECTORS = ['.hentry .dtstamp.published', '.hentry .published', '.hentry .dtstamp.updated', '.hentry .updated', '.single .published', '.meta .published', '.meta .postDate', '.entry-date', '.byline .date', '.postmetadata .date', '.article_datetime', '.date-header', '.story-date', '.dateStamp', '#story .datetime', '.dateline', '.pubdate'];\n\n// An ordered list of compiled regular expressions to find likely date\n// published dates from the URL. These should always have the first\n// reference be a date string that is parseable by dateutil.parser.parse\nvar abbrevMonthsStr = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\nvar DATE_PUBLISHED_URL_RES = [\n// /2012/01/27/ but not /2012/01/293\nnew RegExp('/(20\\\\d{2}/\\\\d{2}/\\\\d{2})/', 'i'),\n// 20120127 or 20120127T but not 2012012733 or 8201201733\n// /[^0-9](20\\d{2}[01]\\d[0-3]\\d)([^0-9]|$)/i,\n// 2012-01-27\nnew RegExp('(20\\\\d{2}-[01]\\\\d-[0-3]\\\\d)', 'i'),\n// /2012/jan/27/\nnew RegExp('/(20\\\\d{2}/' + abbrevMonthsStr + '/[0-3]\\\\d)/', 'i')];\n\nvar GenericDatePublishedExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        metaCache = _ref.metaCache;\n\n    var datePublished = void 0;\n    // First, check to see if we have a matching meta tag\n    // that we can make use of.\n    // Don't try cleaning tags from this string\n    datePublished = extractFromMeta$$1($, DATE_PUBLISHED_META_TAGS, metaCache, false);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Second, look through our selectors looking for potential\n    // date_published's.\n    datePublished = extractFromSelectors$$1($, DATE_PUBLISHED_SELECTORS);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Lastly, look to see if a dately string exists in the URL\n    datePublished = extractFromUrl(url, DATE_PUBLISHED_URL_RES);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    return null;\n  }\n};\n\n// import {\n//   DEK_META_TAGS,\n//   DEK_SELECTORS,\n//   DEK_URL_RES,\n// } from './constants';\n\n// import { cleanDek } from 'cleaners';\n\n// import {\n//   extractFromMeta,\n//   extractFromSelectors,\n// } from 'utils/dom';\n\n// Currently there is only one selector for\n// deks. We should simply return null here\n// until we have a more robust generic option.\n// Below is the original source for this, for reference.\nvar GenericDekExtractor = {\n  // extract({ $, content, metaCache }) {\n  extract: function extract() {\n    return null;\n  }\n};\n\n\n\n// def extract_dek(self):\n//     # First, check to see if we have a matching meta tag that we can make\n//     # use of.\n//     dek = self.extract_from_meta('dek', constants.DEK_META_TAGS)\n//     if not dek:\n//         # Second, look through our CSS/XPath selectors. This may return\n//         # an HTML fragment.\n//         dek = self.extract_from_selectors('dek',\n//                                            constants.DEK_SELECTORS,\n//                                            text_only=False)\n//\n//     if dek:\n//         # Make sure our dek isn't in the first few thousand characters\n//         # of the content, otherwise it's just the start of the article\n//         # and not a true dek.\n//         content = self.extract_content()\n//         content_chunk = normalize_spaces(strip_tags(content[:2000]))\n//         dek_chunk = normalize_spaces(dek[:100]) # Already has no tags.\n//\n//         # 80% or greater similarity means the dek was very similar to some\n//         # of the starting content, so we skip it.\n//         if fuzz.partial_ratio(content_chunk, dek_chunk) < 80:\n//             return dek\n//\n//     return None\n\n// An ordered list of meta tag names that denote likely article leading images.\n// All attributes should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nvar LEAD_IMAGE_URL_META_TAGS = ['og:image', 'twitter:image', 'image_src'];\n\nvar LEAD_IMAGE_URL_SELECTORS = ['link[rel=image_src]'];\n\nvar POSITIVE_LEAD_IMAGE_URL_HINTS = ['upload', 'wp-content', 'large', 'photo', 'wp-image'];\nvar POSITIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(POSITIVE_LEAD_IMAGE_URL_HINTS.join('|'), 'i');\n\nvar NEGATIVE_LEAD_IMAGE_URL_HINTS = ['spacer', 'sprite', 'blank', 'throbber', 'gradient', 'tile', 'bg', 'background', 'icon', 'social', 'header', 'hdr', 'advert', 'spinner', 'loader', 'loading', 'default', 'rating', 'share', 'facebook', 'twitter', 'theme', 'promo', 'ads', 'wp-includes'];\nvar NEGATIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(NEGATIVE_LEAD_IMAGE_URL_HINTS.join('|'), 'i');\n\nvar GIF_RE = /\\.gif(\\?.*)?$/i;\nvar JPG_RE = /\\.jpe?g(\\?.*)?$/i;\n\nfunction getSig($node) {\n  return ($node.attr('class') || '') + ' ' + ($node.attr('id') || '');\n}\n\n// Scores image urls based on a variety of heuristics.\nfunction scoreImageUrl(url) {\n  url = url.trim();\n  var score = 0;\n\n  if (POSITIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score += 20;\n  }\n\n  if (NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score -= 20;\n  }\n\n  // TODO: We might want to consider removing this as\n  // gifs are much more common/popular than they once were\n  if (GIF_RE.test(url)) {\n    score -= 10;\n  }\n\n  if (JPG_RE.test(url)) {\n    score += 10;\n  }\n\n  // PNGs are neutral.\n\n  return score;\n}\n\n// Alt attribute usually means non-presentational image.\nfunction scoreAttr($img) {\n  if ($img.attr('alt')) {\n    return 5;\n  }\n\n  return 0;\n}\n\n// Look through our parent and grandparent for figure-like\n// container elements, give a bonus if we find them\nfunction scoreByParents($img) {\n  var score = 0;\n  var $figParent = $img.parents('figure').first();\n\n  if ($figParent.length === 1) {\n    score += 25;\n  }\n\n  var $parent = $img.parent();\n  var $gParent = void 0;\n  if ($parent.length === 1) {\n    $gParent = $parent.parent();\n  }\n\n  [$parent, $gParent].forEach(function ($node) {\n    if (PHOTO_HINTS_RE$1.test(getSig($node))) {\n      score += 15;\n    }\n  });\n\n  return score;\n}\n\n// Look at our immediate sibling and see if it looks like it's a\n// caption. Bonus if so.\nfunction scoreBySibling($img) {\n  var score = 0;\n  var $sibling = $img.next();\n  var sibling = $sibling.get(0);\n\n  if (sibling && sibling.tagName.toLowerCase() === 'figcaption') {\n    score += 25;\n  }\n\n  if (PHOTO_HINTS_RE$1.test(getSig($sibling))) {\n    score += 15;\n  }\n\n  return score;\n}\n\nfunction scoreByDimensions($img) {\n  var score = 0;\n\n  var width = parseFloat($img.attr('width'));\n  var height = parseFloat($img.attr('height'));\n  var src = $img.attr('src');\n\n  // Penalty for skinny images\n  if (width && width <= 50) {\n    score -= 50;\n  }\n\n  // Penalty for short images\n  if (height && height <= 50) {\n    score -= 50;\n  }\n\n  if (width && height && !src.includes('sprite')) {\n    var area = width * height;\n    if (area < 5000) {\n      // Smaller than 50 x 100\n      score -= 100;\n    } else {\n      score += Math.round(area / 1000);\n    }\n  }\n\n  return score;\n}\n\nfunction scoreByPosition($imgs, index) {\n  return $imgs.length / 2 - index;\n}\n\n// Given a resource, try to find the lead image URL from within\n// it. Like content and next page extraction, uses a scoring system\n// to determine what the most likely image may be. Short circuits\n// on really probable things like og:image meta tags.\n//\n// Potential signals to still take advantage of:\n//   * domain\n//   * weird aspect ratio\nvar GenericLeadImageUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        content = _ref.content,\n        metaCache = _ref.metaCache,\n        html = _ref.html;\n\n    var cleanUrl = void 0;\n    if (!$.browser && $('head').length === 0) {\n      $('*').first().prepend(html);\n    }\n\n    // Check to see if we have a matching meta tag that we can make use of.\n    // Moving this higher because common practice is now to use large\n    // images on things like Open Graph or Twitter cards.\n    // images usually have for things like Open Graph.\n    var imageUrl = extractFromMeta$$1($, LEAD_IMAGE_URL_META_TAGS, metaCache, false);\n\n    if (imageUrl) {\n      cleanUrl = clean$1(imageUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // Next, try to find the \"best\" image via the content.\n    // We'd rather not have to fetch each image and check dimensions,\n    // so try to do some analysis and determine them instead.\n    var $content = $(content);\n    var imgs = $('img', $content).toArray();\n    var imgScores = {};\n\n    imgs.forEach(function (img, index) {\n      var $img = $(img);\n      var src = $img.attr('src');\n\n      if (!src) return;\n\n      var score = scoreImageUrl(src);\n      score += scoreAttr($img);\n      score += scoreByParents($img);\n      score += scoreBySibling($img);\n      score += scoreByDimensions($img);\n      score += scoreByPosition(imgs, index);\n\n      imgScores[src] = score;\n    });\n\n    var _Reflect$ownKeys$redu = _Reflect$ownKeys(imgScores).reduce(function (acc, key) {\n      return imgScores[key] > acc[1] ? [key, imgScores[key]] : acc;\n    }, [null, 0]),\n        _Reflect$ownKeys$redu2 = _slicedToArray(_Reflect$ownKeys$redu, 2),\n        topUrl = _Reflect$ownKeys$redu2[0],\n        topScore = _Reflect$ownKeys$redu2[1];\n\n    if (topScore > 0) {\n      cleanUrl = clean$1(topUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // If nothing else worked, check to see if there are any really\n    // probable nodes in the doc, like <link rel=\"image_src\" />.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(LEAD_IMAGE_URL_SELECTORS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var selector = _step.value;\n\n        var $node = $(selector).first();\n        var src = $node.attr('src');\n        if (src) {\n          cleanUrl = clean$1(src);\n          if (cleanUrl) return cleanUrl;\n        }\n\n        var href = $node.attr('href');\n        if (href) {\n          cleanUrl = clean$1(href);\n          if (cleanUrl) return cleanUrl;\n        }\n\n        var value = $node.attr('value');\n        if (value) {\n          cleanUrl = clean$1(value);\n          if (cleanUrl) return cleanUrl;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\n\n\n// def extract(self):\n//     \"\"\"\n//     # First, try to find the \"best\" image via the content.\n//     # We'd rather not have to fetch each image and check dimensions,\n//     # so try to do some analysis and determine them instead.\n//     content = self.extractor.extract_content(return_type=\"node\")\n//     imgs = content.xpath('.//img')\n//     img_scores = defaultdict(int)\n//     logger.debug('Scoring %d images from content', len(imgs))\n//     for (i, img) in enumerate(imgs):\n//         img_score = 0\n//\n//         if not 'src' in img.attrib:\n//             logger.debug('No src attribute found')\n//             continue\n//\n//         try:\n//             parsed_img = urlparse(img.attrib['src'])\n//             img_path = parsed_img.path.lower()\n//         except ValueError:\n//             logger.debug('ValueError getting img path.')\n//             continue\n//         logger.debug('Image path is %s', img_path)\n//\n//         if constants.POSITIVE_LEAD_IMAGE_URL_HINTS_RE.match(img_path):\n//             logger.debug('Positive URL hints match. Adding 20.')\n//             img_score += 20\n//\n//         if constants.NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.match(img_path):\n//             logger.debug('Negative URL hints match. Subtracting 20.')\n//             img_score -= 20\n//\n//         # Gifs are more often structure than photos\n//         if img_path.endswith('gif'):\n//             logger.debug('gif found. Subtracting 10.')\n//             img_score -= 10\n//\n//         # JPGs are more often photographs\n//         if img_path.endswith('jpg'):\n//             logger.debug('jpg found. Adding 10.')\n//             img_score += 10\n//\n//         # PNGs are neutral.\n//\n//         # Alt attribute usually means non-presentational image.\n//         if 'alt' in img.attrib and len(img.attrib['alt']) > 5:\n//             logger.debug('alt attribute found. Adding 5.')\n//             img_score += 5\n//\n//         # Look through our parent and grandparent for figure-like\n//         # container elements, give a bonus if we find them\n//         parents = [img.getparent()]\n//         if parents[0] is not None and parents[0].getparent() is not None:\n//             parents.append(parents[0].getparent())\n//         for p in parents:\n//             if p.tag == 'figure':\n//                 logger.debug('Parent with <figure> tag found. Adding 25.')\n//                 img_score += 25\n//\n//             p_sig = ' '.join([p.get('id', ''), p.get('class', '')])\n//             if constants.PHOTO_HINTS_RE.search(p_sig):\n//                 logger.debug('Photo hints regex match. Adding 15.')\n//                 img_score += 15\n//\n//         # Look at our immediate sibling and see if it looks like it's a\n//         # caption. Bonus if so.\n//         sibling = img.getnext()\n//         if sibling is not None:\n//             if sibling.tag == 'figcaption':\n//                 img_score += 25\n//\n//             sib_sig = ' '.join([sibling.get('id', ''),\n//                                 sibling.get('class', '')]).lower()\n//             if 'caption' in sib_sig:\n//                 img_score += 15\n//\n//         # Pull out width/height if they were set.\n//         img_width = None\n//         img_height = None\n//         if 'width' in img.attrib:\n//             try:\n//                 img_width = float(img.get('width'))\n//             except ValueError:\n//                 pass\n//         if 'height' in img.attrib:\n//             try:\n//                 img_height = float(img.get('height'))\n//             except ValueError:\n//                 pass\n//\n//         # Penalty for skinny images\n//         if img_width and img_width <= 50:\n//             logger.debug('Skinny image found. Subtracting 50.')\n//             img_score -= 50\n//\n//         # Penalty for short images\n//         if img_height and img_height <= 50:\n//             # Wide, short images are more common than narrow, tall ones\n//             logger.debug('Short image found. Subtracting 25.')\n//             img_score -= 25\n//\n//         if img_width and img_height and not 'sprite' in img_path:\n//             area = img_width * img_height\n//\n//             if area < 5000: # Smaller than 50x100\n//                 logger.debug('Image with small area found. Subtracting 100.')\n//                 img_score -= 100\n//             else:\n//                 img_score += round(area/1000.0)\n//\n//         # If the image is higher on the page than other images,\n//         # it gets a bonus. Penalty if lower.\n//         logger.debug('Adding page placement bonus of %d.', len(imgs)/2 - i)\n//         img_score += len(imgs)/2 - i\n//\n//         # Use the raw src here because we munged img_path for case\n//         # insensitivity\n//         logger.debug('Final score is %d.', img_score)\n//         img_scores[img.attrib['src']] += img_score\n//\n//     top_score = 0\n//     top_url = None\n//     for (url, score) in img_scores.items():\n//         if score > top_score:\n//             top_url = url\n//             top_score = score\n//\n//     if top_score > 0:\n//         logger.debug('Using top score image from content. Score was %d', top_score)\n//         return top_url\n//\n//\n//     # If nothing else worked, check to see if there are any really\n//     # probable nodes in the doc, like <link rel=\"image_src\" />.\n//     logger.debug('Trying to find lead image in probable nodes')\n//     for selector in constants.LEAD_IMAGE_URL_SELECTORS:\n//         nodes = self.resource.extract_by_selector(selector)\n//         for node in nodes:\n//             clean_value = None\n//             if node.attrib.get('src'):\n//                 clean_value = self.clean(node.attrib['src'])\n//\n//             if not clean_value and node.attrib.get('href'):\n//                 clean_value = self.clean(node.attrib['href'])\n//\n//             if not clean_value and node.attrib.get('value'):\n//                 clean_value = self.clean(node.attrib['value'])\n//\n//             if clean_value:\n//                 logger.debug('Found lead image in probable nodes.')\n//                 logger.debug('Node was: %s', node)\n//                 return clean_value\n//\n//     return None\n\nfunction scoreSimilarity(score, articleUrl, href) {\n  // Do this last and only if we have a real candidate, because it's\n  // potentially expensive computationally. Compare the link to this\n  // URL using difflib to get the % similarity of these URLs. On a\n  // sliding scale, subtract points from this link based on\n  // similarity.\n  if (score > 0) {\n    var similarity = new difflib.SequenceMatcher(null, articleUrl, href).ratio();\n    // Subtract .1 from diff_percent when calculating modifier,\n    // which means that if it's less than 10% different, we give a\n    // bonus instead. Ex:\n    //  3% different = +17.5 points\n    // 10% different = 0 points\n    // 20% different = -25 points\n    var diffPercent = 1.0 - similarity;\n    var diffModifier = -(250 * (diffPercent - 0.2));\n    return score + diffModifier;\n  }\n\n  return 0;\n}\n\nfunction scoreLinkText(linkText, pageNum) {\n  // If the link text can be parsed as a number, give it a minor\n  // bonus, with a slight bias towards lower numbered pages. This is\n  // so that pages that might not have 'next' in their text can still\n  // get scored, and sorted properly by score.\n  var score = 0;\n\n  if (IS_DIGIT_RE.test(linkText.trim())) {\n    var linkTextAsNum = parseInt(linkText, 10);\n    // If it's the first page, we already got it on the first call.\n    // Give it a negative score. Otherwise, up to page 10, give a\n    // small bonus.\n    if (linkTextAsNum < 2) {\n      score = -30;\n    } else {\n      score = Math.max(0, 10 - linkTextAsNum);\n    }\n\n    // If it appears that the current page number is greater than\n    // this links page number, it's a very bad sign. Give it a big\n    // penalty.\n    if (pageNum && pageNum >= linkTextAsNum) {\n      score -= 50;\n    }\n  }\n\n  return score;\n}\n\nfunction scorePageInLink(pageNum, isWp) {\n  // page in the link = bonus. Intentionally ignore wordpress because\n  // their ?p=123 link style gets caught by this even though it means\n  // separate documents entirely.\n  if (pageNum && !isWp) {\n    return 50;\n  }\n\n  return 0;\n}\n\nvar DIGIT_RE$2 = /\\d/;\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nvar EXTRANEOUS_LINK_HINTS$1 = ['print', 'archive', 'comment', 'discuss', 'e-mail', 'email', 'share', 'reply', 'all', 'login', 'sign', 'single', 'adx', 'entry-unrelated'];\nvar EXTRANEOUS_LINK_HINTS_RE$1 = new RegExp(EXTRANEOUS_LINK_HINTS$1.join('|'), 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\nvar NEXT_LINK_TEXT_RE$1 = new RegExp('(next|weiter|continue|>([^|]|$)|»([^|]|$))', 'i');\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nvar CAP_LINK_TEXT_RE$1 = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nvar PREV_LINK_TEXT_RE$1 = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\n\nfunction scoreExtraneousLinks(href) {\n  // If the URL itself contains extraneous values, give a penalty.\n  if (EXTRANEOUS_LINK_HINTS_RE$1.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n\nfunction makeSig$1($link) {\n  return ($link.attr('class') || '') + ' ' + ($link.attr('id') || '');\n}\n\nfunction scoreByParents$1($link) {\n  // If a parent node contains paging-like classname or id, give a\n  // bonus. Additionally, if a parent_node contains bad content\n  // (like 'sponsor'), give a penalty.\n  var $parent = $link.parent();\n  var positiveMatch = false;\n  var negativeMatch = false;\n  var score = 0;\n\n  _Array$from(range(0, 4)).forEach(function () {\n    if ($parent.length === 0) {\n      return;\n    }\n\n    var parentData = makeSig$1($parent, ' ');\n\n    // If we have 'page' or 'paging' in our data, that's a good\n    // sign. Add a bonus.\n    if (!positiveMatch && PAGE_RE.test(parentData)) {\n      positiveMatch = true;\n      score += 25;\n    }\n\n    // If we have 'comment' or something in our data, and\n    // we don't have something like 'content' as well, that's\n    // a bad sign. Give a penalty.\n    if (!negativeMatch && NEGATIVE_SCORE_RE.test(parentData) && EXTRANEOUS_LINK_HINTS_RE$1.test(parentData)) {\n      if (!POSITIVE_SCORE_RE.test(parentData)) {\n        negativeMatch = true;\n        score -= 25;\n      }\n    }\n\n    $parent = $parent.parent();\n  });\n\n  return score;\n}\n\nfunction scorePrevLink(linkData) {\n  // If the link has something like \"previous\", its definitely\n  // an old link, skip it.\n  if (PREV_LINK_TEXT_RE$1.test(linkData)) {\n    return -200;\n  }\n\n  return 0;\n}\n\nfunction shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls) {\n  // skip if we've already fetched this url\n  if (previousUrls.find(function (url) {\n    return href === url;\n  }) !== undefined) {\n    return false;\n  }\n\n  // If we've already parsed this URL, or the URL matches the base\n  // URL, or is empty, skip it.\n  if (!href || href === articleUrl || href === baseUrl) {\n    return false;\n  }\n\n  var hostname = parsedUrl.hostname;\n\n  var _URL$parse = URL.parse(href),\n      linkHost = _URL$parse.hostname;\n\n  // Domain mismatch.\n\n\n  if (linkHost !== hostname) {\n    return false;\n  }\n\n  // If href doesn't contain a digit after removing the base URL,\n  // it's certainly not the next page.\n  var fragment = href.replace(baseUrl, '');\n  if (!DIGIT_RE$2.test(fragment)) {\n    return false;\n  }\n\n  // This link has extraneous content (like \"comment\") in its link\n  // text, so we skip it.\n  if (EXTRANEOUS_LINK_HINTS_RE$1.test(linkText)) {\n    return false;\n  }\n\n  // Next page link text is never long, skip if it is too long.\n  if (linkText.length > 25) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction scoreBaseUrl(href, baseRegex) {\n  // If the baseUrl isn't part of this URL, penalize this\n  // link. It could still be the link, but the odds are lower.\n  // Example:\n  // http://www.actionscript.org/resources/articles/745/1/JavaScript-and-VBScript-Injection-in-ActionScript-3/Page1.html\n  if (!baseRegex.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n\nfunction scoreNextLinkText(linkData) {\n  // Things like \"next\", \">>\", etc.\n  if (NEXT_LINK_TEXT_RE$1.test(linkData)) {\n    return 50;\n  }\n\n  return 0;\n}\n\nfunction scoreCapLinks(linkData) {\n  // Cap links are links like \"last\", etc.\n  if (CAP_LINK_TEXT_RE$1.test(linkData)) {\n    // If we found a link like \"last\", but we've already seen that\n    // this link is also \"next\", it's fine. If it's not been\n    // previously marked as \"next\", then it's probably bad.\n    // Penalize.\n    if (NEXT_LINK_TEXT_RE$1.test(linkData)) {\n      return -65;\n    }\n  }\n\n  return 0;\n}\n\nfunction makeBaseRegex(baseUrl) {\n  return new RegExp('^' + baseUrl, 'i');\n}\n\nfunction makeSig($link, linkText) {\n  return (linkText || $link.text()) + ' ' + ($link.attr('class') || '') + ' ' + ($link.attr('id') || '');\n}\n\nfunction scoreLinks(_ref) {\n  var links = _ref.links,\n      articleUrl = _ref.articleUrl,\n      baseUrl = _ref.baseUrl,\n      parsedUrl = _ref.parsedUrl,\n      $ = _ref.$,\n      _ref$previousUrls = _ref.previousUrls,\n      previousUrls = _ref$previousUrls === undefined ? [] : _ref$previousUrls;\n\n  parsedUrl = parsedUrl || URL.parse(articleUrl);\n  var baseRegex = makeBaseRegex(baseUrl);\n  var isWp = isWordpress($);\n\n  // Loop through all links, looking for hints that they may be next-page\n  // links. Things like having \"page\" in their textContent, className or\n  // id, or being a child of a node with a page-y className or id.\n  //\n  // After we do that, assign each page a score, and pick the one that\n  // looks most like the next page link, as long as its score is strong\n  // enough to have decent confidence.\n  var scoredPages = links.reduce(function (possiblePages, link) {\n    // Remove any anchor data since we don't do a good job\n    // standardizing URLs (it's hard), we're going to do\n    // some checking with and without a trailing slash\n    var attrs = getAttrs(link);\n\n    // if href is undefined, return\n    if (!attrs.href) return possiblePages;\n\n    var href = removeAnchor(attrs.href);\n    var $link = $(link);\n    var linkText = $link.text();\n\n    if (!shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls)) {\n      return possiblePages;\n    }\n\n    // ## PASSED THE FIRST-PASS TESTS. Start scoring. ##\n    if (!possiblePages[href]) {\n      possiblePages[href] = {\n        score: 0,\n        linkText: linkText,\n        href: href\n      };\n    } else {\n      possiblePages[href].linkText = possiblePages[href].linkText + '|' + linkText;\n    }\n\n    var possiblePage = possiblePages[href];\n    var linkData = makeSig($link, linkText);\n    var pageNum = pageNumFromUrl(href);\n\n    var score = scoreBaseUrl(href, baseRegex);\n    score += scoreNextLinkText(linkData);\n    score += scoreCapLinks(linkData);\n    score += scorePrevLink(linkData);\n    score += scoreByParents$1($link);\n    score += scoreExtraneousLinks(href);\n    score += scorePageInLink(pageNum, isWp);\n    score += scoreLinkText(linkText, pageNum);\n    score += scoreSimilarity(score, articleUrl, href);\n\n    possiblePage.score = score;\n\n    return possiblePages;\n  }, {});\n\n  return _Reflect$ownKeys(scoredPages).length === 0 ? null : scoredPages;\n}\n\n// Looks for and returns next page url\n// for multi-page articles\nvar GenericNextPageUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        parsedUrl = _ref.parsedUrl,\n        _ref$previousUrls = _ref.previousUrls,\n        previousUrls = _ref$previousUrls === undefined ? [] : _ref$previousUrls;\n\n    parsedUrl = parsedUrl || URL.parse(url);\n\n    var articleUrl = removeAnchor(url);\n    var baseUrl = articleBaseUrl(url, parsedUrl);\n\n    var links = $('a[href]').toArray();\n\n    var scoredLinks = scoreLinks({\n      links: links,\n      articleUrl: articleUrl,\n      baseUrl: baseUrl,\n      parsedUrl: parsedUrl,\n      $: $,\n      previousUrls: previousUrls\n    });\n\n    // If no links were scored, return null\n    if (!scoredLinks) return null;\n\n    // now that we've scored all possible pages,\n    // find the biggest one.\n    var topPage = _Reflect$ownKeys(scoredLinks).reduce(function (acc, link) {\n      var scoredLink = scoredLinks[link];\n      return scoredLink.score > acc.score ? scoredLink : acc;\n    }, { score: -100 });\n\n    // If the score is less than 50, we're not confident enough to use it,\n    // so we fail.\n    if (topPage.score >= 50) {\n      return topPage.href;\n    }\n\n    return null;\n  }\n};\n\nvar CANONICAL_META_SELECTORS = ['og:url'];\n\nfunction parseDomain(url) {\n  var parsedUrl = URL.parse(url);\n  var hostname = parsedUrl.hostname;\n\n  return hostname;\n}\n\nfunction result(url) {\n  return {\n    url: url,\n    domain: parseDomain(url)\n  };\n}\n\nvar GenericUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        metaCache = _ref.metaCache;\n\n    var $canonical = $('link[rel=canonical]');\n    if ($canonical.length !== 0) {\n      var href = $canonical.attr('href');\n      if (href) {\n        return result(href);\n      }\n    }\n\n    var metaUrl = extractFromMeta$$1($, CANONICAL_META_SELECTORS, metaCache);\n    if (metaUrl) {\n      return result(metaUrl);\n    }\n\n    return result(url);\n  }\n};\n\nvar EXCERPT_META_SELECTORS = ['og:description', 'twitter:description'];\n\nfunction clean$2(content, $) {\n  var maxLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n\n  content = content.replace(/[\\s\\n]+/g, ' ').trim();\n  return ellipsize(content, maxLength, { ellipse: '&hellip;' });\n}\n\nvar GenericExcerptExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        content = _ref.content,\n        metaCache = _ref.metaCache;\n\n    var excerpt = extractFromMeta$$1($, EXCERPT_META_SELECTORS, metaCache);\n    if (excerpt) {\n      return clean$2(stripTags(excerpt, $));\n    }\n    // Fall back to excerpting from the extracted content\n    var maxLength = 200;\n    var shortContent = content.slice(0, maxLength * 5);\n    return clean$2($(shortContent).text(), $, maxLength);\n  }\n};\n\nvar GenericWordCountExtractor = {\n  extract: function extract(_ref) {\n    var content = _ref.content;\n\n    var $ = cheerio.load(content);\n    var $content = $('div').first();\n\n    var text = normalizeSpaces($content.text());\n    return text.split(/\\s/).length;\n  }\n};\n\nvar GenericExtractor = {\n  // This extractor is the default for all domains\n  domain: '*',\n  title: GenericTitleExtractor.extract,\n  date_published: GenericDatePublishedExtractor.extract,\n  author: GenericAuthorExtractor.extract,\n  content: GenericContentExtractor.extract.bind(GenericContentExtractor),\n  lead_image_url: GenericLeadImageUrlExtractor.extract,\n  dek: GenericDekExtractor.extract,\n  next_page_url: GenericNextPageUrlExtractor.extract,\n  url_and_domain: GenericUrlExtractor.extract,\n  excerpt: GenericExcerptExtractor.extract,\n  word_count: GenericWordCountExtractor.extract,\n  direction: function direction(_ref) {\n    var title = _ref.title;\n    return stringDirection.getDirection(title);\n  },\n\n  extract: function extract(options) {\n    var html = options.html,\n        $ = options.$;\n\n\n    if (html && !$) {\n      var loaded = cheerio.load(html);\n      options.$ = loaded;\n    }\n\n    var title = this.title(options);\n    var date_published = this.date_published(options);\n    var author = this.author(options);\n    var content = this.content(_extends({}, options, { title: title }));\n    var lead_image_url = this.lead_image_url(_extends({}, options, { content: content }));\n    var dek = this.dek(_extends({}, options, { content: content }));\n    var next_page_url = this.next_page_url(options);\n    var excerpt = this.excerpt(_extends({}, options, { content: content }));\n    var word_count = this.word_count(_extends({}, options, { content: content }));\n    var direction = this.direction({ title: title });\n\n    var _url_and_domain = this.url_and_domain(options),\n        url = _url_and_domain.url,\n        domain = _url_and_domain.domain;\n\n    return {\n      title: title,\n      author: author,\n      date_published: date_published || null,\n      dek: dek,\n      lead_image_url: lead_image_url,\n      content: content,\n      next_page_url: next_page_url,\n      url: url,\n      domain: domain,\n      excerpt: excerpt,\n      word_count: word_count,\n      direction: direction\n    };\n  }\n};\n\nfunction getExtractor(url, parsedUrl) {\n  parsedUrl = parsedUrl || URL.parse(url);\n  var _parsedUrl = parsedUrl,\n      hostname = _parsedUrl.hostname;\n\n  var baseDomain = hostname.split('.').slice(-2).join('.');\n\n  return Extractors[hostname] || Extractors[baseDomain] || GenericExtractor;\n}\n\n// Remove elements by an array of selectors\nfunction cleanBySelectors($content, $, _ref) {\n  var clean = _ref.clean;\n\n  if (!clean) return $content;\n\n  $(clean.join(','), $content).remove();\n\n  return $content;\n}\n\n// Transform matching elements\nfunction transformElements($content, $, _ref2) {\n  var transforms = _ref2.transforms;\n\n  if (!transforms) return $content;\n\n  _Reflect$ownKeys(transforms).forEach(function (key) {\n    var $matches = $(key, $content);\n    var value = transforms[key];\n\n    // If value is a string, convert directly\n    if (typeof value === 'string') {\n      $matches.each(function (index, node) {\n        convertNodeTo$$1($(node), $, transforms[key]);\n      });\n    } else if (typeof value === 'function') {\n      // If value is function, apply function to node\n      $matches.each(function (index, node) {\n        var result = value($(node), $);\n        // If function returns a string, convert node to that value\n        if (typeof result === 'string') {\n          convertNodeTo$$1($(node), $, result);\n        }\n      });\n    }\n  });\n\n  return $content;\n}\n\nfunction findMatchingSelector($, selectors, extractHtml) {\n  return selectors.find(function (selector) {\n    if (Array.isArray(selector)) {\n      if (extractHtml) {\n        return selector.reduce(function (acc, s) {\n          return acc && $(s).length > 0;\n        }, true);\n      }\n\n      var _selector = _slicedToArray(selector, 2),\n          s = _selector[0],\n          attr = _selector[1];\n\n      return $(s).length === 1 && $(s).attr(attr) && $(s).attr(attr).trim() !== '';\n    }\n\n    return $(selector).length === 1 && $(selector).text().trim() !== '';\n  });\n}\n\nfunction select(opts) {\n  var $ = opts.$,\n      type = opts.type,\n      extractionOpts = opts.extractionOpts,\n      _opts$extractHtml = opts.extractHtml,\n      extractHtml = _opts$extractHtml === undefined ? false : _opts$extractHtml;\n  // Skip if there's not extraction for this type\n\n  if (!extractionOpts) return null;\n\n  // If a string is hardcoded for a type (e.g., Wikipedia\n  // contributors), return the string\n  if (typeof extractionOpts === 'string') return extractionOpts;\n\n  var selectors = extractionOpts.selectors,\n      _extractionOpts$defau = extractionOpts.defaultCleaner,\n      defaultCleaner = _extractionOpts$defau === undefined ? true : _extractionOpts$defau;\n\n\n  var matchingSelector = findMatchingSelector($, selectors, extractHtml);\n\n  if (!matchingSelector) return null;\n\n  // Declaring result; will contain either\n  // text or html, which will be cleaned\n  // by the appropriate cleaner type\n\n  // If the selector type requests html as its return type\n  // transform and clean the element with provided selectors\n  var $content = void 0;\n  if (extractHtml) {\n    // If matching selector is an array, we're considering this a\n    // multi-match selection, which allows the parser to choose several\n    // selectors to include in the result. Note that all selectors in the\n    // array must match in order for this selector to trigger\n    if (Array.isArray(matchingSelector)) {\n      (function () {\n        $content = $(matchingSelector.join(','));\n        var $wrapper = $('<div></div>');\n        $content.each(function (index, element) {\n          $wrapper.append(element);\n        });\n\n        $content = $wrapper;\n      })();\n    } else {\n      $content = $(matchingSelector);\n    }\n\n    // Wrap in div so transformation can take place on root element\n    $content.wrap($('<div></div>'));\n    $content = $content.parent();\n\n    $content = transformElements($content, $, extractionOpts);\n    $content = cleanBySelectors($content, $, extractionOpts);\n\n    $content = Cleaners[type]($content, _extends({}, opts, { defaultCleaner: defaultCleaner }));\n\n    return $.html($content);\n  }\n\n  var result = void 0;\n\n  // if selector is an array (e.g., ['img', 'src']),\n  // extract the attr\n  if (Array.isArray(matchingSelector)) {\n    var _matchingSelector = _slicedToArray(matchingSelector, 2),\n        selector = _matchingSelector[0],\n        attr = _matchingSelector[1];\n\n    result = $(selector).attr(attr).trim();\n  } else {\n    result = $(matchingSelector).text().trim();\n  }\n\n  // Allow custom extractor to skip default cleaner\n  // for this type; defaults to true\n  if (defaultCleaner) {\n    return Cleaners[type](result, _extends({}, opts, extractionOpts));\n  }\n\n  return result;\n}\n\nfunction extractResult(opts) {\n  var type = opts.type,\n      extractor = opts.extractor,\n      _opts$fallback = opts.fallback,\n      fallback = _opts$fallback === undefined ? true : _opts$fallback;\n\n\n  var result = select(_extends({}, opts, { extractionOpts: extractor[type] }));\n\n  // If custom parser succeeds, return the result\n  if (result) {\n    return result;\n  }\n\n  // If nothing matches the selector, and fallback is enabled,\n  // run the Generic extraction\n  if (fallback) return GenericExtractor[type](opts);\n\n  return null;\n}\n\nvar RootExtractor = {\n  extract: function extract() {\n    var extractor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : GenericExtractor;\n    var opts = arguments[1];\n    var _opts = opts,\n        contentOnly = _opts.contentOnly,\n        extractedTitle = _opts.extractedTitle;\n    // This is the generic extractor. Run its extract method\n\n    if (extractor.domain === '*') return extractor.extract(opts);\n\n    opts = _extends({}, opts, {\n      extractor: extractor\n    });\n\n    if (contentOnly) {\n      var _content = extractResult(_extends({}, opts, { type: 'content', extractHtml: true, title: extractedTitle\n      }));\n      return {\n        content: _content\n      };\n    }\n    var title = extractResult(_extends({}, opts, { type: 'title' }));\n    var date_published = extractResult(_extends({}, opts, { type: 'date_published' }));\n    var author = extractResult(_extends({}, opts, { type: 'author' }));\n    var next_page_url = extractResult(_extends({}, opts, { type: 'next_page_url' }));\n    var content = extractResult(_extends({}, opts, { type: 'content', extractHtml: true, title: title\n    }));\n    var lead_image_url = extractResult(_extends({}, opts, { type: 'lead_image_url', content: content }));\n    var excerpt = extractResult(_extends({}, opts, { type: 'excerpt', content: content }));\n    var dek = extractResult(_extends({}, opts, { type: 'dek', content: content, excerpt: excerpt }));\n    var word_count = extractResult(_extends({}, opts, { type: 'word_count', content: content }));\n    var direction = extractResult(_extends({}, opts, { type: 'direction', title: title }));\n\n    var _ref3 = extractResult(_extends({}, opts, { type: 'url_and_domain' })) || { url: null, domain: null },\n        url = _ref3.url,\n        domain = _ref3.domain;\n\n    return {\n      title: title,\n      content: content,\n      author: author,\n      date_published: date_published,\n      lead_image_url: lead_image_url,\n      dek: dek,\n      next_page_url: next_page_url,\n      url: url,\n      domain: domain,\n      excerpt: excerpt,\n      word_count: word_count,\n      direction: direction\n    };\n  }\n};\n\nvar collectAllPages = (function () {\n  var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref2) {\n    var next_page_url = _ref2.next_page_url,\n        html = _ref2.html,\n        $ = _ref2.$,\n        metaCache = _ref2.metaCache,\n        result = _ref2.result,\n        Extractor = _ref2.Extractor,\n        title = _ref2.title,\n        url = _ref2.url;\n    var pages, previousUrls, extractorOpts, nextPageResult, word_count;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // At this point, we've fetched just the first page\n            pages = 1;\n            previousUrls = [removeAnchor(url)];\n\n            // If we've gone over 26 pages, something has\n            // likely gone wrong.\n\n          case 2:\n            if (!(next_page_url && pages < 26)) {\n              _context.next = 15;\n              break;\n            }\n\n            pages += 1;\n            _context.next = 6;\n            return Resource.create(next_page_url);\n\n          case 6:\n            $ = _context.sent;\n\n            html = $.html();\n\n            extractorOpts = {\n              url: next_page_url,\n              html: html,\n              $: $,\n              metaCache: metaCache,\n              contentOnly: true,\n              extractedTitle: title,\n              previousUrls: previousUrls\n            };\n            nextPageResult = RootExtractor.extract(Extractor, extractorOpts);\n\n\n            previousUrls.push(next_page_url);\n            result = _extends({}, result, {\n              content: result.content + '<hr><h4>Page ' + pages + '</h4>' + nextPageResult.content\n            });\n\n            next_page_url = nextPageResult.next_page_url;\n            _context.next = 2;\n            break;\n\n          case 15:\n            word_count = GenericExtractor.word_count({ content: '<div>' + result.content + '</div>' });\n            return _context.abrupt('return', _extends({}, result, {\n              total_pages: pages,\n              pages_rendered: pages,\n              word_count: word_count\n            }));\n\n          case 17:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  function collectAllPages(_x) {\n    return _ref.apply(this, arguments);\n  }\n\n  return collectAllPages;\n})();\n\nvar Mercury = {\n  parse: function parse(url, html) {\n    var _this = this;\n\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n      var _opts$fetchAllPages, fetchAllPages, _opts$fallback, fallback, parsedUrl, Extractor, $, metaCache, result, _result, title, next_page_url;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _opts$fetchAllPages = opts.fetchAllPages, fetchAllPages = _opts$fetchAllPages === undefined ? true : _opts$fetchAllPages, _opts$fallback = opts.fallback, fallback = _opts$fallback === undefined ? true : _opts$fallback;\n\n              // if no url was passed and this is the browser version,\n              // set url to window.location.href and load the html\n              // from the current page\n\n              if (!url && cheerio.browser) {\n                url = window.location.href; // eslint-disable-line no-undef\n                html = html || cheerio.html();\n              }\n\n              parsedUrl = URL.parse(url);\n\n              if (validateUrl(parsedUrl)) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt('return', Errors.badUrl);\n\n            case 5:\n              Extractor = getExtractor(url, parsedUrl);\n              // console.log(`Using extractor for ${Extractor.domain}`);\n\n              _context.next = 8;\n              return Resource.create(url, html, parsedUrl);\n\n            case 8:\n              $ = _context.sent;\n\n              if (!$.failed) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt('return', $);\n\n            case 11:\n\n              // if html still has not been set (i.e., url passed to Mercury.parse),\n              // set html from the response of Resource.create\n              if (!html) {\n                html = $.html();\n              }\n\n              // Cached value of every meta name in our document.\n              // Used when extracting title/author/date_published/dek\n              metaCache = $('meta').map(function (_, node) {\n                return $(node).attr('name');\n              }).toArray();\n              result = RootExtractor.extract(Extractor, {\n                url: url,\n                html: html,\n                $: $,\n                metaCache: metaCache,\n                parsedUrl: parsedUrl,\n                fallback: fallback\n              });\n              _result = result, title = _result.title, next_page_url = _result.next_page_url;\n\n              // Fetch more pages if next_page_url found\n\n              if (!(fetchAllPages && next_page_url)) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 18;\n              return collectAllPages({\n                Extractor: Extractor,\n                next_page_url: next_page_url,\n                html: html,\n                $: $,\n                metaCache: metaCache,\n                result: result,\n                title: title,\n                url: url\n              });\n\n            case 18:\n              result = _context.sent;\n              _context.next = 22;\n              break;\n\n            case 21:\n              result = _extends({}, result, {\n                total_pages: 1,\n                rendered_pages: 1\n              });\n\n            case 22:\n\n              // if this parse is happening in the browser,\n              // clean up any trace from the page.\n              if (cheerio.browser) {\n                cheerio.cleanup();\n              }\n\n              return _context.abrupt('return', result);\n\n            case 24:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this);\n    }))();\n  },\n\n\n  browser: !!cheerio.browser,\n\n  // A convenience method for getting a resource\n  // to work with, e.g., for custom extractor generator\n  fetchResource: function fetchResource(url) {\n    var _this2 = this;\n\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Resource.create(url);\n\n            case 2:\n              return _context2.abrupt('return', _context2.sent);\n\n            case 3:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, _this2);\n    }))();\n  }\n};\n\nmodule.exports = Mercury;\n//# sourceMappingURL=mercury.js.map\n","export default function insertValues(strings, ...values) {\n  if (values.length) {\n    return strings.reduce((result, part, idx) => {\n      let value = values[idx];\n\n      if (value && typeof value.toString === 'function') {\n        value = value.toString();\n      } else {\n        value = '';\n      }\n\n      return result + part + value;\n    }, '');\n  }\n\n  return strings.join('');\n}\n","import insertValues from './insert-values';\n\nconst bodyPattern = /^\\n([\\s\\S]+)\\s{2}$/gm;\nconst trailingWhitespace = /\\s+$/;\n\nexport default function template(strings, ...values) {\n  const compiled = insertValues(strings, ...values);\n  let [body] = compiled.match(bodyPattern) || [];\n  let indentLevel = /^\\s{0,4}(.+)$/g;\n\n  if (!body) {\n    body = compiled;\n    indentLevel = /^\\s{0,2}(.+)$/g;\n  }\n\n  return body.split('\\n')\n    .slice(1)\n    .map((line) => {\n      line = line.replace(indentLevel, '$1');\n\n      if (trailingWhitespace.test(line)) {\n        line = line.replace(trailingWhitespace, '');\n      }\n\n      return line;\n    })\n    .join('\\n');\n}\n","import template from './index';\n\nexport default function (hostname, name) {\n  return template`\n    export const ${name} = {\n      domain: '${hostname}',\n\n      title: {\n        selectors: [\n          // enter title selectors\n        ],\n      },\n\n      author: {\n        selectors: [\n          // enter author selectors\n        ],\n      },\n\n      date_published: {\n        selectors: [\n          // enter selectors\n        ],\n      },\n\n      dek: {\n        selectors: [\n          // enter selectors\n        ],\n      },\n\n      lead_image_url: {\n        selectors: [\n          // enter selectors\n        ],\n      },\n\n      content: {\n        selectors: [\n          // enter content selectors\n        ],\n\n        // Is there anything in the content you selected that needs transformed\n        // before it's consumable content? E.g., unusual lazy loaded images\n        transforms: {\n        },\n\n        // Is there anything that is in the result that shouldn't be?\n        // The clean selectors will remove anything that matches from\n        // the result\n        clean: [\n\n        ]\n      },\n    }\n  `;\n}\n","import template from './index';\n\nconst IGNORE = [\n  'url',\n  'domain',\n  'content',\n  'word_count',\n  'next_page_url',\n  'excerpt',\n  'direction',\n  'total_pages',\n  'rendered_pages',\n];\n\nfunction testFor(key, value, dir, file, url) {\n  if (IGNORE.find(k => k === key)) return '';\n\n  return template`\n  it('returns the ${key}', async () => {\n            // To pass this test, fill out the ${key} selector\n            // in ${dir}/index.js.\n            const { ${key} } = await result\n\n            // Update these values with the expected values from\n            // the article.\n            assert.equal(${key}, ${value ? `\\`${value}\\`` : \"''\"})\n          });\n    `;\n}\n\nexport default function (file, url, dir, result, name) {\n  return template`\n    import assert from 'assert';\n    import fs from 'fs';\n    import URL from 'url';\n    import cheerio from 'cheerio';\n\n    import Mercury from 'mercury';\n    import getExtractor from 'extractors/get-extractor';\n    import { excerptContent } from 'utils/text';\n\n    describe('${name}', () => {\n      describe('initial test case', () => {\n        let result;\n        let url;\n        beforeAll(() => {\n          url =\n            '${url}';\n          const html =\n            fs.readFileSync('${file}');\n          result =\n            Mercury.parse(url, html, { fallback: false });\n        });\n\n        it('is selected properly', () => {\n          // This test should be passing by default.\n          // It sanity checks that the correct parser\n          // is being selected for URLs from this domain\n          const extractor = getExtractor(url);\n          assert.equal(extractor.domain, URL.parse(url).hostname)\n        })\n\n          ${Reflect.ownKeys(result).map(k => testFor(k, result[k], dir, file, url)).join('\\n\\n')}\n\n        it('returns the content', async () => {\n          // To pass this test, fill out the content selector\n          // in ${dir}/index.js.\n          // You may also want to make use of the clean and transform\n          // options.\n          const { content } = await result;\n\n          const $ = cheerio.load(content || '');\n\n          const first13 = excerptContent($('*').first().text(), 13)\n\n          // Update these values with the expected values from\n          // the article.\n          assert.equal(first13, 'Add the first 13 words of the article here');\n        });\n      });\n    });\n  `;\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-console */\nimport fs from 'fs';\nimport URL from 'url';\nimport inquirer from 'inquirer';\nimport ora from 'ora';\nimport { exec } from 'child_process';\n\nimport {\n  stripJunkTags,\n  makeLinksAbsolute,\n} from 'utils/dom';\nimport Mercury from '../dist/mercury';\nimport extractorTemplate from './templates/custom-extractor';\nimport extractorTestTemplate from './templates/custom-extractor-test';\n\nconst questions = [\n  {\n    type: 'input',\n    name: 'website',\n    message: 'Paste a url to an article you\\'d like to create or extend a parser for:',\n    validate(value) {\n      const { hostname } = URL.parse(value);\n      if (hostname) return true;\n\n      return false;\n    },\n  },\n];\nlet spinner;\n\nfunction confirm(fn, args, msg, newParser) {\n  spinner = ora({ text: msg });\n  spinner.start();\n  const result = fn(...args);\n\n  if (result && result.then) {\n    result.then(r => savePage(r, args, newParser));\n  } else {\n    spinner.succeed();\n  }\n\n  return result;\n}\n\nfunction confirmCreateDir(dir, msg) {\n  if (!fs.existsSync(dir)) {\n    confirm(fs.mkdirSync, [dir], msg);\n  }\n}\n\nfunction getDir(url) {\n  const { hostname } = URL.parse(url);\n  return `./src/extractors/custom/${hostname}`;\n}\n\nfunction scaffoldCustomParser(url) {\n  const dir = getDir(url);\n  const { hostname } = URL.parse(url);\n  let newParser = false;\n\n  if (!fs.existsSync(dir)) {\n    newParser = true;\n    confirmCreateDir(dir, `Creating ${hostname} directory`);\n    confirmCreateDir(`./fixtures/${hostname}`, 'Creating fixtures directory');\n  }\n\n  confirm(Mercury.fetchResource, [url], 'Fetching fixture', newParser);\n}\n\ninquirer.prompt(questions).then((answers) => {\n  scaffoldCustomParser(answers.website);\n});\n\nfunction generateScaffold(url, file, result) {\n  const { hostname } = URL.parse(url);\n  const extractor = extractorTemplate(hostname, extractorName(hostname));\n  const extractorTest =\n    extractorTestTemplate(\n      file, url, getDir(url), result, extractorName(hostname)\n    );\n\n  fs.writeFileSync(`${getDir(url)}/index.js`, extractor);\n  fs.writeFileSync(`${getDir(url)}/index.test.js`, extractorTest);\n  fs.appendFileSync(\n    './src/extractors/custom/index.js',\n    exportString(url),\n  );\n  exec(`npm run lint-fix-quiet -- ${getDir(url)}/*.js`);\n}\n\nfunction savePage($, [url], newParser) {\n  const { hostname } = URL.parse(url);\n\n  spinner.succeed();\n\n  const filename = new Date().getTime();\n  const file = `./fixtures/${hostname}/${filename}.html`;\n  // fix http(s) relative links:\n  makeLinksAbsolute($('*').first(), $, url);\n  $('[src], [href]').each((index, node) => {\n    const $node = $(node);\n    const link = $node.attr('src');\n    if (link && link.slice(0, 2) === '//') {\n      $node.attr('src', `http:${link}`);\n    }\n  });\n  const html = stripJunkTags($('*').first(), $, ['script']).html();\n\n  fs.writeFileSync(file, html);\n\n  Mercury.parse(url, html).then((result) => {\n    if (newParser) {\n      confirm(generateScaffold, [url, file, result], 'Generating parser and tests');\n      console.log(`Your custom site extractor has been set up. To get started building it, run\n      yarn watch:test -- ${hostname}\n        -- OR --\n      npm run watch:test -- ${hostname}`);\n    } else {\n      console.log(`\n  It looks like you already have a custom parser for this url.\n  The page you linked to has been added to ${file}. Copy and paste\n  the following code to use that page in your tests:\n  const html = fs.readFileSync('${file}');`);\n    }\n  });\n}\n\nfunction exportString(url) {\n  const { hostname } = URL.parse(url);\n  return `export * from './${hostname}';`;\n}\n\nfunction extractorName(hostname) {\n  const name = hostname\n    .split('.')\n    .map(w => `${w.charAt(0).toUpperCase()}${w.slice(1)}`)\n    .join('');\n  return `${name}Extractor`;\n}\n"],"names":["SPACER_RE","RegExp","KEEP_CLASS","KEEP_SELECTORS","STRIP_OUTPUT_TAGS","REMOVE_ATTRS","REMOVE_ATTR_SELECTORS","map","selector","REMOVE_ATTR_LIST","join","WHITELIST_ATTRS","WHITELIST_ATTRS_RE","REMOVE_EMPTY_TAGS","REMOVE_EMPTY_SELECTORS","tag","CLEAN_CONDITIONALLY_TAGS","HEADER_TAGS","HEADER_TAG_LIST","UNLIKELY_CANDIDATES_BLACKLIST","UNLIKELY_CANDIDATES_WHITELIST","DIV_TO_P_BLOCK_TAGS","IS_WP_SELECTOR","BLOCK_LEVEL_TAGS","BLOCK_LEVEL_TAGS_RE","candidatesBlacklist","CANDIDATES_BLACKLIST","candidatesWhitelist","CANDIDATES_WHITELIST","brsToPs","$","collapsing","each","index","element","$element","nextElement","next","get","tagName","toLowerCase","remove","paragraphize","node","br","$node","sibling","nextSibling","p","test","appendTo","replaceWith","convertDivs","div","$div","convertable","children","length","convertSpans","span","$span","parents","convertNodeTo","attrs","getAttrs","attribString","key","html","browser","text","contents","cleanForHeight","$img","height","parseInt","attr","width","removeAttr","removeSpacers","stripJunkTags","article","tags","not","removeClass","removeAllButWhitelist","$article","find","reduce","acc","NON_TOP_CANDIDATE_TAGS","NON_TOP_CANDIDATE_TAGS_RE","HNEWS_CONTENT_SELECTORS","PHOTO_HINTS","PHOTO_HINTS_RE","POSITIVE_SCORE_HINTS","POSITIVE_SCORE_RE","READABILITY_ASSET","NEGATIVE_SCORE_HINTS","NEGATIVE_SCORE_RE","DIGIT_RE","BR_TAGS_RE","BR_TAG_RE","UNLIKELY_RE","PARAGRAPH_SCORE_TAGS","CHILD_CONTENT_TAGS","BAD_TAGS","HTML_OR_BODY_RE","getWeight","classes","id","score","getScore","parseFloat","scoreCommas","match","idkRe","scoreLength","textLength","chunks","lengthBonus","Math","min","max","scoreParagraph","trim","slice","setScore","addScore","amount","getOrInitScore","e","addToParent","parent","weightNodes","scoreNode","addScoreTo","scorePs","$parent","rawScore","NORMALIZE_RE","normalizeSpaces","replace","PAGE_IN_HREF_RE","HAS_ALPHA_RE","IS_ALPHA_RE","IS_DIGIT_RE","ENCODING_RE","isGoodSegment","segment","firstSegmentHasLetters","goodSegment","SENTENCE_END_RE","hasSentenceEnd","mergeSiblings","$candidate","topScore","siblingScoreThreshold","wrappingDiv","$sibling","siblingScore","append","contentBonus","density","linkDensity","newScore","siblingContent","siblingContentLength","first","removeUnlessContent","weight","hasClass","content","pCount","inputCount","contentLength","imgCount","nodeIsList","previousNode","prev","scriptCount","absolutize","rootUrl","$content","_","url","absoluteUrl","URL","resolve","makeLinksAbsolute","forEach","totalTextLength","linkText","linkLength","isGoodNode","maxChildren","withinComment","stripTags","cleanText","toArray","commentParent","nodeClass","class","classAndId","includes","undefined","attribs","attributes","name","value","setAttr","val","setAttribute","setAttrs","removeAttribute","ex","_interopDefault","require$$22","require$$21","require$$20","require$$19","require$$18","require$$17","require$$16","require$$15","require$$14","require$$13","require$$12","require$$11","require$$10","require$$9","require$$8","require$$7","require$$6","require$$5","require$$4","require$$3","require$$2","require$$1","require$$0","range","_regeneratorRuntime","mark","arguments","wrap","_context","start","end","stop","_marked","_ref","hostname","badUrl","error","messages","regexList","re","matchRe","exec","matches","pageNum","split","parsed","parse","parsedUrl","protocol","host","path","reverse","rawSegment","_segment$split2","_slicedToArray","_segment$split","possibleSegment","fileExt","push","cleanedSegments","words","str","cheerio","BAD_CONTENT_TYPES","options","reject","request","err","response","body","getEncoding","headers","iconv","encodingExists","encoding","decode","statusMessage","statusCode","parseNon2xx","contentType","_response$headers","BAD_CONTENT_TYPES_RE","MAX_CONTENT_LENGTH","_asyncToGenerator","_ref3","encodeURI","href","_extends","REQUEST_HEADERS","timeout","FETCH_TIMEOUT","jar","gzip","followAllRedirects","sent","validateResponse","abrupt","t0","Errors","_callee","_x2","_x3","apply","from","to","convertMetaProp","convertNodeTo$$1","brsToPs$$1","_Reflect$ownKeys","img","_URL$parse","concat","_toConsumableArray","addClass","$hOnes","_defineProperty","$p","NON_TOP_CANDIDATE_TAGS$1","PHOTO_HINTS$1","POSITIVE_SCORE_HINTS$1","NEGATIVE_SCORE_HINTS$1","UNLIKELY_CANDIDATES_BLACKLIST$1","UNLIKELY_CANDIDATES_WHITELIST$1","POSITIVE_SCORE_RE$1","NEGATIVE_SCORE_RE$1","PHOTO_HINTS_RE$1","READABILITY_ASSET$1","getOrInitScore$$1","addScore$$1","scoreNode$$1","addToParent$$1","_$node$get","PARAGRAPH_SCORE_TAGS$1","CHILD_CONTENT_TAGS$1","BAD_TAGS$1","convertSpans$1","HNEWS_CONTENT_SELECTORS$1","parentSelector","_ref2","childSelector","NON_TOP_CANDIDATE_TAGS_RE$1","header","$header","prevAll","title","metaNames","cachedNames","filter","indexOf","_step","type","nodes","values","cleanTags$$1","metaValue","v","_getIterator","foundNames","_iteratorNormalCompletion","_iterator","done","_loop","_typeof","_ret","_didIteratorError","_iteratorError","return","withinComment$$1","selectors","textOnly","IS_LINK","IS_IMAGE","root","isComment","TAGS_TO_REMOVE","cleanComments","create","preparedResponse","validResponse","result","failed","_this","generateDoc","load","normalizeWhitespace","normalizeMetaTags","convertLazyLoadedImages","clean","extractor","domains","domain","supportedDomains","merge","transforms","noscript","author","date_published","h1","$children","dek","defaultCleaner","prepend","$tweetContainer","tweets","s","src","lead_image_url","next_page_url","excerpt","timezone","h2","has","youtubeId","JSON","data","sources","iframe","decodeURIComponent","ytRe","thumb","_thumb$match2","_thumb$match","clone","$text","BloggerExtractor","NYMagExtractor","WikipediaExtractor","TwitterExtractor","NYTimesExtractor","TheAtlanticExtractor","NewYorkerExtractor","WiredExtractor","MSNExtractor","YahooExtractor","BuzzfeedExtractor","WikiaExtractor","LittleThingsExtractor","PoliticoExtractor","DeadspinExtractor","BroadwayWorldExtractor","ApartmentTherapyExtractor","MediumExtractor","WwwTmzComExtractor","WwwWashingtonpostComExtractor","WwwHuffingtonpostComExtractor","NewrepublicComExtractor","MoneyCnnComExtractor","WwwThevergeComExtractor","WwwCnnComExtractor","WwwAolComExtractor","_Object$keys","CustomExtractors","mergeSupportedDomains","months","timestamp1","timestamp2","timestamp3","allMonths","CLEAN_AUTHOR_RE","leadImageUrl","validUrl","isWebUri","excerptContent","TEXT_LINK_RE","dekText","dateString","SPLIT_DATE_STRING","TIME_MERIDIAN_DOTS_RE","TIME_MERIDIAN_SPACE_RE","CLEAN_DATE_STRING_RE","TIME_WITH_OFFSET_RE","moment","tz","parseFormat","MS_DATE_STRING","SEC_DATE_STRING","toISOString","createDate","date","isValid","cleanDateString","_ref$cleanConditional","cleanConditionally","_ref$title","_ref$url","_ref$defaultCleaner","rewriteTopLevel$$1","cleanImages","markToKeep","cleanHOnes$$1","cleanHeaders","makeLinksAbsolute$$1","removeEmpty","cleanAttributes$$1","TITLE_SPLITTERS_RE","resolveSplitTitle","splitTitle","titleText","termCounts","_Reflect$ownKeys$redu2","_Reflect$ownKeys$redu","maxTerm","termCount","splitEnds","longestEnd","DOMAIN_ENDINGS_RE","wuzzy","levenshtein","startSlug","nakedDomain","startSlugRatio","endSlug","endSlugRatio","extractBreadcrumbTitle","newTitle","cleanDomainFromTitle","cleanAuthor","clean$1","cleanDek","cleanDatePublished","extractCleanNode","cleanTitle$$1","opts","stripUnlikelyCandidates","convertToParagraphs$$1","scoreContent$$1","findTopCandidate$$1","defaultOpts","extract","getContentNode","nodeIsSufficient","cleanAndReturnNode","k","extractBestNode","metaCache","extractFromMeta$$1","STRONG_TITLE_META_TAGS","extractFromSelectors$$1","STRONG_TITLE_SELECTORS","WEAK_TITLE_META_TAGS","WEAK_TITLE_SELECTORS","bylineRe","AUTHOR_META_TAGS","AUTHOR_MAX_LENGTH","AUTHOR_SELECTORS","BYLINE_SELECTORS_RE","_ref4","regex","abbrevMonthsStr","datePublished","DATE_PUBLISHED_META_TAGS","DATE_PUBLISHED_SELECTORS","extractFromUrl","DATE_PUBLISHED_URL_RES","POSITIVE_LEAD_IMAGE_URL_HINTS","NEGATIVE_LEAD_IMAGE_URL_HINTS","POSITIVE_LEAD_IMAGE_URL_HINTS_RE","NEGATIVE_LEAD_IMAGE_URL_HINTS_RE","GIF_RE","JPG_RE","$figParent","$gParent","getSig","area","round","$imgs","LEAD_IMAGE_URL_META_TAGS","imageUrl","cleanUrl","imgs","scoreImageUrl","scoreAttr","scoreByParents","scoreBySibling","scoreByDimensions","scoreByPosition","imgScores","topUrl","LEAD_IMAGE_URL_SELECTORS","articleUrl","SequenceMatcher","ratio","similarity","diffPercent","diffModifier","linkTextAsNum","isWp","EXTRANEOUS_LINK_HINTS$1","EXTRANEOUS_LINK_HINTS_RE$1","$link","_Array$from","makeSig$1","positiveMatch","PAGE_RE","parentData","negativeMatch","linkData","PREV_LINK_TEXT_RE$1","baseUrl","previousUrls","linkHost","DIGIT_RE$2","fragment","baseRegex","NEXT_LINK_TEXT_RE$1","CAP_LINK_TEXT_RE$1","links","_ref$previousUrls","makeBaseRegex","isWordpress","possiblePages","link","removeAnchor","shouldScore","makeSig","pageNumFromUrl","scoreBaseUrl","scoreNextLinkText","scoreCapLinks","scorePrevLink","scoreByParents$1","scoreExtraneousLinks","scorePageInLink","scoreLinkText","scoreSimilarity","possiblePage","scoredPages","articleBaseUrl","scoreLinks","scoredLinks","scoredLink","topPage","parseDomain","$canonical","CANONICAL_META_SELECTORS","metaUrl","maxLength","ellipse","EXCERPT_META_SELECTORS","shortContent","GenericTitleExtractor","GenericDatePublishedExtractor","GenericAuthorExtractor","GenericContentExtractor","bind","GenericLeadImageUrlExtractor","GenericDekExtractor","GenericNextPageUrlExtractor","url_and_domain","GenericUrlExtractor","GenericExcerptExtractor","word_count","GenericWordCountExtractor","direction","getDirection","loaded","_url_and_domain","_parsedUrl","Extractors","baseDomain","GenericExtractor","$matches","extractHtml","Array","isArray","_selector","extractionOpts","_opts$extractHtml","_extractionOpts$defau","findMatchingSelector","matchingSelector","$wrapper","transformElements","cleanBySelectors","Cleaners","_matchingSelector","_opts$fallback","fallback","select","contentOnly","_opts","extractedTitle","extractResult","_content","Extractor","extractorOpts","nextPageResult","pages","RootExtractor","total_pages","pages_rendered","_x","fetchAllPages","_result","_opts$fetchAllPages","window","location","validateUrl","getExtractor","rendered_pages","cleanup","fetchResource","_context2","_callee2","_this2","Mercury","insertValues","strings","part","idx","toString","bodyPattern","trailingWhitespace","template","compiled","indentLevel","line","IGNORE","testFor","dir","file","questions","spinner","confirm","fn","args","msg","newParser","ora","then","savePage","r","succeed","confirmCreateDir","fs","existsSync","mkdirSync","getDir","scaffoldCustomParser","inquirer","prompt","answers","website","generateScaffold","extractorTemplate","extractorName","extractorTest","extractorTestTemplate","writeFileSync","appendFileSync","exportString","filename","Date","getTime","log","w","charAt","toUpperCase"],"mappings":"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"}