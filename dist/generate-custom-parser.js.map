{"version":3,"file":null,"sources":["../src/utils/dom/constants.js","../src/utils/dom/brs-to-ps.js","../src/utils/dom/paragraphize.js","../src/utils/dom/convert-to-paragraphs.js","../src/utils/dom/convert-node-to.js","../src/utils/dom/strip-junk-tags.js","../src/extractors/generic/content/scoring/constants.js","../src/extractors/generic/content/scoring/get-weight.js","../src/extractors/generic/content/scoring/get-score.js","../src/extractors/generic/content/scoring/score-commas.js","../src/extractors/generic/content/scoring/score-length.js","../src/extractors/generic/content/scoring/score-paragraph.js","../src/extractors/generic/content/scoring/set-score.js","../src/extractors/generic/content/scoring/add-score.js","../src/extractors/generic/content/scoring/add-to-parent.js","../src/extractors/generic/content/scoring/get-or-init-score.js","../src/extractors/generic/content/scoring/score-node.js","../src/extractors/generic/content/scoring/score-content.js","../src/utils/text/normalize-spaces.js","../src/utils/text/extract-from-url.js","../src/utils/text/constants.js","../src/utils/text/article-base-url.js","../src/utils/text/has-sentence-end.js","../src/extractors/generic/content/scoring/merge-siblings.js","../src/extractors/generic/content/scoring/index.js","../src/utils/dom/clean-tags.js","../src/utils/dom/make-links-absolute.js","../src/utils/dom/link-density.js","../src/utils/dom/extract-from-selectors.js","../src/utils/dom/strip-tags.js","../src/utils/dom/within-comment.js","../src/utils/dom/node-is-sufficient.js","../src/utils/dom/get-attrs.js","../src/utils/dom/set-attr.js","../src/utils/dom/index.js","mercury.js","../scripts/templates/insert-values.js","../scripts/templates/index.js","../scripts/templates/custom-extractor.js","../scripts/templates/custom-extractor-test.js","../scripts/generate-custom-parser.js"],"sourcesContent":["// Spacer images to be removed\nexport const SPACER_RE = new RegExp('transparent|spacer|blank', 'i');\n\n// The class we will use to mark elements we want to keep\n// but would normally remove\nexport const KEEP_CLASS = 'mercury-parser-keep';\n\nexport const KEEP_SELECTORS = [\n  'iframe[src^=\"https://www.youtube.com\"]',\n  'iframe[src^=\"http://www.youtube.com\"]',\n  'iframe[src^=\"https://player.vimeo\"]',\n  'iframe[src^=\"http://player.vimeo\"]',\n];\n\n// A list of tags to strip from the output if we encounter them.\nexport const STRIP_OUTPUT_TAGS = [\n  'title',\n  'script',\n  'noscript',\n  'link',\n  'style',\n  'hr',\n  'embed',\n  'iframe',\n  'object',\n];\n\n// cleanAttributes\nexport const REMOVE_ATTRS = ['style', 'align'];\nexport const REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(selector => `[${selector}]`);\nexport const REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nexport const WHITELIST_ATTRS = [\n  'src',\n  'srcset',\n  'href',\n  'class',\n  'id',\n  'alt',\n  'xlink:href',\n  'width',\n  'height',\n];\n\nexport const WHITELIST_ATTRS_RE = new RegExp(`^(${WHITELIST_ATTRS.join('|')})$`, 'i');\n\n// removeEmpty\nexport const REMOVE_EMPTY_TAGS = ['p'];\nexport const REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(tag => `${tag}:empty`).join(',');\n\n// cleanTags\nexport const CLEAN_CONDITIONALLY_TAGS = ['ul', 'ol', 'table', 'div', 'button', 'form'].join(',');\n\n// cleanHeaders\nconst HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nexport const HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  // 'form', // This is too generic, has too many false positives\n  'header',\n  'hidden',\n  'loader',\n  'login',                     // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'outbrain',\n  'pager',\n  'pagination',\n  'predicta',                  // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'taboola',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE =\n  new RegExp(`^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`, 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = [\n  'figure',\n  'photo',\n  'image',\n  'caption',\n];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nexport const IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(EXTRANEOUS_LINK_HINTS.join('|'), 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\nexport const NEXT_LINK_TEXT_RE = /(next|weiter|continue|>([^|]|$)|»([^|]|$))/i;\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(`^(${BLOCK_LEVEL_TAGS.join('|')})$`, 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(`!(${candidatesWhitelist})|(${candidatesBlacklist})`, 'i');\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import { paragraphize } from './index';\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nexport default function brsToPs($) {\n  let collapsing = false;\n  $('br').each((index, element) => {\n    const $element = $(element);\n    const nextElement = $element.next().get(0);\n\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\n      collapsing = true;\n      $element.remove();\n    } else if (collapsing) {\n      collapsing = false;\n      // $(element).replaceWith('<p />')\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n","import { BLOCK_LEVEL_TAGS_RE } from './constants';\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nexport default function paragraphize(node, $, br = false) {\n  const $node = $(node);\n\n  if (br) {\n    let sibling = node.nextSibling;\n    const p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (sibling && !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))) {\n      const nextSibling = sibling.nextSibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n","import { brsToPs, convertNodeTo } from 'utils/dom';\n\nimport { DIV_TO_P_BLOCK_TAGS } from './constants';\n\nfunction convertDivs($) {\n  $('div').each((index, div) => {\n    const $div = $(div);\n    const convertable = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertable) {\n      convertNodeTo($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each((index, span) => {\n    const $span = $(span);\n    const convertable = $span.parents('p, div').length === 0;\n    if (convertable) {\n      convertNodeTo($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nexport default function convertToParagraphs($) {\n  $ = brsToPs($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function convertNodeTo($node, $, tag = 'p') {\n  const node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n  const attrs = getAttrs(node) || {};\n  // console.log(attrs)\n\n  const attribString = Reflect.ownKeys(attrs)\n                              .map(key => `${key}=${attrs[key]}`)\n                              .join(' ');\n  let html;\n\n  if ($.browser) {\n    // In the browser, the contents of noscript tags aren't rendered, therefore\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\n    // as expected. This test case handles that\n    html = node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\n  } else {\n    html = $node.contents();\n  }\n  $node.replaceWith(\n    `<${tag} ${attribString}>${html}</${tag}>`\n  );\n  return $;\n}\n","import {\n  STRIP_OUTPUT_TAGS,\n  KEEP_CLASS,\n} from './constants';\n\nexport default function stripJunkTags(article, $, tags = []) {\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  // Remove matching elements, but ignore\n  // any element with a class of mercury-parser-keep\n  $(tags.join(','), article).not(`.${KEEP_CLASS}`).remove();\n\n  // Remove the mercury-parser-keep class from result\n  $(`.${KEEP_CLASS}`, article).removeClass(KEEP_CLASS);\n\n  return $;\n}\n","// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  'form',\n  'header',\n  'hidden',\n  'loader',\n  'login',                     // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'pager',\n  'pagination',\n  'predicta',                  // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE =\n  new RegExp(`^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`, 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = [\n  'figure',\n  'photo',\n  'image',\n  'caption',\n];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(`^(${BLOCK_LEVEL_TAGS.join('|')})$`, 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(`!(${candidatesWhitelist})|(${candidatesBlacklist})`, 'i');\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PHOTO_HINTS_RE,\n  READABILITY_ASSET,\n} from './constants';\n\n// Get the score of a node based on its className and id.\nexport default function getWeight(node) {\n  const classes = node.attr('class');\n  const id = node.attr('id');\n  let score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n","// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nexport default function getScore($node) {\n  return parseFloat($node.attr('score')) || null;\n}\n","// return 1 for every comma in text\nexport default function scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n","const idkRe = new RegExp('^(p|pre)$', 'i');\n\nexport default function scoreLength(textLength, tagName = 'p') {\n  const chunks = textLength / 50;\n\n  if (chunks > 0) {\n    let lengthBonus;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n","import {\n  scoreCommas,\n  scoreLength,\n} from './index';\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nexport default function scoreParagraph(node) {\n  let score = 1;\n  const text = node.text().trim();\n  const textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n","export default function setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n","import {\n  getOrInitScore,\n  setScore,\n} from './index';\n\nexport default function addScore($node, $, amount) {\n  try {\n    const score = getOrInitScore($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n","import { addScore } from './index';\n\n// Adds 1/4 of a child's score to its parent\nexport default function addToParent(node, $, score) {\n  const parent = node.parent();\n  if (parent) {\n    addScore(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n","import {\n  getScore,\n  scoreNode,\n  getWeight,\n  addToParent,\n} from './index';\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nexport default function getOrInitScore($node, $, weightNodes = true) {\n  let score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent($node, $, score);\n\n  return score;\n}\n","import { scoreParagraph } from './index';\nimport {\n  PARAGRAPH_SCORE_TAGS,\n  CHILD_CONTENT_TAGS,\n  BAD_TAGS,\n} from './constants';\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nexport default function scoreNode($node) {\n  const { tagName } = $node.get(0);\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n  if (PARAGRAPH_SCORE_TAGS.test(tagName)) {\n    return scoreParagraph($node);\n  } else if (tagName.toLowerCase() === 'div') {\n    return 5;\n  } else if (CHILD_CONTENT_TAGS.test(tagName)) {\n    return 3;\n  } else if (BAD_TAGS.test(tagName)) {\n    return -3;\n  } else if (tagName.toLowerCase() === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n","import { convertNodeTo } from 'utils/dom';\n\nimport { HNEWS_CONTENT_SELECTORS } from './constants';\nimport {\n  scoreNode,\n  setScore,\n  getOrInitScore,\n  addScore,\n} from './index';\n\nfunction convertSpans($node, $) {\n  if ($node.get(0)) {\n    const { tagName } = $node.get(0);\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans($node, $);\n    addScore($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre').not('[score]').each((index, node) => {\n    // The raw score for this paragraph, before we add any parent/child\n    // scores.\n    let $node = $(node);\n    $node = setScore($node, $, getOrInitScore($node, $, weightNodes));\n\n    const $parent = $node.parent();\n    const rawScore = scoreNode($node);\n\n    addScoreTo($parent, $, rawScore, weightNodes);\n    if ($parent) {\n      // Add half of the individual content score to the\n      // grandparent\n      addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n    }\n  });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nexport default function scoreContent($, weightNodes = true) {\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS.forEach(([parentSelector, childSelector]) => {\n    $(`${parentSelector} ${childSelector}`).each((index, node) => {\n      addScore($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n","const NORMALIZE_RE = /\\s{2,}/g;\n\nexport default function normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n","// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nexport default function extractFromUrl(url, regexList) {\n  const matchRe = regexList.find(re => re.test(url));\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n","// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nexport const PAGE_IN_HREF_RE = new RegExp('(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})', 'i');\n\nexport const HAS_ALPHA_RE = /[a-z]/i;\n\nexport const IS_ALPHA_RE = /^[a-z]+$/i;\nexport const IS_DIGIT_RE = /^[0-9]+$/i;\n\nexport const ENCODING_RE = /charset=([\\w-]+)\\b/;\n","import URL from 'url';\n\nimport {\n  HAS_ALPHA_RE,\n  IS_ALPHA_RE,\n  IS_DIGIT_RE,\n  PAGE_IN_HREF_RE,\n} from './constants';\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  let goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nexport default function articleBaseUrl(url, parsed) {\n  const parsedUrl = parsed || URL.parse(url);\n  const { protocol, host, path } = parsedUrl;\n\n  let firstSegmentHasLetters = false;\n  const cleanedSegments = path.split('/')\n  .reverse()\n  .reduce((acc, rawSegment, index) => {\n    let segment = rawSegment;\n\n    // Split off and save anything that looks like a file type.\n    if (segment.includes('.')) {\n      const [possibleSegment, fileExt] = segment.split('.');\n      if (IS_ALPHA_RE.test(fileExt)) {\n        segment = possibleSegment;\n      }\n    }\n\n    // If our first or second segment has anything looking like a page\n    // number, remove it.\n    if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n      segment = segment.replace(PAGE_IN_HREF_RE, '');\n    }\n\n    // If we're on the first segment, check to see if we have any\n    // characters in it. The first segment is actually the last bit of\n    // the URL, and this will be helpful to determine if we're on a URL\n    // segment that looks like \"/2/\" for example.\n    if (index === 0) {\n      firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n    }\n\n    // If it's not marked for deletion, push it to cleaned_segments.\n    if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n      acc.push(segment);\n    }\n\n    return acc;\n  }, []);\n\n  return `${protocol}//${host}${cleanedSegments.reverse().join('/')}`;\n}\n","// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nconst SENTENCE_END_RE = new RegExp('.( |$)');\nexport default function hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n","import {\n  textLength,\n  linkDensity,\n} from 'utils/dom';\nimport { hasSentenceEnd } from 'utils/text';\n\nimport { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nexport default function mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  const siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  const wrappingDiv = $('<div></div>');\n\n  $candidate.parent().children().each((index, sibling) => {\n    const $sibling = $(sibling);\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE.test(sibling.tagName)) {\n      return null;\n    }\n\n    const siblingScore = getScore($sibling);\n    if (siblingScore) {\n      if ($sibling.get(0) === $candidate.get(0)) {\n        wrappingDiv.append($sibling);\n      } else {\n        let contentBonus = 0;\n        const density = linkDensity($sibling);\n\n        // If sibling has a very low link density,\n        // give it a small bonus\n        if (density < 0.05) {\n          contentBonus += 20;\n        }\n\n        // If sibling has a high link density,\n        // give it a penalty\n        if (density >= 0.5) {\n          contentBonus -= 20;\n        }\n\n        // If sibling node has the same class as\n        // candidate, give it a bonus\n        if ($sibling.attr('class') === $candidate.attr('class')) {\n          contentBonus += topScore * 0.2;\n        }\n\n        const newScore = siblingScore + contentBonus;\n\n        if (newScore >= siblingScoreThreshold) {\n          return wrappingDiv.append($sibling);\n        } else if (sibling.tagName === 'p') {\n          const siblingContent = $sibling.text();\n          const siblingContentLength = textLength(siblingContent);\n\n          if (siblingContentLength > 80 && density < 0.25) {\n            return wrappingDiv.append($sibling);\n          } else if (siblingContentLength <= 80 && density === 0 &&\n                    hasSentenceEnd(siblingContent)) {\n            return wrappingDiv.append($sibling);\n          }\n        }\n      }\n    }\n\n    return null;\n  });\n\n  if (wrappingDiv.children().length === 1 &&\n    wrappingDiv.children().first().get(0) === $candidate.get(0)) {\n    return $candidate;\n  }\n\n  return wrappingDiv;\n}\n","// Scoring\nexport { default as getWeight } from './get-weight';\nexport { default as getScore } from './get-score';\nexport { default as scoreCommas } from './score-commas';\nexport { default as scoreLength } from './score-length';\nexport { default as scoreParagraph } from './score-paragraph';\nexport { default as setScore } from './set-score';\nexport { default as addScore } from './add-score';\nexport { default as addToParent } from './add-to-parent';\nexport { default as getOrInitScore } from './get-or-init-score';\nexport { default as scoreNode } from './score-node';\nexport { default as scoreContent } from './score-content';\nexport { default as findTopCandidate } from './find-top-candidate';\n","import {\n  getScore,\n  setScore,\n  getOrInitScore,\n  scoreCommas,\n} from 'extractors/generic/content/scoring';\n\nimport { CLEAN_CONDITIONALLY_TAGS } from './constants';\nimport { normalizeSpaces } from '../text';\nimport { linkDensity } from './index';\n\nfunction removeUnlessContent($node, $, weight) {\n    // Explicitly save entry-content-asset tags, which are\n    // noted as valuable in the Publisher guidelines. For now\n    // this works everywhere. We may want to consider making\n    // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  const content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    const pCount = $('p', $node).length;\n    const inputCount = $('input', $node).length;\n\n      // Looks like a form, too many inputs.\n    if (inputCount > (pCount / 3)) {\n      $node.remove();\n      return;\n    }\n\n    const contentLength = content.length;\n    const imgCount = $('img', $node).length;\n\n      // Content is too short, and there are no images, so\n      // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    const density = linkDensity($node);\n\n      // Too high of link density, is probably a menu or\n      // something similar.\n      // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n      // Too high of a link density, despite the score being\n      // high.\n    if (weight >= 25 && density > 0.5) {\n        // Don't remove the node if it's a list and the\n        // previous sibling starts with a colon though. That\n        // means it's probably content.\n      const tagName = $node.get(0).tagName.toLowerCase();\n      const nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        const previousNode = $node.prev();\n        if (previousNode && normalizeSpaces(previousNode.text()).slice(-1) === ':') {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    const scriptCount = $('script', $node).length;\n\n      // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n      return;\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nexport default function cleanTags($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each((index, node) => {\n    const $node = $(node);\n    let weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n","import URL from 'url';\n\nimport {\n  getAttrs,\n  setAttr,\n} from 'utils/dom';\n\nfunction absolutize($, rootUrl, attr, $content) {\n  $(`[${attr}]`, $content).each((_, node) => {\n    const attrs = getAttrs(node);\n    const url = attrs[attr];\n\n    if (url) {\n      const absoluteUrl = URL.resolve(rootUrl, url);\n      setAttr(node, attr, absoluteUrl);\n    }\n  });\n}\n\nexport default function makeLinksAbsolute($content, $, url) {\n  ['href', 'src'].forEach(attr => absolutize($, url, attr, $content));\n\n  return $content;\n}\n","export function textLength(text) {\n  return text.trim()\n             .replace(/\\s+/g, ' ')\n             .length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nexport function linkDensity($node) {\n  const totalTextLength = textLength($node.text());\n\n  const linkText = $node.find('a').text();\n  const linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  } else if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n","import { withinComment } from 'utils/dom';\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nexport default function extractFromSelectors(\n  $,\n  selectors,\n  maxChildren = 1,\n  textOnly = true\n) {\n  for (const selector of selectors) {\n    const nodes = $(selector);\n\n    // If we didn't get exactly one of this selector, this may be\n    // a list of articles or comments. Skip it.\n    if (nodes.length === 1) {\n      const $node = $(nodes[0]);\n\n      if (isGoodNode($node, maxChildren)) {\n        let content;\n        if (textOnly) {\n          content = $node.text();\n        } else {\n          content = $node.html();\n        }\n\n        if (content) {\n          return content;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n","// strips all tags from a string of text\nexport default function stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  const cleanText = $(`<span>${text}</span>`).text();\n  return cleanText === '' ? text : cleanText;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function withinComment($node) {\n  const parents = $node.parents().toArray();\n  const commentParent = parents.find((parent) => {\n    const attrs = getAttrs(parent);\n    const { class: nodeClass, id } = attrs;\n    const classAndId = `${nodeClass} ${id}`;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n","// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nexport default function nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n","export default function getAttrs(node) {\n  const { attribs, attributes } = node;\n\n  if (!attribs && attributes) {\n    const attrs = Reflect.ownKeys(attributes).reduce((acc, index) => {\n      const attr = attributes[index];\n\n      if (!attr.name || !attr.value) return acc;\n\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n    return attrs;\n  }\n\n  return attribs;\n}\n","export default function setAttr(node, attr, val) {\n  if (node.attribs) {\n    node.attribs[attr] = val;\n  } else if (node.attributes) {\n    node.setAttribute(attr, val);\n  }\n\n  return node;\n}\n","// DOM manipulation\nexport { default as stripUnlikelyCandidates } from './strip-unlikely-candidates';\nexport { default as brsToPs } from './brs-to-ps';\nexport { default as paragraphize } from './paragraphize';\nexport { default as convertToParagraphs } from './convert-to-paragraphs';\nexport { default as convertNodeTo } from './convert-node-to';\nexport { default as cleanImages } from './clean-images';\nexport { default as markToKeep } from './mark-to-keep';\nexport { default as stripJunkTags } from './strip-junk-tags';\nexport { default as cleanHOnes } from './clean-h-ones';\nexport { default as cleanAttributes } from './clean-attributes';\nexport { default as removeEmpty } from './remove-empty';\nexport { default as cleanTags } from './clean-tags';\nexport { default as cleanHeaders } from './clean-headers';\nexport { default as rewriteTopLevel } from './rewrite-top-level';\nexport { default as makeLinksAbsolute } from './make-links-absolute';\nexport { textLength, linkDensity } from './link-density';\nexport { default as extractFromMeta } from './extract-from-meta';\nexport { default as extractFromSelectors } from './extract-from-selectors';\nexport { default as stripTags } from './strip-tags';\nexport { default as withinComment } from './within-comment';\nexport { default as nodeIsSufficient } from './node-is-sufficient';\nexport { default as isWordpress } from './is-wordpress';\nexport { default as getAttrs } from './get-attrs';\nexport { default as setAttr } from './set-attr';\nexport { default as setAttrs } from './set-attrs';\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar _regeneratorRuntime = _interopDefault(require('babel-runtime/regenerator'));\nvar _extends = _interopDefault(require('babel-runtime/helpers/extends'));\nvar _asyncToGenerator = _interopDefault(require('babel-runtime/helpers/asyncToGenerator'));\nvar URL = _interopDefault(require('url'));\nvar cheerio = _interopDefault(require('cheerio'));\nvar _Promise = _interopDefault(require('babel-runtime/core-js/promise'));\nvar request = _interopDefault(require('request'));\nvar iconv = _interopDefault(require('iconv-lite'));\nvar _slicedToArray = _interopDefault(require('babel-runtime/helpers/slicedToArray'));\nvar _Reflect$ownKeys = _interopDefault(require('babel-runtime/core-js/reflect/own-keys'));\nvar _toConsumableArray = _interopDefault(require('babel-runtime/helpers/toConsumableArray'));\nvar _defineProperty = _interopDefault(require('babel-runtime/helpers/defineProperty'));\nvar _typeof = _interopDefault(require('babel-runtime/helpers/typeof'));\nvar _getIterator = _interopDefault(require('babel-runtime/core-js/get-iterator'));\nvar _Object$keys = _interopDefault(require('babel-runtime/core-js/object/keys'));\nvar stringDirection = _interopDefault(require('string-direction'));\nvar validUrl = _interopDefault(require('valid-url'));\nvar moment = _interopDefault(require('moment-timezone'));\nvar parseFormat = _interopDefault(require('moment-parseformat'));\nvar wuzzy = _interopDefault(require('wuzzy'));\nvar difflib = _interopDefault(require('difflib'));\nvar _Array$from = _interopDefault(require('babel-runtime/core-js/array/from'));\nvar ellipsize = _interopDefault(require('ellipsize'));\n\nvar _marked = [range].map(_regeneratorRuntime.mark);\n\nfunction range() {\n  var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return _regeneratorRuntime.wrap(function range$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(start <= end)) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return start += 1;\n\n        case 3:\n          _context.next = 0;\n          break;\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked[0], this);\n}\n\n// extremely simple url validation as a first step\nfunction validateUrl(_ref) {\n  var hostname = _ref.hostname;\n\n  // If this isn't a valid url, return an error message\n  return !!hostname;\n}\n\nvar Errors = {\n  badUrl: {\n    error: true,\n    messages: 'The url parameter passed does not look like a valid URL. Please check your data and try again.'\n  }\n};\n\nvar NORMALIZE_RE = /\\s{2,}/g;\n\nfunction normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n\n// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nfunction extractFromUrl(url, regexList) {\n  var matchRe = regexList.find(function (re) {\n    return re.test(url);\n  });\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n\n// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nvar PAGE_IN_HREF_RE = new RegExp('(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})', 'i');\n\nvar HAS_ALPHA_RE = /[a-z]/i;\n\nvar IS_ALPHA_RE = /^[a-z]+$/i;\nvar IS_DIGIT_RE = /^[0-9]+$/i;\n\nvar ENCODING_RE = /charset=([\\w-]+)\\b/;\n\nfunction pageNumFromUrl(url) {\n  var matches = url.match(PAGE_IN_HREF_RE);\n  if (!matches) return null;\n\n  var pageNum = parseInt(matches[6], 10);\n\n  // Return pageNum < 100, otherwise\n  // return null\n  return pageNum < 100 ? pageNum : null;\n}\n\nfunction removeAnchor(url) {\n  return url.split('#')[0].replace(/\\/$/, '');\n}\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  var goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nfunction articleBaseUrl(url, parsed) {\n  var parsedUrl = parsed || URL.parse(url);\n  var protocol = parsedUrl.protocol,\n      host = parsedUrl.host,\n      path = parsedUrl.path;\n\n\n  var firstSegmentHasLetters = false;\n  var cleanedSegments = path.split('/').reverse().reduce(function (acc, rawSegment, index) {\n    var segment = rawSegment;\n\n    // Split off and save anything that looks like a file type.\n    if (segment.includes('.')) {\n      var _segment$split = segment.split('.'),\n          _segment$split2 = _slicedToArray(_segment$split, 2),\n          possibleSegment = _segment$split2[0],\n          fileExt = _segment$split2[1];\n\n      if (IS_ALPHA_RE.test(fileExt)) {\n        segment = possibleSegment;\n      }\n    }\n\n    // If our first or second segment has anything looking like a page\n    // number, remove it.\n    if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n      segment = segment.replace(PAGE_IN_HREF_RE, '');\n    }\n\n    // If we're on the first segment, check to see if we have any\n    // characters in it. The first segment is actually the last bit of\n    // the URL, and this will be helpful to determine if we're on a URL\n    // segment that looks like \"/2/\" for example.\n    if (index === 0) {\n      firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n    }\n\n    // If it's not marked for deletion, push it to cleaned_segments.\n    if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n      acc.push(segment);\n    }\n\n    return acc;\n  }, []);\n\n  return protocol + '//' + host + cleanedSegments.reverse().join('/');\n}\n\n// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nvar SENTENCE_END_RE = new RegExp('.( |$)');\nfunction hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n\nfunction excerptContent(content) {\n              var words = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n\n              return content.trim().split(/\\s+/).slice(0, words).join(' ');\n}\n\n// check a string for encoding; this is\n// used in our fetchResource function to\n// ensure correctly encoded responses\nfunction getEncoding(str) {\n  if (ENCODING_RE.test(str)) {\n    return ENCODING_RE.exec(str)[1];\n  }\n\n  return null;\n}\n\n// Browser does not like us setting user agent\nvar REQUEST_HEADERS = cheerio.browser ? {} : {\n  'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36'\n};\n\n// The number of milliseconds to attempt to fetch a resource before timing out.\nvar FETCH_TIMEOUT = 10000;\n\n// Content types that we do not extract content from\nvar BAD_CONTENT_TYPES = ['audio/mpeg', 'image/gif', 'image/jpeg', 'image/jpg'];\n\nvar BAD_CONTENT_TYPES_RE = new RegExp('^(' + BAD_CONTENT_TYPES.join('|') + ')$', 'i');\n\n// Use this setting as the maximum size an article can be\n// for us to attempt parsing. Defaults to 5 MB.\nvar MAX_CONTENT_LENGTH = 5242880;\n\n// Turn the global proxy on or off\n// Proxying is not currently enabled in Python source\n// so not implementing logic in port.\n\nfunction get(options) {\n  return new _Promise(function (resolve, reject) {\n    request(options, function (err, response, body) {\n      if (err) {\n        reject(err);\n      } else {\n        var encoding = getEncoding(response.headers['content-type']);\n\n        if (iconv.encodingExists(encoding)) {\n          body = iconv.decode(body, encoding);\n        }\n\n        if (typeof body !== 'string') {\n          var $ = cheerio.load(iconv.decode(body, 'utf8'));\n          var contentType = $('meta[http-equiv=content-type]').attr('content');\n          var properEncoding = getEncoding(contentType);\n          if (iconv.encodingExists(properEncoding)) {\n            body = iconv.decode(body, properEncoding);\n          }\n        }\n\n        resolve({ body: body, response: response });\n      }\n    });\n  });\n}\n\n// Evaluate a response to ensure it's something we should be keeping.\n// This does not validate in the sense of a response being 200 level or\n// not. Validation here means that we haven't found reason to bail from\n// further processing of this url.\n\nfunction validateResponse(response) {\n  var parseNon2xx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  // Check if we got a valid status code\n  // This isn't great, but I'm requiring a statusMessage to be set\n  // before short circuiting b/c nock doesn't set it in tests\n  // statusMessage only not set in nock response, in which case\n  // I check statusCode, which is currently only 200 for OK responses\n  // in tests\n  if (response.statusMessage && response.statusMessage !== 'OK' || response.statusCode !== 200) {\n    if (!response.statusCode) {\n      throw new Error('Unable to fetch content. Original exception was ' + response.error);\n    } else if (!parseNon2xx) {\n      throw new Error('Resource returned a response status code of ' + response.statusCode + ' and resource was instructed to reject non-2xx level status codes.');\n    }\n  }\n\n  var _response$headers = response.headers,\n      contentType = _response$headers['content-type'],\n      contentLength = _response$headers['content-length'];\n\n  // Check that the content is not in BAD_CONTENT_TYPES\n\n  if (BAD_CONTENT_TYPES_RE.test(contentType)) {\n    throw new Error('Content-type for this resource was ' + contentType + ' and is not allowed.');\n  }\n\n  // Check that the content length is below maximum\n  if (contentLength > MAX_CONTENT_LENGTH) {\n    throw new Error('Content for this resource was too large. Maximum content length is ' + MAX_CONTENT_LENGTH + '.');\n  }\n\n  return true;\n}\n\n// Grabs the last two pieces of the URL and joins them back together\n// This is to get the 'livejournal.com' from 'erotictrains.livejournal.com'\n\n\n// Set our response attribute to the result of fetching our URL.\n// TODO: This should gracefully handle timeouts and raise the\n//       proper exceptions on the many failure cases of HTTP.\n// TODO: Ensure we are not fetching something enormous. Always return\n//       unicode content for HTML, with charset conversion.\n\nvar fetchResource$1 = (function () {\n  var _ref2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, parsedUrl) {\n    var options, _ref3, response, body;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            parsedUrl = parsedUrl || URL.parse(encodeURI(url));\n\n            options = {\n              url: parsedUrl.href,\n              headers: _extends({}, REQUEST_HEADERS),\n              timeout: FETCH_TIMEOUT,\n              // Don't set encoding; fixes issues\n              // w/gzipped responses\n              encoding: null,\n              // Accept cookies\n              jar: true,\n              // Accept and decode gzip\n              gzip: true,\n              // Follow any redirect\n              followAllRedirects: true\n            };\n            _context.next = 4;\n            return get(options);\n\n          case 4:\n            _ref3 = _context.sent;\n            response = _ref3.response;\n            body = _ref3.body;\n            _context.prev = 7;\n\n            validateResponse(response);\n            return _context.abrupt('return', {\n              body: body,\n              response: response\n            });\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context['catch'](7);\n            return _context.abrupt('return', Errors.badUrl);\n\n          case 15:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[7, 12]]);\n  }));\n\n  function fetchResource(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  }\n\n  return fetchResource;\n})();\n\nfunction convertMetaProp($, from, to) {\n  $('meta[' + from + ']').each(function (_, node) {\n    var $node = $(node);\n\n    var value = $node.attr(from);\n    $node.attr(to, value);\n    $node.removeAttr(from);\n  });\n\n  return $;\n}\n\n// For ease of use in extracting from meta tags,\n// replace the \"content\" attribute on meta tags with the\n// \"value\" attribute.\n//\n// In addition, normalize 'property' attributes to 'name' for ease of\n// querying later. See, e.g., og or twitter meta tags.\n\nfunction normalizeMetaTags($) {\n  $ = convertMetaProp($, 'content', 'value');\n  $ = convertMetaProp($, 'property', 'name');\n  return $;\n}\n\n// Spacer images to be removed\nvar SPACER_RE = new RegExp('transparent|spacer|blank', 'i');\n\n// The class we will use to mark elements we want to keep\n// but would normally remove\nvar KEEP_CLASS = 'mercury-parser-keep';\n\nvar KEEP_SELECTORS = ['iframe[src^=\"https://www.youtube.com\"]', 'iframe[src^=\"http://www.youtube.com\"]', 'iframe[src^=\"https://player.vimeo\"]', 'iframe[src^=\"http://player.vimeo\"]'];\n\n// A list of tags to strip from the output if we encounter them.\nvar STRIP_OUTPUT_TAGS = ['title', 'script', 'noscript', 'link', 'style', 'hr', 'embed', 'iframe', 'object'];\n\n// cleanAttributes\nvar REMOVE_ATTRS = ['style', 'align'];\nvar REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(function (selector) {\n  return '[' + selector + ']';\n});\nvar REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nvar WHITELIST_ATTRS = ['src', 'srcset', 'href', 'class', 'id', 'alt', 'xlink:href', 'width', 'height'];\n\nvar WHITELIST_ATTRS_RE = new RegExp('^(' + WHITELIST_ATTRS.join('|') + ')$', 'i');\n\n// removeEmpty\nvar REMOVE_EMPTY_TAGS = ['p'];\nvar REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(function (tag) {\n  return tag + ':empty';\n}).join(',');\n\n// cleanTags\nvar CLEAN_CONDITIONALLY_TAGS = ['ul', 'ol', 'table', 'div', 'button', 'form'].join(',');\n\n// cleanHeaders\nvar HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nvar HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nvar UNLIKELY_CANDIDATES_BLACKLIST = ['ad-break', 'adbox', 'advert', 'addthis', 'agegate', 'aux', 'blogger-labels', 'combx', 'comment', 'conversation', 'disqus', 'entry-unrelated', 'extra', 'foot',\n// 'form', // This is too generic, has too many false positives\n'header', 'hidden', 'loader', 'login', // Note: This can hit 'blogindex'.\n'menu', 'meta', 'nav', 'outbrain', 'pager', 'pagination', 'predicta', // readwriteweb inline ad box\n'presence_control_external', // lifehacker.com container full of false positives\n'popup', 'printfriendly', 'related', 'remove', 'remark', 'rss', 'share', 'shoutbox', 'sidebar', 'sociable', 'sponsor', 'taboola', 'tools'];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nvar UNLIKELY_CANDIDATES_WHITELIST = ['and', 'article', 'body', 'blogindex', 'column', 'content', 'entry-content-asset', 'format', // misuse of form\n'hfeed', 'hentry', 'hatom', 'main', 'page', 'posts', 'shadow'];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nvar DIV_TO_P_BLOCK_TAGS = ['a', 'blockquote', 'dl', 'div', 'img', 'p', 'pre', 'table'].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\n\n\n\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\n\n\n\n\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar POSITIVE_SCORE_HINTS = ['article', 'articlecontent', 'instapaper_body', 'blog', 'body', 'content', 'entry-content-asset', 'entry', 'hentry', 'main', 'Normal', 'page', 'pagination', 'permalink', 'post', 'story', 'text', '[-_]copy', // usatoday\n'\\\\Bcopy'];\n\n// The above list, joined into a matching regular expression\nvar POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\n\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar NEGATIVE_SCORE_HINTS = ['adbox', 'advert', 'author', 'bio', 'bookmark', 'bottom', 'byline', 'clear', 'com-', 'combx', 'comment', 'comment\\\\B', 'contact', 'copy', 'credit', 'crumb', 'date', 'deck', 'excerpt', 'featured', // tnr.com has a featured_content which throws us off\n'foot', 'footer', 'footnote', 'graf', 'head', 'info', 'infotext', // newscientist.com copyright\n'instapaper_ignore', 'jump', 'linebreak', 'link', 'masthead', 'media', 'meta', 'modal', 'outbrain', // slate.com junk\n'promo', 'pr_', // autoblog - press release\n'related', 'respond', 'roundcontent', // lifehacker restricted content warning\n'scroll', 'secondary', 'share', 'shopping', 'shoutbox', 'side', 'sidebar', 'sponsor', 'stamp', 'sub', 'summary', 'tags', 'tools', 'widget'];\n// The above list, joined into a matching regular expression\nvar NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nvar IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\n\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\n\n\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nvar PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\n\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\n\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\n\n\n// Match 2 or more consecutive <br> tags\n\n\n// Match 1 BR tag.\n\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nvar BLOCK_LEVEL_TAGS = ['article', 'aside', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'col', 'colgroup', 'dd', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li', 'map', 'object', 'ol', 'output', 'p', 'pre', 'progress', 'section', 'table', 'tbody', 'textarea', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nvar BLOCK_LEVEL_TAGS_RE = new RegExp('^(' + BLOCK_LEVEL_TAGS.join('|') + ')$', 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nvar candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nvar CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nvar candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nvar CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nfunction stripUnlikelyCandidates($) {\n  //  Loop through the provided document and remove any non-link nodes\n  //  that are unlikely candidates for article content.\n  //\n  //  Links are ignored because there are very often links to content\n  //  that are identified as non-body-content, but may be inside\n  //  article-like content.\n  //\n  //  :param $: a cheerio object to strip nodes from\n  //  :return $: the cleaned cheerio object\n  $('*').not('a').each(function (index, node) {\n    var $node = $(node);\n    var classes = $node.attr('class');\n    var id = $node.attr('id');\n    if (!id && !classes) return;\n\n    var classAndId = (classes || '') + ' ' + (id || '');\n    if (CANDIDATES_WHITELIST.test(classAndId)) {\n      return;\n    } else if (CANDIDATES_BLACKLIST.test(classAndId)) {\n      $node.remove();\n    }\n  });\n\n  return $;\n}\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nfunction brsToPs$$1($) {\n  var collapsing = false;\n  $('br').each(function (index, element) {\n    var $element = $(element);\n    var nextElement = $element.next().get(0);\n\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\n      collapsing = true;\n      $element.remove();\n    } else if (collapsing) {\n      collapsing = false;\n      // $(element).replaceWith('<p />')\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nfunction paragraphize(node, $) {\n  var br = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var $node = $(node);\n\n  if (br) {\n    var sibling = node.nextSibling;\n    var p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (sibling && !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))) {\n      var nextSibling = sibling.nextSibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n\nfunction convertDivs($) {\n  $('div').each(function (index, div) {\n    var $div = $(div);\n    var convertable = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertable) {\n      convertNodeTo$$1($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each(function (index, span) {\n    var $span = $(span);\n    var convertable = $span.parents('p, div').length === 0;\n    if (convertable) {\n      convertNodeTo$$1($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nfunction convertToParagraphs$$1($) {\n  $ = brsToPs$$1($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n\nfunction convertNodeTo$$1($node, $) {\n  var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'p';\n\n  var node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n  var attrs = getAttrs(node) || {};\n  // console.log(attrs)\n\n  var attribString = _Reflect$ownKeys(attrs).map(function (key) {\n    return key + '=' + attrs[key];\n  }).join(' ');\n  var html = void 0;\n\n  if ($.browser) {\n    // In the browser, the contents of noscript tags aren't rendered, therefore\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\n    // as expected. This test case handles that\n    html = node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\n  } else {\n    html = $node.contents();\n  }\n  $node.replaceWith('<' + tag + ' ' + attribString + '>' + html + '</' + tag + '>');\n  return $;\n}\n\nfunction cleanForHeight($img, $) {\n  var height = parseInt($img.attr('height'), 10);\n  var width = parseInt($img.attr('width'), 10) || 20;\n\n  // Remove images that explicitly have very small heights or\n  // widths, because they are most likely shims or icons,\n  // which aren't very useful for reading.\n  if ((height || 20) < 10 || width < 10) {\n    $img.remove();\n  } else if (height) {\n    // Don't ever specify a height on images, so that we can\n    // scale with respect to width without screwing up the\n    // aspect ratio.\n    $img.removeAttr('height');\n  }\n\n  return $;\n}\n\n// Cleans out images where the source string matches transparent/spacer/etc\n// TODO This seems very aggressive - AP\nfunction removeSpacers($img, $) {\n  if (SPACER_RE.test($img.attr('src'))) {\n    $img.remove();\n  }\n\n  return $;\n}\n\nfunction cleanImages($article, $) {\n  $article.find('img').each(function (index, img) {\n    var $img = $(img);\n\n    cleanForHeight($img, $);\n    removeSpacers($img, $);\n  });\n\n  return $;\n}\n\nfunction markToKeep(article, $, url) {\n  var tags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n  if (tags.length === 0) {\n    tags = KEEP_SELECTORS;\n  }\n\n  if (url) {\n    var _URL$parse = URL.parse(url),\n        protocol = _URL$parse.protocol,\n        hostname = _URL$parse.hostname;\n\n    tags = [].concat(_toConsumableArray(tags), ['iframe[src^=\"' + protocol + '//' + hostname + '\"]']);\n  }\n\n  $(tags.join(','), article).addClass(KEEP_CLASS);\n\n  return $;\n}\n\nfunction stripJunkTags(article, $) {\n  var tags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  // Remove matching elements, but ignore\n  // any element with a class of mercury-parser-keep\n  $(tags.join(','), article).not('.' + KEEP_CLASS).remove();\n\n  // Remove the mercury-parser-keep class from result\n  $('.' + KEEP_CLASS, article).removeClass(KEEP_CLASS);\n\n  return $;\n}\n\n// H1 tags are typically the article title, which should be extracted\n// by the title extractor instead. If there's less than 3 of them (<3),\n// strip them. Otherwise, turn 'em into H2s.\nfunction cleanHOnes$$1(article, $) {\n  var $hOnes = $('h1', article);\n\n  if ($hOnes.length < 3) {\n    $hOnes.each(function (index, node) {\n      return $(node).remove();\n    });\n  } else {\n    $hOnes.each(function (index, node) {\n      convertNodeTo$$1($(node), $, 'h2');\n    });\n  }\n\n  return $;\n}\n\nfunction removeAllButWhitelist($article) {\n  $article.find('*').each(function (index, node) {\n    var attrs = getAttrs(node);\n\n    setAttrs(node, _Reflect$ownKeys(attrs).reduce(function (acc, attr) {\n      if (WHITELIST_ATTRS_RE.test(attr)) {\n        return _extends({}, acc, _defineProperty({}, attr, attrs[attr]));\n      }\n\n      return acc;\n    }, {}));\n  });\n\n  return $article;\n}\n\n// function removeAttrs(article, $) {\n//   REMOVE_ATTRS.forEach((attr) => {\n//     $(`[${attr}]`, article).removeAttr(attr);\n//   });\n// }\n\n// Remove attributes like style or align\nfunction cleanAttributes$$1($article) {\n  // Grabbing the parent because at this point\n  // $article will be wrapped in a div which will\n  // have a score set on it.\n  return removeAllButWhitelist($article.parent().length ? $article.parent() : $article);\n}\n\nfunction removeEmpty($article, $) {\n  $article.find('p').each(function (index, p) {\n    var $p = $(p);\n    if ($p.find('iframe, img').length === 0 && $p.text().trim() === '') $p.remove();\n  });\n\n  return $;\n}\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nvar UNLIKELY_CANDIDATES_BLACKLIST$1 = ['ad-break', 'adbox', 'advert', 'addthis', 'agegate', 'aux', 'blogger-labels', 'combx', 'comment', 'conversation', 'disqus', 'entry-unrelated', 'extra', 'foot', 'form', 'header', 'hidden', 'loader', 'login', // Note: This can hit 'blogindex'.\n'menu', 'meta', 'nav', 'pager', 'pagination', 'predicta', // readwriteweb inline ad box\n'presence_control_external', // lifehacker.com container full of false positives\n'popup', 'printfriendly', 'related', 'remove', 'remark', 'rss', 'share', 'shoutbox', 'sidebar', 'sociable', 'sponsor', 'tools'];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nvar UNLIKELY_CANDIDATES_WHITELIST$1 = ['and', 'article', 'body', 'blogindex', 'column', 'content', 'entry-content-asset', 'format', // misuse of form\n'hfeed', 'hentry', 'hatom', 'main', 'page', 'posts', 'shadow'];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nvar DIV_TO_P_BLOCK_TAGS$1 = ['a', 'blockquote', 'dl', 'div', 'img', 'p', 'pre', 'table'].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nvar NON_TOP_CANDIDATE_TAGS$1 = ['br', 'b', 'i', 'label', 'hr', 'area', 'base', 'basefont', 'input', 'img', 'link', 'meta'];\n\nvar NON_TOP_CANDIDATE_TAGS_RE$1 = new RegExp('^(' + NON_TOP_CANDIDATE_TAGS$1.join('|') + ')$', 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nvar HNEWS_CONTENT_SELECTORS$1 = [['.hentry', '.entry-content'], ['entry', '.entry-content'], ['.entry', '.entry_content'], ['.post', '.postbody'], ['.post', '.post_body'], ['.post', '.post-body']];\n\nvar PHOTO_HINTS$1 = ['figure', 'photo', 'image', 'caption'];\nvar PHOTO_HINTS_RE$1 = new RegExp(PHOTO_HINTS$1.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar POSITIVE_SCORE_HINTS$1 = ['article', 'articlecontent', 'instapaper_body', 'blog', 'body', 'content', 'entry-content-asset', 'entry', 'hentry', 'main', 'Normal', 'page', 'pagination', 'permalink', 'post', 'story', 'text', '[-_]copy', // usatoday\n'\\\\Bcopy'];\n\n// The above list, joined into a matching regular expression\nvar POSITIVE_SCORE_RE$1 = new RegExp(POSITIVE_SCORE_HINTS$1.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nvar READABILITY_ASSET$1 = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar NEGATIVE_SCORE_HINTS$1 = ['adbox', 'advert', 'author', 'bio', 'bookmark', 'bottom', 'byline', 'clear', 'com-', 'combx', 'comment', 'comment\\\\B', 'contact', 'copy', 'credit', 'crumb', 'date', 'deck', 'excerpt', 'featured', // tnr.com has a featured_content which throws us off\n'foot', 'footer', 'footnote', 'graf', 'head', 'info', 'infotext', // newscientist.com copyright\n'instapaper_ignore', 'jump', 'linebreak', 'link', 'masthead', 'media', 'meta', 'modal', 'outbrain', // slate.com junk\n'promo', 'pr_', // autoblog - press release\n'related', 'respond', 'roundcontent', // lifehacker restricted content warning\n'scroll', 'secondary', 'share', 'shopping', 'shoutbox', 'side', 'sidebar', 'sponsor', 'stamp', 'sub', 'summary', 'tags', 'tools', 'widget'];\n// The above list, joined into a matching regular expression\nvar NEGATIVE_SCORE_RE$1 = new RegExp(NEGATIVE_SCORE_HINTS$1.join('|'), 'i');\n\n// Match a digit. Pretty clear.\n\n\n// Match 2 or more consecutive <br> tags\n\n\n// Match 1 BR tag.\n\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\n\n\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nvar candidatesBlacklist$1 = UNLIKELY_CANDIDATES_BLACKLIST$1.join('|');\n\n\nvar candidatesWhitelist$1 = UNLIKELY_CANDIDATES_WHITELIST$1.join('|');\n\n\n\n\nvar PARAGRAPH_SCORE_TAGS$1 = new RegExp('^(p|li|span|pre)$', 'i');\nvar CHILD_CONTENT_TAGS$1 = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nvar BAD_TAGS$1 = new RegExp('^(address|form)$', 'i');\n\n// Get the score of a node based on its className and id.\nfunction getWeight(node) {\n  var classes = node.attr('class');\n  var id = node.attr('id');\n  var score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE$1.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE$1.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE$1.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE$1.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE$1.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET$1.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n\n// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nfunction getScore($node) {\n  return parseFloat($node.attr('score')) || null;\n}\n\n// return 1 for every comma in text\nfunction scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n\nvar idkRe = new RegExp('^(p|pre)$', 'i');\n\nfunction scoreLength(textLength) {\n  var tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'p';\n\n  var chunks = textLength / 50;\n\n  if (chunks > 0) {\n    var lengthBonus = void 0;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nfunction scoreParagraph$$1(node) {\n  var score = 1;\n  var text = node.text().trim();\n  var textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n\nfunction setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n\nfunction addScore$$1($node, $, amount) {\n  try {\n    var score = getOrInitScore$$1($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n\n// Adds 1/4 of a child's score to its parent\nfunction addToParent$$1(node, $, score) {\n  var parent = node.parent();\n  if (parent) {\n    addScore$$1(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nfunction getOrInitScore$$1($node, $) {\n  var weightNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode$$1($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent$$1($node, $, score);\n\n  return score;\n}\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nfunction scoreNode$$1($node) {\n  var _$node$get = $node.get(0),\n      tagName = _$node$get.tagName;\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n\n\n  if (PARAGRAPH_SCORE_TAGS$1.test(tagName)) {\n    return scoreParagraph$$1($node);\n  } else if (tagName.toLowerCase() === 'div') {\n    return 5;\n  } else if (CHILD_CONTENT_TAGS$1.test(tagName)) {\n    return 3;\n  } else if (BAD_TAGS$1.test(tagName)) {\n    return -3;\n  } else if (tagName.toLowerCase() === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n\nfunction convertSpans$1($node, $) {\n  if ($node.get(0)) {\n    var _$node$get = $node.get(0),\n        tagName = _$node$get.tagName;\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo$$1($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans$1($node, $);\n    addScore$$1($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre').not('[score]').each(function (index, node) {\n    // The raw score for this paragraph, before we add any parent/child\n    // scores.\n    var $node = $(node);\n    $node = setScore($node, $, getOrInitScore$$1($node, $, weightNodes));\n\n    var $parent = $node.parent();\n    var rawScore = scoreNode$$1($node);\n\n    addScoreTo($parent, $, rawScore, weightNodes);\n    if ($parent) {\n      // Add half of the individual content score to the\n      // grandparent\n      addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n    }\n  });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nfunction scoreContent$$1($) {\n  var weightNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS$1.forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        parentSelector = _ref2[0],\n        childSelector = _ref2[1];\n\n    $(parentSelector + ' ' + childSelector).each(function (index, node) {\n      addScore$$1($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nfunction mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  var siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  var wrappingDiv = $('<div></div>');\n\n  $candidate.parent().children().each(function (index, sibling) {\n    var $sibling = $(sibling);\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE$1.test(sibling.tagName)) {\n      return null;\n    }\n\n    var siblingScore = getScore($sibling);\n    if (siblingScore) {\n      if ($sibling.get(0) === $candidate.get(0)) {\n        wrappingDiv.append($sibling);\n      } else {\n        var contentBonus = 0;\n        var density = linkDensity($sibling);\n\n        // If sibling has a very low link density,\n        // give it a small bonus\n        if (density < 0.05) {\n          contentBonus += 20;\n        }\n\n        // If sibling has a high link density,\n        // give it a penalty\n        if (density >= 0.5) {\n          contentBonus -= 20;\n        }\n\n        // If sibling node has the same class as\n        // candidate, give it a bonus\n        if ($sibling.attr('class') === $candidate.attr('class')) {\n          contentBonus += topScore * 0.2;\n        }\n\n        var newScore = siblingScore + contentBonus;\n\n        if (newScore >= siblingScoreThreshold) {\n          return wrappingDiv.append($sibling);\n        } else if (sibling.tagName === 'p') {\n          var siblingContent = $sibling.text();\n          var siblingContentLength = textLength(siblingContent);\n\n          if (siblingContentLength > 80 && density < 0.25) {\n            return wrappingDiv.append($sibling);\n          } else if (siblingContentLength <= 80 && density === 0 && hasSentenceEnd(siblingContent)) {\n            return wrappingDiv.append($sibling);\n          }\n        }\n      }\n    }\n\n    return null;\n  });\n\n  if (wrappingDiv.children().length === 1 && wrappingDiv.children().first().get(0) === $candidate.get(0)) {\n    return $candidate;\n  }\n\n  return wrappingDiv;\n}\n\n// After we've calculated scores, loop through all of the possible\n// candidate nodes we found and find the one with the highest score.\nfunction findTopCandidate$$1($) {\n  var $candidate = void 0;\n  var topScore = 0;\n\n  $('[score]').each(function (index, node) {\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE$1.test(node.tagName)) {\n      return;\n    }\n\n    var $node = $(node);\n    var score = getScore($node);\n\n    if (score > topScore) {\n      topScore = score;\n      $candidate = $node;\n    }\n  });\n\n  // If we don't have a candidate, return the body\n  // or whatever the first element is\n  if (!$candidate) {\n    return $('body') || $('*').first();\n  }\n\n  $candidate = mergeSiblings($candidate, topScore, $);\n\n  return $candidate;\n}\n\n// Scoring\n\nfunction removeUnlessContent($node, $, weight) {\n  // Explicitly save entry-content-asset tags, which are\n  // noted as valuable in the Publisher guidelines. For now\n  // this works everywhere. We may want to consider making\n  // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  var content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    var pCount = $('p', $node).length;\n    var inputCount = $('input', $node).length;\n\n    // Looks like a form, too many inputs.\n    if (inputCount > pCount / 3) {\n      $node.remove();\n      return;\n    }\n\n    var contentLength = content.length;\n    var imgCount = $('img', $node).length;\n\n    // Content is too short, and there are no images, so\n    // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    var density = linkDensity($node);\n\n    // Too high of link density, is probably a menu or\n    // something similar.\n    // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n    // Too high of a link density, despite the score being\n    // high.\n    if (weight >= 25 && density > 0.5) {\n      // Don't remove the node if it's a list and the\n      // previous sibling starts with a colon though. That\n      // means it's probably content.\n      var tagName = $node.get(0).tagName.toLowerCase();\n      var nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        var previousNode = $node.prev();\n        if (previousNode && normalizeSpaces(previousNode.text()).slice(-1) === ':') {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    var scriptCount = $('script', $node).length;\n\n    // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n      return;\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nfunction cleanTags$$1($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each(function (index, node) {\n    var $node = $(node);\n    var weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore$$1($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n\nfunction cleanHeaders($article, $) {\n  var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  $(HEADER_TAG_LIST, $article).each(function (index, header) {\n    var $header = $(header);\n    // Remove any headers that appear before all other p tags in the\n    // document. This probably means that it was part of the title, a\n    // subtitle or something else extraneous like a datestamp or byline,\n    // all of which should be handled by other metadata handling.\n    if ($($header, $article).prevAll('p').length === 0) {\n      return $header.remove();\n    }\n\n    // Remove any headers that match the title exactly.\n    if (normalizeSpaces($(header).text()) === title) {\n      return $header.remove();\n    }\n\n    // If this header has a negative weight, it's probably junk.\n    // Get rid of it.\n    if (getWeight($(header)) < 0) {\n      return $header.remove();\n    }\n\n    return $header;\n  });\n\n  return $;\n}\n\n// Rewrite the tag name to div if it's a top level node like body or\n// html to avoid later complications with multiple body tags.\nfunction rewriteTopLevel$$1(article, $) {\n  // I'm not using context here because\n  // it's problematic when converting the\n  // top-level/root node - AP\n  $ = convertNodeTo$$1($('html'), $, 'div');\n  $ = convertNodeTo$$1($('body'), $, 'div');\n\n  return $;\n}\n\nfunction absolutize($, rootUrl, attr, $content) {\n  $('[' + attr + ']', $content).each(function (_, node) {\n    var attrs = getAttrs(node);\n    var url = attrs[attr];\n\n    if (url) {\n      var absoluteUrl = URL.resolve(rootUrl, url);\n      setAttr(node, attr, absoluteUrl);\n    }\n  });\n}\n\nfunction makeLinksAbsolute$$1($content, $, url) {\n  ['href', 'src'].forEach(function (attr) {\n    return absolutize($, url, attr, $content);\n  });\n\n  return $content;\n}\n\nfunction textLength(text) {\n  return text.trim().replace(/\\s+/g, ' ').length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nfunction linkDensity($node) {\n  var totalTextLength = textLength($node.text());\n\n  var linkText = $node.find('a').text();\n  var linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  } else if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n\n// Given a node type to search for, and a list of meta tag names to\n// search for, find a meta tag associated.\nfunction extractFromMeta$$1($, metaNames, cachedNames) {\n  var cleanTags$$1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  var foundNames = metaNames.filter(function (name) {\n    return cachedNames.indexOf(name) !== -1;\n  });\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var name = _step.value;\n\n      var type = 'name';\n      var value = 'value';\n\n      var nodes = $('meta[' + type + '=\"' + name + '\"]');\n\n      // Get the unique value of every matching node, in case there\n      // are two meta tags with the same name and value.\n      // Remove empty values.\n      var values = nodes.map(function (index, node) {\n        return $(node).attr(value);\n      }).toArray().filter(function (text) {\n        return text !== '';\n      });\n\n      // If we have more than one value for the same name, we have a\n      // conflict and can't trust any of them. Skip this name. If we have\n      // zero, that means our meta tags had no values. Skip this name\n      // also.\n      if (values.length === 1) {\n        var metaValue = void 0;\n        // Meta values that contain HTML should be stripped, as they\n        // weren't subject to cleaning previously.\n        if (cleanTags$$1) {\n          metaValue = stripTags(values[0], $);\n        } else {\n          metaValue = values[0];\n        }\n\n        return {\n          v: metaValue\n        };\n      }\n    };\n\n    for (var _iterator = _getIterator(foundNames), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ret = _loop();\n\n      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    }\n\n    // If nothing is found, return null\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment$$1($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nfunction extractFromSelectors$$1($, selectors) {\n  var maxChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var textOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(selectors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var selector = _step.value;\n\n      var nodes = $(selector);\n\n      // If we didn't get exactly one of this selector, this may be\n      // a list of articles or comments. Skip it.\n      if (nodes.length === 1) {\n        var $node = $(nodes[0]);\n\n        if (isGoodNode($node, maxChildren)) {\n          var content = void 0;\n          if (textOnly) {\n            content = $node.text();\n          } else {\n            content = $node.html();\n          }\n\n          if (content) {\n            return content;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\n// strips all tags from a string of text\nfunction stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  var cleanText = $('<span>' + text + '</span>').text();\n  return cleanText === '' ? text : cleanText;\n}\n\nfunction withinComment$$1($node) {\n  var parents = $node.parents().toArray();\n  var commentParent = parents.find(function (parent) {\n    var attrs = getAttrs(parent);\n    var nodeClass = attrs.class,\n        id = attrs.id;\n\n    var classAndId = nodeClass + ' ' + id;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n\n// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nfunction nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n\nfunction isWordpress($) {\n  return $(IS_WP_SELECTOR).length > 0;\n}\n\nfunction getAttrs(node) {\n  var attribs = node.attribs,\n      attributes = node.attributes;\n\n\n  if (!attribs && attributes) {\n    var attrs = _Reflect$ownKeys(attributes).reduce(function (acc, index) {\n      var attr = attributes[index];\n\n      if (!attr.name || !attr.value) return acc;\n\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n    return attrs;\n  }\n\n  return attribs;\n}\n\nfunction setAttr(node, attr, val) {\n  if (node.attribs) {\n    node.attribs[attr] = val;\n  } else if (node.attributes) {\n    node.setAttribute(attr, val);\n  }\n\n  return node;\n}\n\nfunction setAttrs(node, attrs) {\n  if (node.attribs) {\n    node.attribs = attrs;\n  } else if (node.attributes) {\n    while (node.attributes.length > 0) {\n      node.removeAttribute(node.attributes[0].name);\n    }\n\n    _Reflect$ownKeys(attrs).forEach(function (key) {\n      node.setAttribute(key, attrs[key]);\n    });\n  }\n\n  return node;\n}\n\n// DOM manipulation\n\nvar IS_LINK = new RegExp('https?://', 'i');\nvar IS_IMAGE = new RegExp('.(png|gif|jpe?g)', 'i');\n\nvar TAGS_TO_REMOVE = ['script', 'style', 'form'].join(',');\n\n// Convert all instances of images with potentially\n// lazy loaded images into normal images.\n// Many sites will have img tags with no source, or an image tag with a src\n// attribute that a is a placeholer. We need to be able to properly fill in\n// the src attribute so the images are no longer lazy loaded.\nfunction convertLazyLoadedImages($) {\n  $('img').each(function (_, img) {\n    var attrs = getAttrs(img);\n\n    _Reflect$ownKeys(attrs).forEach(function (attr) {\n      var value = attrs[attr];\n\n      if (attr !== 'src' && IS_LINK.test(value) && IS_IMAGE.test(value)) {\n        $(img).attr('src', value);\n      }\n    });\n  });\n\n  return $;\n}\n\nfunction isComment(index, node) {\n  return node.type === 'comment';\n}\n\nfunction cleanComments($) {\n  $.root().find('*').contents().filter(isComment).remove();\n\n  return $;\n}\n\nfunction clean($) {\n  $(TAGS_TO_REMOVE).remove();\n\n  $ = cleanComments($);\n  return $;\n}\n\nvar Resource = {\n\n  // Create a Resource.\n  //\n  // :param url: The URL for the document we should retrieve.\n  // :param response: If set, use as the response rather than\n  //                  attempting to fetch it ourselves. Expects a\n  //                  string.\n  create: function create(url, preparedResponse, parsedUrl) {\n    var _this = this;\n\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n      var result, validResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              result = void 0;\n\n              if (!preparedResponse) {\n                _context.next = 6;\n                break;\n              }\n\n              validResponse = {\n                statusMessage: 'OK',\n                statusCode: 200,\n                headers: {\n                  'content-type': 'text/html',\n                  'content-length': 500\n                }\n              };\n\n\n              result = { body: preparedResponse, response: validResponse };\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.next = 8;\n              return fetchResource$1(url, parsedUrl);\n\n            case 8:\n              result = _context.sent;\n\n            case 9:\n              if (!result.error) {\n                _context.next = 12;\n                break;\n              }\n\n              result.failed = true;\n              return _context.abrupt('return', result);\n\n            case 12:\n              return _context.abrupt('return', _this.generateDoc(result));\n\n            case 13:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this);\n    }))();\n  },\n  generateDoc: function generateDoc(_ref) {\n    var content = _ref.body,\n        response = _ref.response;\n    var contentType = response.headers['content-type'];\n\n    // TODO: Implement is_text function from\n    // https://github.com/ReadabilityHoldings/readability/blob/8dc89613241d04741ebd42fa9fa7df1b1d746303/readability/utils/text.py#L57\n\n    if (!contentType.includes('html') && !contentType.includes('text')) {\n      throw new Error('Content does not appear to be text.');\n    }\n\n    var $ = cheerio.load(content);\n\n    if ($.root().children().length === 0) {\n      throw new Error('No children, likely a bad parse.');\n    }\n\n    $ = normalizeMetaTags($);\n    $ = convertLazyLoadedImages($);\n    $ = clean($);\n\n    return $;\n  }\n};\n\nvar merge = function merge(extractor, domains) {\n  return domains.reduce(function (acc, domain) {\n    acc[domain] = extractor;\n    return acc;\n  }, {});\n};\n\nfunction mergeSupportedDomains(extractor) {\n  return extractor.supportedDomains ? merge(extractor, [extractor.domain].concat(_toConsumableArray(extractor.supportedDomains))) : merge(extractor, [extractor.domain]);\n}\n\nvar BloggerExtractor = {\n  domain: 'blogspot.com',\n  content: {\n    // Blogger is insane and does not load its content\n    // initially in the page, but it's all there\n    // in noscript\n    selectors: ['.post-content noscript'],\n\n    // Selectors to remove from the extracted content\n    clean: [],\n\n    // Convert the noscript tag to a div\n    transforms: {\n      noscript: 'div'\n    }\n  },\n\n  author: {\n    selectors: ['.post-author-name']\n  },\n\n  title: {\n    selectors: ['.post h2.title']\n  },\n\n  date_published: {\n    selectors: ['span.publishdate']\n  }\n};\n\nvar NYMagExtractor = {\n  domain: 'nymag.com',\n  content: {\n    // Order by most likely. Extractor will stop on first occurrence\n    selectors: ['div.article-content', 'section.body', 'article.article'],\n\n    // Selectors to remove from the extracted content\n    clean: ['.ad', '.single-related-story'],\n\n    // Object of tranformations to make on matched elements\n    // Each key is the selector, each value is the tag to\n    // transform to.\n    // If a function is given, it should return a string\n    // to convert to or nothing (in which case it will not perform\n    // the transformation.\n    transforms: {\n      // Convert h1s to h2s\n      h1: 'h2',\n\n      // Convert lazy-loaded noscript images to figures\n      noscript: function noscript($node, $) {\n        var $children = $.browser ? $($node.text()) : $node.children();\n        if ($children.length === 1 && $children.get(0) !== undefined && $children.get(0).tagName.toLowerCase() === 'img') {\n          return 'figure';\n        }\n\n        return null;\n      }\n    }\n  },\n\n  title: {\n    selectors: ['h1.lede-feature-title', 'h1.headline-primary', 'h1']\n  },\n\n  author: {\n    selectors: ['.by-authors', '.lede-feature-author']\n  },\n\n  dek: {\n    selectors: ['.lede-feature-teaser']\n  },\n\n  date_published: {\n    selectors: [['time.article-timestamp[datetime]', 'datetime'], 'time.article-timestamp']\n  }\n};\n\nvar WikipediaExtractor = {\n  domain: 'wikipedia.org',\n  content: {\n    selectors: ['#mw-content-text'],\n\n    defaultCleaner: false,\n\n    // transform top infobox to an image with caption\n    transforms: {\n      '.infobox img': function infoboxImg($node) {\n        var $parent = $node.parents('.infobox');\n        // Only prepend the first image in .infobox\n        if ($parent.children('img').length === 0) {\n          $parent.prepend($node);\n        }\n      },\n      '.infobox caption': 'figcaption',\n      '.infobox': 'figure'\n    },\n\n    // Selectors to remove from the extracted content\n    clean: ['.mw-editsection', 'figure tr, figure td, figure tbody', '#toc', '.navbox']\n\n  },\n\n  author: 'Wikipedia Contributors',\n\n  title: {\n    selectors: ['h2.title']\n  },\n\n  date_published: {\n    selectors: ['#footer-info-lastmod']\n  }\n\n};\n\nvar TwitterExtractor = {\n  domain: 'twitter.com',\n\n  content: {\n    transforms: {\n      // We're transforming essentially the whole page here.\n      // Twitter doesn't have nice selectors, so our initial\n      // selector grabs the whole page, then we're re-writing\n      // it to fit our needs before we clean it up.\n      '.permalink[role=main]': function permalinkRoleMain($node, $) {\n        var tweets = $node.find('.tweet');\n        var $tweetContainer = $('<div id=\"TWEETS_GO_HERE\"></div>');\n        $tweetContainer.append(tweets);\n        $node.replaceWith($tweetContainer);\n      },\n\n      // Twitter wraps @ with s, which\n      // renders as a strikethrough\n      s: 'span'\n    },\n\n    selectors: ['.permalink[role=main]'],\n\n    defaultCleaner: false,\n\n    clean: ['.stream-item-footer', 'button', '.tweet-details-fixer']\n  },\n\n  author: {\n    selectors: ['.tweet.permalink-tweet .username']\n  },\n\n  date_published: {\n    selectors: [['.permalink-tweet ._timestamp[data-time-ms]', 'data-time-ms']]\n  }\n\n};\n\nvar NYTimesExtractor = {\n  domain: 'www.nytimes.com',\n\n  title: {\n    selectors: ['.g-headline', 'h1.headline']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], '.g-byline', '.byline']\n  },\n\n  content: {\n    selectors: ['div.g-blocks', 'article#story'],\n\n    transforms: {\n      'img.g-lazy': function imgGLazy($node) {\n        var src = $node.attr('src');\n        // const widths = $node.attr('data-widths')\n        //                   .slice(1)\n        //                   .slice(0, -1)\n        //                   .split(',');\n        // if (widths.length) {\n        //   width = widths.slice(-1);\n        // } else {\n        //   width = '900';\n        // }\n        var width = 640;\n\n        src = src.replace('{{size}}', width);\n        $node.attr('src', src);\n      }\n    },\n\n    clean: ['.ad', 'header#story-header', '.story-body-1 .lede.video', '.visually-hidden', '#newsletter-promo', '.promo', '.comments-button', '.hidden', '.comments', '.supplemental', '.nocontent', '.story-footer-links']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: null,\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\nvar TheAtlanticExtractor = {\n  domain: 'www.theatlantic.com',\n  title: {\n    selectors: ['h1.hed']\n  },\n\n  author: {\n    selectors: ['article#article .article-cover-extra .metadata .byline a']\n  },\n\n  content: {\n    selectors: [['.article-cover figure.lead-img', '.article-body'], '.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.partner-box']\n  },\n\n  date_published: {\n    selectors: [['time[itemProp=\"datePublished\"]', 'datetime']]\n  },\n\n  lead_image_url: null,\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar NewYorkerExtractor = {\n  domain: 'www.newyorker.com',\n  title: {\n    selectors: ['h1.title']\n  },\n\n  author: {\n    selectors: ['.contributors']\n  },\n\n  content: {\n    selectors: ['div#articleBody', 'div.articleBody'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value'], ['time[itemProp=\"datePublished\"]', 'content']],\n\n    timezone: 'America/New_York'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['.dek', 'h2.dek']\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar WiredExtractor = {\n  domain: 'www.wired.com',\n  title: {\n    selectors: ['h1.post-title']\n  },\n\n  author: {\n    selectors: ['a[rel=\"author\"]']\n  },\n\n  content: {\n    selectors: ['article.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.visually-hidden', 'figcaption img.photo']\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar MSNExtractor = {\n  domain: 'www.msn.com',\n  title: {\n    selectors: ['h1']\n  },\n\n  author: {\n    selectors: ['span.authorname-txt']\n  },\n\n  content: {\n    selectors: ['div.richtext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span.caption']\n  },\n\n  date_published: {\n    selectors: ['span.time']\n  },\n\n  lead_image_url: {\n    selectors: []\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar YahooExtractor = {\n  domain: 'www.yahoo.com',\n  title: {\n    selectors: ['header.canvas-header']\n  },\n\n  author: {\n    selectors: ['span.provider-name']\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.content-canvas'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.figure-caption']\n  },\n\n  date_published: {\n    selectors: [['time.date[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter dek selectors\n    ]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar BuzzfeedExtractor = {\n  domain: 'www.buzzfeed.com',\n  title: {\n    selectors: ['h1[id=\"post-title\"]']\n  },\n\n  author: {\n    selectors: ['a[data-action=\"user/username\"]', 'byline__author']\n  },\n\n  content: {\n    selectors: [['.longform_custom_header_media', '#buzz_sub_buzz'], '#buzz_sub_buzz'],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: 'b',\n\n      'div.longform_custom_header_media': function divLongform_custom_header_media($node) {\n        if ($node.has('img') && $node.has('.longform_header_image_source')) {\n          return 'figure';\n        }\n\n        return null;\n      },\n\n      'figure.longform_custom_header_media .longform_header_image_source': 'figcaption'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.instapaper_ignore', '.suplist_list_hide .buzz_superlist_item .buzz_superlist_number_inline', '.share-box', '.print']\n  },\n\n  date_published: {\n    selectors: ['.buzz-datetime']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar WikiaExtractor = {\n  domain: 'fandom.wikia.com',\n  title: {\n    selectors: ['h1.entry-title']\n  },\n\n  author: {\n    selectors: ['.author vcard', '.fn']\n  },\n\n  content: {\n    selectors: ['.grid-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar LittleThingsExtractor = {\n  domain: 'www.littlethings.com',\n  title: {\n    selectors: ['h1.post-title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.mainContentIntro', '.content-wrapper'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar PoliticoExtractor = {\n  domain: 'www.politico.com',\n  title: {\n    selectors: [\n    // enter title selectors\n    ['meta[name=\"og:title\"]', 'value']]\n  },\n\n  author: {\n    selectors: ['.story-main-content .byline .vcard']\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.story-main-content', '.content-group', '.story-core', '.story-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['figcaption']\n  },\n\n  date_published: {\n    selectors: [['.story-main-content .timestamp time[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [\n    // enter lead_image_url selectors\n    ['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\nvar DeadspinExtractor = {\n  domain: 'deadspin.com',\n\n  supportedDomains: ['jezebel.com', 'lifehacker.com', 'kotaku.com', 'gizmodo.com', 'jalopnik.com', 'kinja.com'],\n\n  title: {\n    selectors: ['h1.headline']\n  },\n\n  author: {\n    selectors: ['.author']\n  },\n\n  content: {\n    selectors: ['.post-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'iframe.lazyload[data-recommend-id^=\"youtube://\"]': function iframeLazyloadDataRecommendIdYoutube($node) {\n        var youtubeId = $node.attr('id').split('youtube-')[1];\n        $node.attr('src', 'https://www.youtube.com/embed/' + youtubeId);\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.magnifier', '.lightbox']\n  },\n\n  date_published: {\n    selectors: [['time.updated[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar BroadwayWorldExtractor = {\n  domain: 'www.broadwayworld.com',\n  title: {\n    selectors: ['h1.article-title']\n  },\n\n  author: {\n    selectors: ['span[itemprop=author]']\n  },\n\n  content: {\n    selectors: ['div[itemprop=articlebody]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=datePublished]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar ApartmentTherapyExtractor = {\n  domain: 'www.apartmenttherapy.com',\n  title: {\n    selectors: ['h1.headline']\n  },\n\n  author: {\n    selectors: ['.PostByline__name']\n  },\n\n  content: {\n    selectors: ['div.post__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[data-render-react-id=\"images/LazyPicture\"]': function divDataRenderReactIdImagesLazyPicture($node, $) {\n        var data = JSON.parse($node.attr('data-props'));\n        var src = data.sources[0].src;\n\n        var $img = $('<img />').attr('src', src);\n        $node.replaceWith($img);\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['.PostByline__timestamp[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\nvar MediumExtractor = {\n  domain: 'medium.com',\n\n  supportedDomains: ['trackchanges.postlight.com'],\n\n  title: {\n    selectors: ['h1']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['.section-content'], '.section-content', 'article > div > section'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // Re-write lazy-loaded youtube videos\n      iframe: function iframe($node) {\n        var ytRe = /https:\\/\\/i.embed.ly\\/.+url=https:\\/\\/i\\.ytimg\\.com\\/vi\\/(\\w+)\\//;\n        var thumb = decodeURIComponent($node.attr('data-thumbnail'));\n\n        if (ytRe.test(thumb)) {\n          var _thumb$match = thumb.match(ytRe),\n              _thumb$match2 = _slicedToArray(_thumb$match, 2),\n              _ = _thumb$match2[0],\n              youtubeId = _thumb$match2[1]; // eslint-disable-line\n\n\n          $node.attr('src', 'https://www.youtube.com/embed/' + youtubeId);\n          var $parent = $node.parents('figure');\n          var $caption = $parent.find('figcaption');\n          $parent.empty().append([$node, $caption]);\n        }\n      },\n\n      // rewrite figures to pull out image and caption, remove rest\n      figure: function figure($node) {\n        // ignore if figure has an iframe\n        if ($node.find('iframe').length > 0) return;\n\n        var $img = $node.find('img').slice(-1)[0];\n        var $caption = $node.find('figcaption');\n        $node.empty().append([$img, $caption]);\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['time[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\nvar WwwTmzComExtractor = {\n  domain: 'www.tmz.com',\n\n  title: {\n    selectors: ['.post-title-breadcrumb', 'h1', '.headline']\n  },\n\n  author: 'TMZ STAFF',\n\n  date_published: {\n    selectors: ['.article-posted-date'],\n\n    timezone: 'America/Los_Angeles'\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article-content', '.all-post-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.lightbox-link']\n  }\n};\n\nvar WwwWashingtonpostComExtractor = {\n  domain: 'www.washingtonpost.com',\n\n  title: {\n    selectors: ['h1', '#topper-headline-wrapper']\n  },\n\n  author: {\n    selectors: ['.pb-byline']\n  },\n\n  date_published: {\n    selectors: [['.pb-timestamp[itemprop=\"datePublished\"]', 'content']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.inline-content': function divInlineContent($node) {\n        if ($node.has('img,iframe,video').length > 0) {\n          return 'figure';\n        }\n\n        $node.remove();\n        return null;\n      },\n      '.pb-caption': 'figcaption'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.interstitial-link', '.newsletter-inline-unit']\n  }\n};\n\nvar WwwHuffingtonpostComExtractor = {\n  domain: 'www.huffingtonpost.com',\n\n  title: {\n    selectors: ['h1.headline__title']\n  },\n\n  author: {\n    selectors: ['span.author-card__details__name']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:modified_time\"]', 'value'], ['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['h2.headline__subtitle']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.entry__body'],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // 'div.top-media': ($node) => {\n      //   const $figure = $node.children('figure');\n      //   $node.replaceWith($figure);\n      // },\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote', '.tag-cloud', '.embed-asset', '.below-entry', '.entry-corrections', '#suggested-story']\n  }\n};\n\nvar NewrepublicComExtractor = {\n  domain: 'newrepublic.com',\n\n  title: {\n    selectors: ['h1.article-headline', '.minutes-primary h1.minute-title']\n  },\n\n  author: {\n    selectors: ['div.author-list', '.minutes-primary h3.minute-byline']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n\n    timezone: 'America/New_York'\n  },\n\n  dek: {\n    selectors: ['h2.article-subhead']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.content-body', '.minutes-primary div.content-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['aside']\n  }\n};\n\nvar MoneyCnnComExtractor = {\n  domain: 'money.cnn.com',\n\n  title: {\n    selectors: ['.article-title']\n  },\n\n  author: {\n    selectors: ['.byline a']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"date\"]', 'value']],\n\n    timezone: 'GMT'\n  },\n\n  dek: {\n    selectors: ['#storytext h2']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['#storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inStoryHeading']\n  }\n};\n\nvar WwwThevergeComExtractor = {\n  domain: 'www.theverge.com',\n\n  supportedDomains: ['www.polygon.com'],\n\n  title: {\n    selectors: ['h1']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['h2.p-dek']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [\n    // feature template multi-match\n    ['.c-entry-hero .e-image', '.c-entry-intro', '.c-entry-content'],\n    // regular post multi-match\n    ['.e-image--hero', '.c-entry-content'],\n    // feature template fallback\n    '.l-wrapper .l-feature',\n    // regular post fallback\n    'div.c-entry-content'],\n\n    // Transform lazy-loaded images\n    transforms: {\n      noscript: function noscript($node) {\n        var $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'span';\n        }\n\n        return null;\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.aside', 'img.c-dynamic-image']\n  }\n};\n\nvar WwwCnnComExtractor = {\n  domain: 'www.cnn.com',\n\n  title: {\n    selectors: ['h1.pg-headline', 'h1']\n  },\n\n  author: {\n    selectors: ['.metadata__byline__author']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"pubdate\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [\n    // a more specific selector to grab the lead image and the body\n    ['.media__video--thumbnail', '.zn-body-text'],\n    // a fallback for the above\n    '.zn-body-text', 'div[itemprop=\"articleBody\"]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.zn-body__paragraph, .el__leafmedia--sourced-paragraph': function znBody__paragraphEl__leafmediaSourcedParagraph($node) {\n        var $text = $node.html();\n        if ($text) {\n          return 'p';\n        }\n\n        return null;\n      },\n\n      // this transform cleans the short, all-link sections linking\n      // to related content but not marked as such in any way.\n      '.zn-body__paragraph': function znBody__paragraph($node) {\n        if ($node.has('a')) {\n          if ($node.text().trim() === $node.find('a').text().trim()) {\n            $node.remove();\n          }\n        }\n      },\n\n      '.media__video--thumbnail': 'figure'\n\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwAolComExtractor = {\n  domain: 'www.aol.com',\n\n  title: {\n    selectors: ['h1.p-article__title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: ['.p-article__byline__date'],\n\n    timezone: 'America/New_York'\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwYoutubeComExtractor = {\n  domain: 'www.youtube.com',\n\n  title: {\n    selectors: ['.watch-title', 'h1.watch-title-container']\n  },\n\n  author: {\n    selectors: ['.yt-user-info']\n  },\n\n  date_published: {\n    selectors: [['meta[itemProp=\"datePublished\"]', 'value']],\n\n    timezone: 'GMT'\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    defaultCleaner: false,\n\n    selectors: [['#player-api', '#eow-description']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '#player-api': function playerApi($node, $) {\n        var videoId = $('meta[itemProp=\"videoId\"]').attr('value');\n        $node.html('\\n          <iframe src=\"https://www.youtube.com/embed/' + videoId + '\" frameborder=\"0\" allowfullscreen></iframe>');\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwTheguardianComExtractor = {\n  domain: 'www.theguardian.com',\n\n  title: {\n    selectors: ['.content__headline']\n  },\n\n  author: {\n    selectors: ['p.byline']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['.content__standfirst']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.content__article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.hide-on-mobile', '.inline-icon']\n  }\n};\n\nvar WwwSbnationComExtractor = {\n  domain: 'www.sbnation.com',\n\n  title: {\n    selectors: ['h1.c-page-title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['h2.c-entry-summary.p-dek']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.c-entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwBloombergComExtractor = {\n  domain: 'www.bloomberg.com',\n\n  title: {\n    selectors: [\n    // normal articles\n    '.lede-headline',\n\n    // /graphics/ template\n    'h1.article-title',\n\n    // /news/ template\n    'h1.lede-text-only__hed']\n  },\n\n  author: {\n    selectors: [['meta[name=\"parsely-author\"]', 'value'], '.byline-details__link',\n\n    // /graphics/ template\n    '.bydek',\n\n    // /news/ template\n    '.author']\n  },\n\n  date_published: {\n    selectors: [['time.published-at', 'datetime'], ['time[datetime]', 'datetime'], ['meta[name=\"date\"]', 'value'], ['meta[name=\"parsely-pub-date\"]', 'value']]\n  },\n\n  dek: {\n    selectors: []\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article-body__content',\n\n    // /graphics/ template\n    ['section.copy-block'],\n\n    // /news/ template\n    '.body-copy'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.inline-newsletter', '.page-ad']\n  }\n};\n\nvar WwwBustleComExtractor = {\n  domain: 'www.bustle.com',\n\n  title: {\n    selectors: ['h1.post-page__title']\n  },\n\n  author: {\n    selectors: ['div.content-meta__author']\n  },\n\n  date_published: {\n    selectors: [['time.content-meta__published-date[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.post-page__body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwNprOrgExtractor = {\n  domain: 'www.npr.org',\n\n  title: {\n    selectors: ['h1', '.storytitle']\n  },\n\n  author: {\n    selectors: ['p.byline__name.byline__name--block']\n  },\n\n  date_published: {\n    selectors: [['.dateblock time[datetime]', 'datetime'], ['meta[name=\"date\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value'], ['meta[name=\"twitter:image:src\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.storytext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.bucketwrap.image': 'figure',\n      '.bucketwrap.image .credit-caption': 'figcaption'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['div.enlarge_measure']\n  }\n};\n\nvar WwwRecodeNetExtractor = {\n  domain: 'www.recode.net',\n\n  title: {\n    selectors: ['h1.c-page-title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['h2.c-entry-summary.p-dek']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['figure.e-image--hero', '.c-entry-content'], '.c-entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar QzComExtractor = {\n  domain: 'qz.com',\n\n  title: {\n    selectors: ['header.item-header.content-width-responsive']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: ['.timestamp']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['figure.featured-image', '.item-body'], '.item-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.article-aside', '.progressive-image-thumbnail']\n  }\n};\n\nvar WwwDmagazineComExtractor = {\n  domain: 'www.dmagazine.com',\n\n  title: {\n    selectors: ['h1.story__title']\n  },\n\n  author: {\n    selectors: ['.story__info .story__info__item:first-child']\n  },\n\n  date_published: {\n    selectors: [\n    // enter selectors\n    '.story__info'],\n\n    timezone: 'America/Chicago'\n  },\n\n  dek: {\n    selectors: ['.story__subhead']\n  },\n\n  lead_image_url: {\n    selectors: [['article figure a:first-child', 'href']]\n  },\n\n  content: {\n    selectors: ['.story__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwReutersComExtractor = {\n  domain: 'www.reuters.com',\n\n  title: {\n    selectors: ['h1.article-headline']\n  },\n\n  author: {\n    selectors: ['.author']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['#article-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.article-subtitle': 'h4'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['#article-byline .author']\n  }\n};\n\nvar MashableComExtractor = {\n  domain: 'mashable.com',\n\n  title: {\n    selectors: ['h1.title']\n  },\n\n  author: {\n    selectors: ['span.author_name a']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"og:article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['section.article-content.blueprint'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.image-credit': 'figcaption'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwChicagotribuneComExtractor = {\n  domain: 'www.chicagotribune.com',\n\n  title: {\n    selectors: ['h1.trb_ar_hl_t']\n  },\n\n  author: {\n    selectors: ['span.trb_ar_by_nm_au']\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.trb_ar_page'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwVoxComExtractor = {\n  domain: 'www.vox.com',\n\n  title: {\n    selectors: ['h1.c-page-title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['.p-dek']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['figure.e-image--hero', '.c-entry-content'], '.c-entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'figure .e-image__image noscript': function figureEImage__imageNoscript($node) {\n        var imgHtml = $node.html();\n        $node.parents('.e-image__image').find('.c-dynamic-image').replaceWith(imgHtml);\n      },\n\n      'figure .e-image__meta': 'figcaption'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar NewsNationalgeographicComExtractor = {\n  domain: 'news.nationalgeographic.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title']\n  },\n\n  author: {\n    selectors: ['.byline-component__contributors b span']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n    format: 'ddd MMM DD HH:mm:ss zz YYYY',\n    timezone: 'EST'\n  },\n\n  dek: {\n    selectors: ['.article__deck']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['.parsys.content', '.__image-lead__'], '.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.parsys.content': function parsysContent($node, $) {\n        var $imgSrc = $node.find('.image.parbase.section').find('.picturefill').first().data('platform-src');\n        if ($imgSrc) {\n          $node.prepend($('<img class=\"__image-lead__\" src=\"' + $imgSrc + '\"/>'));\n        }\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote.pull-quote--large']\n  }\n};\n\nvar WwwNationalgeographicComExtractor = {\n  domain: 'www.nationalgeographic.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title']\n  },\n\n  author: {\n    selectors: ['.byline-component__contributors b span']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['.article__deck']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['.parsys.content', '.__image-lead__'], '.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.parsys.content': function parsysContent($node, $) {\n        var $imageParent = $node.children().first();\n        if ($imageParent.hasClass('imageGroup')) {\n          var $dataAttrContainer = $imageParent.find('.media--medium__container').children().first();\n          var imgPath1 = $dataAttrContainer.data('platform-image1-path');\n          var imgPath2 = $dataAttrContainer.data('platform-image2-path');\n          if (imgPath2 && imgPath1) {\n            $node.prepend($('<div class=\"__image-lead__\">\\n                <img src=\"' + imgPath1 + '\"/>\\n                <img src=\"' + imgPath2 + '\"/>\\n              </div>'));\n          }\n        } else {\n          var $imgSrc = $node.find('.image.parbase.section').find('.picturefill').first().data('platform-src');\n          if ($imgSrc) {\n            $node.prepend($('<img class=\"__image-lead__\" src=\"' + $imgSrc + '\"/>'));\n          }\n        }\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.pull-quote.pull-quote--small']\n  }\n};\n\nvar WwwLatimesComExtractor = {\n  domain: 'www.latimes.com',\n\n  title: {\n    selectors: ['.trb_ar_hl']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.trb_ar_main'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.trb_ar_la': function trb_ar_la($node) {\n        var $figure = $node.find('figure');\n        $node.replaceWith($figure);\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.trb_ar_by', '.trb_ar_cr']\n  }\n};\n\nvar PagesixComExtractor = {\n  domain: 'pagesix.com',\n\n  supportedDomains: ['nypost.com'],\n\n  title: {\n    selectors: ['h1 a']\n  },\n\n  author: {\n    selectors: ['.byline']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['#featured-image-wrapper', '.entry-content'], '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '#featured-image-wrapper': 'figure',\n      '.wp-caption-text': 'figcaption'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.modal-trigger']\n  }\n};\n\nvar ThefederalistpapersOrgExtractor = {\n  domain: 'thefederalistpapers.org',\n\n  title: {\n    selectors: ['h1.entry-title']\n  },\n\n  author: {\n    selectors: ['main span.entry-author-name']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [['p[style]']]\n  }\n};\n\nvar WwwCbssportsComExtractor = {\n  domain: 'www.cbssports.com',\n\n  title: {\n    selectors: ['.article-headline']\n  },\n\n  author: {\n    selectors: ['.author-name']\n  },\n\n  date_published: {\n    selectors: [['.date-original-reading-time time', 'datetime']],\n    timezone: 'UTC'\n  },\n\n  dek: {\n    selectors: ['.article-subline']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwMsnbcComExtractor = {\n  domain: 'www.msnbc.com',\n\n  title: {\n    selectors: ['h1', 'h1.is-title-pane']\n  },\n\n  author: {\n    selectors: ['.author']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.pane-node-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.pane-node-body': function paneNodeBody($node, $) {\n        var _WwwMsnbcComExtractor = _slicedToArray(WwwMsnbcComExtractor.lead_image_url.selectors[0], 2),\n            selector = _WwwMsnbcComExtractor[0],\n            attr = _WwwMsnbcComExtractor[1];\n\n        var src = $(selector).attr(attr);\n        if (src) {\n          $node.prepend('<img src=\"' + src + '\" />');\n        }\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwThepoliticalinsiderComExtractor = {\n  domain: 'www.thepoliticalinsider.com',\n\n  title: {\n    selectors: [['meta[name=\"sailthru.title\"]', 'value']]\n  },\n\n  author: {\n    selectors: [['meta[name=\"sailthru.author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n    timezone: 'America/New_York'\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div#article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwMentalflossComExtractor = {\n  domain: 'www.mentalfloss.com',\n\n  title: {\n    selectors: ['h1.title', '.title-group', '.inner']\n  },\n\n  author: {\n    selectors: ['.field-name-field-enhanced-authors']\n  },\n\n  date_published: {\n    selectors: ['.date-display-single'],\n    timezone: 'America/New_York'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.field.field-name-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar AbcnewsGoComExtractor = {\n  domain: 'abcnews.go.com',\n\n  title: {\n    selectors: ['.article-header h1']\n  },\n\n  author: {\n    selectors: ['.authors'],\n    clean: ['.author-overlay', '.by-text']\n  },\n\n  date_published: {\n    selectors: ['.timestamp'],\n    timezone: 'America/New_York'\n\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article-copy'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwNydailynewsComExtractor = {\n  domain: 'www.nydailynews.com',\n\n  title: {\n    selectors: ['h1#ra-headline']\n  },\n\n  author: {\n    selectors: [['meta[name=\"parsely-author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['article#ra-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['dl#ra-tags', '.ra-related', 'a.ra-editor', 'dl#ra-share-bottom']\n  }\n};\n\nvar WwwCnbcComExtractor = {\n  domain: 'www.cnbc.com',\n\n  title: {\n    selectors: ['h1.title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div#article_body.content', 'div.story'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwPopsugarComExtractor = {\n  domain: 'www.popsugar.com',\n\n  title: {\n    selectors: ['h2.post-title', 'title-text']\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['#content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.share-copy-title', '.post-tags', '.reactions']\n  }\n};\n\nvar ObserverComExtractor = {\n  domain: 'observer.com',\n\n  title: {\n    selectors: ['h1.entry-title']\n  },\n\n  author: {\n    selectors: ['.author', '.vcard']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['h2.dek']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar PeopleComExtractor = {\n  domain: 'people.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']]\n  },\n\n  author: {\n    selectors: ['a.author.url.fn']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.article-body__inner'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwUsmagazineComExtractor = {\n  domain: 'www.usmagazine.com',\n\n  title: {\n    selectors: ['header h1']\n  },\n\n  author: {\n    selectors: ['a.article-byline.tracked-offpage']\n  },\n\n  date_published: {\n    timezone: 'America/New_York',\n\n    selectors: ['time.article-published-date']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.article-body-inner'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.module-related']\n  }\n};\n\nvar WwwRollingstoneComExtractor = {\n  domain: 'www.rollingstone.com',\n\n  title: {\n    selectors: ['h1.content-title']\n  },\n\n  author: {\n    selectors: ['a.content-author.tracked-offpage']\n  },\n\n  date_published: {\n    selectors: ['time.content-published-date'],\n\n    timezone: 'America/New_York'\n  },\n\n  dek: {\n    selectors: ['.content-description']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['.lead-container', '.article-content'], '.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.module-related']\n  }\n};\n\nvar twofortysevensportsComExtractor = {\n  domain: '247sports.com',\n\n  title: {\n    selectors: ['title', 'article header h1']\n  },\n\n  author: {\n    selectors: ['.author']\n  },\n\n  date_published: {\n    selectors: [['time[data-published]', 'data-published']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['section.body.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar UproxxComExtractor = {\n  domain: 'uproxx.com',\n\n  title: {\n    selectors: ['div.post-top h1']\n  },\n\n  author: {\n    selectors: ['.post-top .authorname']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.post-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.image': 'figure',\n      'div.image .wp-media-credit': 'figcaption'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwEonlineComExtractor = {\n  domain: 'www.eonline.com',\n\n  title: {\n    selectors: ['h1.article__title']\n  },\n\n  author: {\n    selectors: ['.entry-meta__author a']\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['.post-content section, .post-content div.post-content__image']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.post-content__image': 'figure',\n      'div.post-content__image .image__credits': 'figcaption'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwMiamiheraldComExtractor = {\n  domain: 'www.miamiherald.com',\n\n  title: {\n    selectors: ['h1.title']\n  },\n\n  date_published: {\n    selectors: ['p.published-date'],\n\n    timezone: 'America/New_York'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.dateline-storybody'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwRefinery29ComExtractor = {\n  domain: 'www.refinery29.com',\n\n  title: {\n    selectors: ['h1.title']\n  },\n\n  author: {\n    selectors: ['.contributor']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"sailthru.date\"]', 'value']],\n\n    timezone: 'America/New_York'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['.full-width-opener', '.article-content'], '.article-content', '.body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div.loading noscript': function divLoadingNoscript($node) {\n        var imgHtml = $node.html();\n        $node.parents('.loading').replaceWith(imgHtml);\n      },\n\n      '.section-image': 'figure',\n\n      '.section-image .content-caption': 'figcaption',\n\n      '.section-text': 'p'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.story-share']\n  }\n};\n\nvar WwwMacrumorsComExtractor = {\n  domain: 'www.macrumors.com',\n\n  title: {\n    selectors: ['h1', 'h1.title']\n  },\n\n  author: {\n    selectors: ['.author-url']\n  },\n\n  date_published: {\n    selectors: ['.article .byline'],\n\n    // Wednesday January 18, 2017 11:44 am PST\n    format: 'dddd MMMM D, YYYY h:mm A zz',\n\n    timezone: 'America/Los_Angeles'\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwAndroidcentralComExtractor = {\n  domain: 'www.androidcentral.com',\n\n  title: {\n    selectors: ['h1', 'h1.main-title']\n  },\n\n  author: {\n    selectors: ['.meta-by']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['.image-large', 'src']]\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.intro', 'blockquote']\n  }\n};\n\nvar WwwSiComExtractor = {\n  domain: 'www.si.com',\n\n  title: {\n    selectors: ['h1', 'h1.headline']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: ['.timestamp'],\n\n    timezone: 'America/New_York'\n  },\n\n  dek: {\n    selectors: ['.quick-hit ul']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['p', '.marquee_large_2x', '.component.image']],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n\n      noscript: function noscript($node) {\n        var $children = $node.children();\n        if ($children.length === 1 && $children.get(0).tagName === 'img') {\n          return 'figure';\n        }\n\n        return null;\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: [['.inline-thumb', '.primary-message', '.description', '.instructions']]\n  }\n};\n\nvar WwwRawstoryComExtractor = {\n  domain: 'www.rawstory.com',\n\n  title: {\n    selectors: ['.blog-title']\n  },\n\n  author: {\n    selectors: ['.blog-author a:first-of-type']\n  },\n\n  date_published: {\n    selectors: ['.blog-author a:last-of-type'],\n\n    timezone: 'EST'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.blog-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwCnetComExtractor = {\n  domain: 'www.cnet.com',\n\n  title: {\n    selectors: [['meta[name=\"og:title\"]', 'value']]\n  },\n\n  author: {\n    selectors: ['a.author']\n  },\n\n  date_published: {\n    selectors: ['time'],\n\n    timezone: 'America/Los_Angeles'\n  },\n\n  dek: {\n    selectors: ['.article-dek']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['img.__image-lead__', '.article-main-body'], '.article-main-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'figure.image': function figureImage($node) {\n        var $img = $node.find('img');\n        $img.attr('width', '100%');\n        $img.attr('height', '100%');\n        $img.addClass('__image-lead__');\n        $node.remove('.imgContainer').prepend($img);\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwCinemablendComExtractor = {\n  domain: 'www.cinemablend.com',\n\n  title: {\n    selectors: ['.story_title']\n  },\n\n  author: {\n    selectors: ['.author']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']],\n\n    timezone: 'EST'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div#wrap_left_content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwTodayComExtractor = {\n  domain: 'www.today.com',\n\n  title: {\n    selectors: ['h1.entry-headline']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.entry-container'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.label-comment']\n  }\n};\n\nvar WwwHowtogeekComExtractor = {\n  domain: 'www.howtogeek.com',\n\n  title: {\n    selectors: ['title']\n  },\n\n  author: {\n    selectors: ['#authorinfobox a']\n  },\n\n  date_published: {\n    selectors: ['#authorinfobox + div li'],\n    timezone: 'GMT'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.thecontent'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwAlComExtractor = {\n  domain: 'www.al.com',\n\n  title: {\n    selectors: [['meta[name=\"title\"]', 'value']]\n  },\n\n  author: {\n    selectors: [['meta[name=\"article_author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article_date_original\"]', 'value']],\n    timezone: 'EST'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwThepennyhoarderComExtractor = {\n  domain: 'www.thepennyhoarder.com',\n\n  title: {\n    selectors: [['meta[name=\"dcterms.title\"]', 'value']]\n  },\n\n  author: {\n    selectors: [['link[rel=\"author\"]', 'title']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['.post-img', '.post-text'], '.post-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwWesternjournalismComExtractor = {\n  domain: 'www.westernjournalism.com',\n\n  title: {\n    selectors: ['title', 'h1.entry-title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"DC.date.issued\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['.subtitle']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.article-sharing.top + div'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.ad-notice-small']\n  }\n};\n\nvar FusionNetExtractor = {\n  domain: 'fusion.net',\n\n  title: {\n    selectors: ['.post-title', '.single-title', '.headline']\n  },\n\n  author: {\n    selectors: ['.show-for-medium .byline']\n  },\n\n  date_published: {\n    selectors: [['time.local-time', 'datetime']]\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['.post-featured-media', '.article-content'], '.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      '.fusion-youtube-oembed': 'figure'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwAmericanowComExtractor = {\n  domain: 'www.americanow.com',\n\n  title: {\n    selectors: ['.title', ['meta[name=\"title\"]', 'value']]\n  },\n\n  author: {\n    selectors: ['.byline']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"publish_date\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['.article-content', '.image', '.body'], '.body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.article-video-wrapper', '.show-for-small-only']\n  }\n};\n\nvar ScienceflyComExtractor = {\n  domain: 'sciencefly.com',\n\n  title: {\n    selectors: ['.entry-title', '.cb-entry-title', '.cb-single-title']\n  },\n\n  author: {\n    selectors: ['div.cb-author', 'div.cb-author-title']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['div.theiaPostSlider_slides img', 'src']]\n  },\n\n  content: {\n    selectors: ['div.theiaPostSlider_slides'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar HellogigglesComExtractor = {\n  domain: 'hellogiggles.com',\n\n  title: {\n    selectors: ['.title']\n  },\n\n  author: {\n    selectors: ['.author-link']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar ThoughtcatalogComExtractor = {\n  domain: 'thoughtcatalog.com',\n\n  title: {\n    selectors: ['h1.title', ['meta[name=\"og:title\"]', 'value']]\n  },\n\n  author: {\n    selectors: ['div.col-xs-12.article_header div.writer-container.writer-container-inline.writer-no-avatar h4.writer-name', 'h1.writer-name']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.entry.post'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.tc_mark']\n  }\n};\n\nvar WwwNjComExtractor = {\n  domain: 'www.nj.com',\n\n  title: {\n    selectors: [['meta[name=\"title\"]', 'value']]\n  },\n\n  author: {\n    selectors: [['meta[name=\"article_author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article_date_original\"]', 'value']],\n\n    timezone: 'America/New_York'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwInquisitrComExtractor = {\n  domain: 'www.inquisitr.com',\n\n  title: {\n    selectors: ['h1.entry-title.story--header--title']\n  },\n\n  author: {\n    selectors: ['div.story--header--author']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"datePublished\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['article.story', '.entry-content.'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.post-category', '.story--header--socials', '.story--header--content']\n  }\n};\n\nvar WwwNbcnewsComExtractor = {\n  domain: 'www.nbcnews.com',\n\n  title: {\n    selectors: ['div.article-hed h1']\n  },\n\n  author: {\n    selectors: ['span.byline_author']\n  },\n\n  date_published: {\n    selectors: [['.flag_article-wrapper time.timestamp_article[datetime]', 'datetime'], '.flag_article-wrapper time'],\n\n    timezone: 'America/New_York'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['div.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar FortuneComExtractor = {\n  domain: 'fortune.com',\n\n  title: {\n    selectors: ['h1']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  date_published: {\n    selectors: ['.MblGHNMJ'],\n\n    timezone: 'UTC'\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['picture', 'article.row'], 'article.row'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwLinkedinComExtractor = {\n  domain: 'www.linkedin.com',\n\n  title: {\n    selectors: ['.article-title', 'h1']\n  },\n\n  author: {\n    selectors: [['meta[name=\"article:author\"]', 'value'], '.entity-name a[rel=author]']\n  },\n\n  date_published: {\n    selectors: [['time[itemprop=\"datePublished\"]', 'datetime']],\n\n    timezone: 'America/Los_Angeles'\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: [['header figure', '.prose'], '.prose'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.entity-image']\n  }\n};\n\nvar ObamawhitehouseArchivesGovExtractor = {\n  domain: 'obamawhitehouse.archives.gov',\n\n  supportedDomains: ['whitehouse.gov'],\n\n  title: {\n    selectors: ['h1', '.pane-node-title']\n  },\n\n  author: {\n    selectors: ['.blog-author-link', '.node-person-name-link']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  dek: {\n    selectors: ['.field-name-field-forall-summary']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.pane-node-field-forall-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  }\n};\n\nvar WwwOpposingviewsComExtractor = {\n  domain: 'www.opposingviews.com',\n\n  title: {\n    selectors: ['h1.title']\n  },\n\n  author: {\n    selectors: ['div.date span span a']\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"publish_date\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.article-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.show-for-small-only']\n  }\n};\n\n\n\nvar CustomExtractors = Object.freeze({\n\tBloggerExtractor: BloggerExtractor,\n\tNYMagExtractor: NYMagExtractor,\n\tWikipediaExtractor: WikipediaExtractor,\n\tTwitterExtractor: TwitterExtractor,\n\tNYTimesExtractor: NYTimesExtractor,\n\tTheAtlanticExtractor: TheAtlanticExtractor,\n\tNewYorkerExtractor: NewYorkerExtractor,\n\tWiredExtractor: WiredExtractor,\n\tMSNExtractor: MSNExtractor,\n\tYahooExtractor: YahooExtractor,\n\tBuzzfeedExtractor: BuzzfeedExtractor,\n\tWikiaExtractor: WikiaExtractor,\n\tLittleThingsExtractor: LittleThingsExtractor,\n\tPoliticoExtractor: PoliticoExtractor,\n\tDeadspinExtractor: DeadspinExtractor,\n\tBroadwayWorldExtractor: BroadwayWorldExtractor,\n\tApartmentTherapyExtractor: ApartmentTherapyExtractor,\n\tMediumExtractor: MediumExtractor,\n\tWwwTmzComExtractor: WwwTmzComExtractor,\n\tWwwWashingtonpostComExtractor: WwwWashingtonpostComExtractor,\n\tWwwHuffingtonpostComExtractor: WwwHuffingtonpostComExtractor,\n\tNewrepublicComExtractor: NewrepublicComExtractor,\n\tMoneyCnnComExtractor: MoneyCnnComExtractor,\n\tWwwThevergeComExtractor: WwwThevergeComExtractor,\n\tWwwCnnComExtractor: WwwCnnComExtractor,\n\tWwwAolComExtractor: WwwAolComExtractor,\n\tWwwYoutubeComExtractor: WwwYoutubeComExtractor,\n\tWwwTheguardianComExtractor: WwwTheguardianComExtractor,\n\tWwwSbnationComExtractor: WwwSbnationComExtractor,\n\tWwwBloombergComExtractor: WwwBloombergComExtractor,\n\tWwwBustleComExtractor: WwwBustleComExtractor,\n\tWwwNprOrgExtractor: WwwNprOrgExtractor,\n\tWwwRecodeNetExtractor: WwwRecodeNetExtractor,\n\tQzComExtractor: QzComExtractor,\n\tWwwDmagazineComExtractor: WwwDmagazineComExtractor,\n\tWwwReutersComExtractor: WwwReutersComExtractor,\n\tMashableComExtractor: MashableComExtractor,\n\tWwwChicagotribuneComExtractor: WwwChicagotribuneComExtractor,\n\tWwwVoxComExtractor: WwwVoxComExtractor,\n\tNewsNationalgeographicComExtractor: NewsNationalgeographicComExtractor,\n\tWwwNationalgeographicComExtractor: WwwNationalgeographicComExtractor,\n\tWwwLatimesComExtractor: WwwLatimesComExtractor,\n\tPagesixComExtractor: PagesixComExtractor,\n\tThefederalistpapersOrgExtractor: ThefederalistpapersOrgExtractor,\n\tWwwCbssportsComExtractor: WwwCbssportsComExtractor,\n\tWwwMsnbcComExtractor: WwwMsnbcComExtractor,\n\tWwwThepoliticalinsiderComExtractor: WwwThepoliticalinsiderComExtractor,\n\tWwwMentalflossComExtractor: WwwMentalflossComExtractor,\n\tAbcnewsGoComExtractor: AbcnewsGoComExtractor,\n\tWwwNydailynewsComExtractor: WwwNydailynewsComExtractor,\n\tWwwCnbcComExtractor: WwwCnbcComExtractor,\n\tWwwPopsugarComExtractor: WwwPopsugarComExtractor,\n\tObserverComExtractor: ObserverComExtractor,\n\tPeopleComExtractor: PeopleComExtractor,\n\tWwwUsmagazineComExtractor: WwwUsmagazineComExtractor,\n\tWwwRollingstoneComExtractor: WwwRollingstoneComExtractor,\n\ttwofortysevensportsComExtractor: twofortysevensportsComExtractor,\n\tUproxxComExtractor: UproxxComExtractor,\n\tWwwEonlineComExtractor: WwwEonlineComExtractor,\n\tWwwMiamiheraldComExtractor: WwwMiamiheraldComExtractor,\n\tWwwRefinery29ComExtractor: WwwRefinery29ComExtractor,\n\tWwwMacrumorsComExtractor: WwwMacrumorsComExtractor,\n\tWwwAndroidcentralComExtractor: WwwAndroidcentralComExtractor,\n\tWwwSiComExtractor: WwwSiComExtractor,\n\tWwwRawstoryComExtractor: WwwRawstoryComExtractor,\n\tWwwCnetComExtractor: WwwCnetComExtractor,\n\tWwwCinemablendComExtractor: WwwCinemablendComExtractor,\n\tWwwTodayComExtractor: WwwTodayComExtractor,\n\tWwwHowtogeekComExtractor: WwwHowtogeekComExtractor,\n\tWwwAlComExtractor: WwwAlComExtractor,\n\tWwwThepennyhoarderComExtractor: WwwThepennyhoarderComExtractor,\n\tWwwWesternjournalismComExtractor: WwwWesternjournalismComExtractor,\n\tFusionNetExtractor: FusionNetExtractor,\n\tWwwAmericanowComExtractor: WwwAmericanowComExtractor,\n\tScienceflyComExtractor: ScienceflyComExtractor,\n\tHellogigglesComExtractor: HellogigglesComExtractor,\n\tThoughtcatalogComExtractor: ThoughtcatalogComExtractor,\n\tWwwNjComExtractor: WwwNjComExtractor,\n\tWwwInquisitrComExtractor: WwwInquisitrComExtractor,\n\tWwwNbcnewsComExtractor: WwwNbcnewsComExtractor,\n\tFortuneComExtractor: FortuneComExtractor,\n\tWwwLinkedinComExtractor: WwwLinkedinComExtractor,\n\tObamawhitehouseArchivesGovExtractor: ObamawhitehouseArchivesGovExtractor,\n\tWwwOpposingviewsComExtractor: WwwOpposingviewsComExtractor\n});\n\nvar Extractors = _Object$keys(CustomExtractors).reduce(function (acc, key) {\n  var extractor = CustomExtractors[key];\n  return _extends({}, acc, mergeSupportedDomains(extractor));\n}, {});\n\n// CLEAN AUTHOR CONSTANTS\nvar CLEAN_AUTHOR_RE = /^\\s*(posted |written )?by\\s*:?\\s*(.*)/i;\n//     author = re.sub(r'^\\s*(posted |written )?by\\s*:?\\s*(.*)(?i)',\n\n// CLEAN DEK CONSTANTS\nvar TEXT_LINK_RE = new RegExp('http(s)?://', 'i');\n// An ordered list of meta tag names that denote likely article deks.\n// From most distinct to least distinct.\n//\n// NOTE: There are currently no meta tags that seem to provide the right\n// content consistenty enough. Two options were:\n//  - og:description\n//  - dc.description\n// However, these tags often have SEO-specific junk in them that's not\n// header-worthy like a dek is. Excerpt material at best.\n\n\n// An ordered list of Selectors to find likely article deks. From\n// most explicit to least explicit.\n//\n// Should be more restrictive than not, as a failed dek can be pretty\n// detrimental to the aesthetics of an article.\n\n\n// CLEAN DATE PUBLISHED CONSTANTS\nvar MS_DATE_STRING = /^\\d{13}$/i;\nvar SEC_DATE_STRING = /^\\d{10}$/i;\nvar CLEAN_DATE_STRING_RE = /^\\s*published\\s*:?\\s*(.*)/i;\nvar TIME_MERIDIAN_SPACE_RE = /(.*\\d)(am|pm)(.*)/i;\nvar TIME_MERIDIAN_DOTS_RE = /\\.m\\./i;\nvar months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\nvar allMonths = months.join('|');\nvar timestamp1 = '[0-9]{1,2}:[0-9]{2,2}( ?[ap].?m.?)?';\nvar timestamp2 = '[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2,4}';\nvar timestamp3 = '-[0-9]{3,4}$';\nvar SPLIT_DATE_STRING = new RegExp('(' + timestamp1 + ')|(' + timestamp2 + ')|(' + timestamp3 + ')|([0-9]{1,4})|(' + allMonths + ')', 'ig');\n\n// 2016-11-22T08:57-500\n// Check if datetime string has an offset at the end\nvar TIME_WITH_OFFSET_RE = /-\\d{3,4}$/;\n\n// CLEAN TITLE CONSTANTS\n// A regular expression that will match separating characters on a\n// title, that usually denote breadcrumbs or something similar.\nvar TITLE_SPLITTERS_RE = /(: | - | \\| )/g;\n\nvar DOMAIN_ENDINGS_RE = new RegExp('.com$|.net$|.org$|.co.uk$', 'g');\n\n// Take an author string (like 'By David Smith ') and clean it to\n// just the name(s): 'David Smith'.\nfunction cleanAuthor(author) {\n  return normalizeSpaces(author.replace(CLEAN_AUTHOR_RE, '$2').trim());\n}\n\nfunction clean$1(leadImageUrl) {\n  leadImageUrl = leadImageUrl.trim();\n  if (validUrl.isWebUri(leadImageUrl)) {\n    return leadImageUrl;\n  }\n\n  return null;\n}\n\n// Take a dek HTML fragment, and return the cleaned version of it.\n// Return None if the dek wasn't good enough.\nfunction cleanDek(dek, _ref) {\n  var $ = _ref.$,\n      excerpt = _ref.excerpt;\n\n  // Sanity check that we didn't get too short or long of a dek.\n  if (dek.length > 1000 || dek.length < 5) return null;\n\n  // Check that dek isn't the same as excerpt\n  if (excerpt && excerptContent(excerpt, 10) === excerptContent(dek, 10)) return null;\n\n  var dekText = stripTags(dek, $);\n\n  // Plain text links shouldn't exist in the dek. If we have some, it's\n  // not a good dek - bail.\n  if (TEXT_LINK_RE.test(dekText)) return null;\n\n  return normalizeSpaces(dekText.trim());\n}\n\n// Is there a compelling reason to use moment here?\n// Mostly only being used for the isValid() method,\n// but could just check for 'Invalid Date' string.\n\nfunction cleanDateString(dateString) {\n  return (dateString.match(SPLIT_DATE_STRING) || []).join(' ').replace(TIME_MERIDIAN_DOTS_RE, 'm').replace(TIME_MERIDIAN_SPACE_RE, '$1 $2 $3').replace(CLEAN_DATE_STRING_RE, '$1').trim();\n}\n\nfunction createDate(dateString, timezone, format) {\n  if (TIME_WITH_OFFSET_RE.test(dateString)) {\n    return moment(new Date(dateString));\n  }\n\n  return timezone ? moment.tz(dateString, format || parseFormat(dateString), timezone) : moment(dateString, format || parseFormat(dateString));\n}\n\n// Take a date published string, and hopefully return a date out of\n// it. Return none if we fail.\nfunction cleanDatePublished(dateString) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      timezone = _ref.timezone,\n      format = _ref.format;\n\n  // If string is in milliseconds or seconds, convert to int and return\n  if (MS_DATE_STRING.test(dateString) || SEC_DATE_STRING.test(dateString)) {\n    return new Date(parseInt(dateString, 10)).toISOString();\n  }\n\n  var date = createDate(dateString, timezone, format);\n\n  if (!date.isValid()) {\n    dateString = cleanDateString(dateString);\n    date = createDate(dateString, timezone, format);\n  }\n\n  return date.isValid() ? date.toISOString() : null;\n}\n\n// Clean our article content, returning a new, cleaned node.\nfunction extractCleanNode(article, _ref) {\n  var $ = _ref.$,\n      _ref$cleanConditional = _ref.cleanConditionally,\n      cleanConditionally = _ref$cleanConditional === undefined ? true : _ref$cleanConditional,\n      _ref$title = _ref.title,\n      title = _ref$title === undefined ? '' : _ref$title,\n      _ref$url = _ref.url,\n      url = _ref$url === undefined ? '' : _ref$url,\n      _ref$defaultCleaner = _ref.defaultCleaner,\n      defaultCleaner = _ref$defaultCleaner === undefined ? true : _ref$defaultCleaner;\n\n  // Rewrite the tag name to div if it's a top level node like body or\n  // html to avoid later complications with multiple body tags.\n  rewriteTopLevel$$1(article, $);\n\n  // Drop small images and spacer images\n  // Only do this is defaultCleaner is set to true;\n  // this can sometimes be too aggressive.\n  if (defaultCleaner) cleanImages(article, $);\n\n  // Mark elements to keep that would normally be removed.\n  // E.g., stripJunkTags will remove iframes, so we're going to mark\n  // YouTube/Vimeo videos as elements we want to keep.\n  markToKeep(article, $, url);\n\n  // Drop certain tags like <title>, etc\n  // This is -mostly- for cleanliness, not security.\n  stripJunkTags(article, $);\n\n  // H1 tags are typically the article title, which should be extracted\n  // by the title extractor instead. If there's less than 3 of them (<3),\n  // strip them. Otherwise, turn 'em into H2s.\n  cleanHOnes$$1(article, $);\n\n  // Clean headers\n  cleanHeaders(article, $, title);\n\n  // Make links absolute\n  makeLinksAbsolute$$1(article, $, url);\n\n  // We used to clean UL's and OL's here, but it was leading to\n  // too many in-article lists being removed. Consider a better\n  // way to detect menus particularly and remove them.\n  // Also optionally running, since it can be overly aggressive.\n  if (defaultCleaner) cleanTags$$1(article, $, cleanConditionally);\n\n  // Remove empty paragraph nodes\n  removeEmpty(article, $);\n\n  // Remove unnecessary attributes\n  cleanAttributes$$1(article, $);\n\n  return article;\n}\n\nfunction cleanTitle$$1(title, _ref) {\n  var url = _ref.url,\n      $ = _ref.$;\n\n  // If title has |, :, or - in it, see if\n  // we can clean it up.\n  if (TITLE_SPLITTERS_RE.test(title)) {\n    title = resolveSplitTitle(title, url);\n  }\n\n  // Final sanity check that we didn't get a crazy title.\n  // if (title.length > 150 || title.length < 15) {\n  if (title.length > 150) {\n    // If we did, return h1 from the document if it exists\n    var h1 = $('h1');\n    if (h1.length === 1) {\n      title = h1.text();\n    }\n  }\n\n  // strip any html tags in the title text\n  return normalizeSpaces(stripTags(title, $).trim());\n}\n\nfunction extractBreadcrumbTitle(splitTitle, text) {\n  // This must be a very breadcrumbed title, like:\n  // The Best Gadgets on Earth : Bits : Blogs : NYTimes.com\n  // NYTimes - Blogs - Bits - The Best Gadgets on Earth\n  if (splitTitle.length >= 6) {\n    var _ret = function () {\n      // Look to see if we can find a breadcrumb splitter that happens\n      // more than once. If we can, we'll be able to better pull out\n      // the title.\n      var termCounts = splitTitle.reduce(function (acc, titleText) {\n        acc[titleText] = acc[titleText] ? acc[titleText] + 1 : 1;\n        return acc;\n      }, {});\n\n      var _Reflect$ownKeys$redu = _Reflect$ownKeys(termCounts).reduce(function (acc, key) {\n        if (acc[1] < termCounts[key]) {\n          return [key, termCounts[key]];\n        }\n\n        return acc;\n      }, [0, 0]),\n          _Reflect$ownKeys$redu2 = _slicedToArray(_Reflect$ownKeys$redu, 2),\n          maxTerm = _Reflect$ownKeys$redu2[0],\n          termCount = _Reflect$ownKeys$redu2[1];\n\n      // We found a splitter that was used more than once, so it\n      // is probably the breadcrumber. Split our title on that instead.\n      // Note: max_term should be <= 4 characters, so that \" >> \"\n      // will match, but nothing longer than that.\n\n\n      if (termCount >= 2 && maxTerm.length <= 4) {\n        splitTitle = text.split(maxTerm);\n      }\n\n      var splitEnds = [splitTitle[0], splitTitle.slice(-1)];\n      var longestEnd = splitEnds.reduce(function (acc, end) {\n        return acc.length > end.length ? acc : end;\n      }, '');\n\n      if (longestEnd.length > 10) {\n        return {\n          v: longestEnd\n        };\n      }\n\n      return {\n        v: text\n      };\n    }();\n\n    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n  }\n\n  return null;\n}\n\nfunction cleanDomainFromTitle(splitTitle, url) {\n  // Search the ends of the title, looking for bits that fuzzy match\n  // the URL too closely. If one is found, discard it and return the\n  // rest.\n  //\n  // Strip out the big TLDs - it just makes the matching a bit more\n  // accurate. Not the end of the world if it doesn't strip right.\n  var _URL$parse = URL.parse(url),\n      host = _URL$parse.host;\n\n  var nakedDomain = host.replace(DOMAIN_ENDINGS_RE, '');\n\n  var startSlug = splitTitle[0].toLowerCase().replace(' ', '');\n  var startSlugRatio = wuzzy.levenshtein(startSlug, nakedDomain);\n\n  if (startSlugRatio > 0.4 && startSlug.length > 5) {\n    return splitTitle.slice(2).join('');\n  }\n\n  var endSlug = splitTitle.slice(-1)[0].toLowerCase().replace(' ', '');\n  var endSlugRatio = wuzzy.levenshtein(endSlug, nakedDomain);\n\n  if (endSlugRatio > 0.4 && endSlug.length >= 5) {\n    return splitTitle.slice(0, -2).join('');\n  }\n\n  return null;\n}\n\n// Given a title with separators in it (colons, dashes, etc),\n// resolve whether any of the segments should be removed.\nfunction resolveSplitTitle(title) {\n  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  // Splits while preserving splitters, like:\n  // ['The New New York', ' - ', 'The Washington Post']\n  var splitTitle = title.split(TITLE_SPLITTERS_RE);\n  if (splitTitle.length === 1) {\n    return title;\n  }\n\n  var newTitle = extractBreadcrumbTitle(splitTitle, title);\n  if (newTitle) return newTitle;\n\n  newTitle = cleanDomainFromTitle(splitTitle, url);\n  if (newTitle) return newTitle;\n\n  // Fuzzy ratio didn't find anything, so this title is probably legit.\n  // Just return it all.\n  return title;\n}\n\nvar Cleaners = {\n  author: cleanAuthor,\n  lead_image_url: clean$1,\n  dek: cleanDek,\n  date_published: cleanDatePublished,\n  content: extractCleanNode,\n  title: cleanTitle$$1\n};\n\n// Using a variety of scoring techniques, extract the content most\n// likely to be article text.\n//\n// If strip_unlikely_candidates is True, remove any elements that\n// match certain criteria first. (Like, does this element have a\n// classname of \"comment\")\n//\n// If weight_nodes is True, use classNames and IDs to determine the\n// worthiness of nodes.\n//\n// Returns a cheerio object $\nfunction extractBestNode($, opts) {\n  // clone the node so we can get back to our\n  // initial parsed state if needed\n  // TODO Do I need this? – AP\n  // let $root = $.root().clone()\n\n  if (opts.stripUnlikelyCandidates) {\n    $ = stripUnlikelyCandidates($);\n  }\n\n  $ = convertToParagraphs$$1($);\n  $ = scoreContent$$1($, opts.weightNodes);\n  var $topCandidate = findTopCandidate$$1($);\n\n  return $topCandidate;\n}\n\nvar GenericContentExtractor = {\n  defaultOpts: {\n    stripUnlikelyCandidates: true,\n    weightNodes: true,\n    cleanConditionally: true\n  },\n\n  // Extract the content for this resource - initially, pass in our\n  // most restrictive opts which will return the highest quality\n  // content. On each failure, retry with slightly more lax opts.\n  //\n  // :param return_type: string. If \"node\", should return the content\n  // as a cheerio node rather than as an HTML string.\n  //\n  // Opts:\n  // stripUnlikelyCandidates: Remove any elements that match\n  // non-article-like criteria first.(Like, does this element\n  //   have a classname of \"comment\")\n  //\n  // weightNodes: Modify an elements score based on whether it has\n  // certain classNames or IDs. Examples: Subtract if a node has\n  // a className of 'comment', Add if a node has an ID of\n  // 'entry-content'.\n  //\n  // cleanConditionally: Clean the node to return of some\n  // superfluous content. Things like forms, ads, etc.\n  extract: function extract(_ref, opts) {\n    var $ = _ref.$,\n        html = _ref.html,\n        title = _ref.title,\n        url = _ref.url;\n\n    opts = _extends({}, this.defaultOpts, opts);\n\n    $ = $ || cheerio.load(html);\n\n    // Cascade through our extraction-specific opts in an ordered fashion,\n    // turning them off as we try to extract content.\n    var node = this.getContentNode($, title, url, opts);\n\n    if (nodeIsSufficient(node)) {\n      return this.cleanAndReturnNode(node, $);\n    }\n\n    // We didn't succeed on first pass, one by one disable our\n    // extraction opts and try again.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(_Reflect$ownKeys(opts).filter(function (k) {\n        return opts[k] === true;\n      })), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var key = _step.value;\n\n        opts[key] = false;\n        $ = cheerio.load(html);\n\n        node = this.getContentNode($, title, url, opts);\n\n        if (nodeIsSufficient(node)) {\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return this.cleanAndReturnNode(node, $);\n  },\n\n\n  // Get node given current options\n  getContentNode: function getContentNode($, title, url, opts) {\n    return extractCleanNode(extractBestNode($, opts), {\n      $: $,\n      cleanConditionally: opts.cleanConditionally,\n      title: title,\n      url: url\n    });\n  },\n\n\n  // Once we got here, either we're at our last-resort node, or\n  // we broke early. Make sure we at least have -something- before we\n  // move forward.\n  cleanAndReturnNode: function cleanAndReturnNode(node, $) {\n    if (!node) {\n      return null;\n    }\n\n    return normalizeSpaces($.html(node));\n\n    // if return_type == \"html\":\n    //     return normalize_spaces(node_to_html(node))\n    // else:\n    //     return node\n  }\n};\n\n// TODO: It would be great if we could merge the meta and selector lists into\n// a list of objects, because we could then rank them better. For example,\n// .hentry .entry-title is far better suited than <meta title>.\n\n// An ordered list of meta tag names that denote likely article titles. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\nvar STRONG_TITLE_META_TAGS = ['tweetmeme-title', 'dc.title', 'rbtitle', 'headline', 'title'];\n\n// og:title is weak because it typically contains context that we don't like,\n// for example the source site's name. Gotta get that brand into facebook!\nvar WEAK_TITLE_META_TAGS = ['og:title'];\n\n// An ordered list of XPath Selectors to find likely article titles. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nvar STRONG_TITLE_SELECTORS = ['.hentry .entry-title', 'h1#articleHeader', 'h1.articleHeader', 'h1.article', '.instapaper_title', '#meebo-title'];\n\nvar WEAK_TITLE_SELECTORS = ['article h1', '#entry-title', '.entry-title', '#entryTitle', '#entrytitle', '.entryTitle', '.entrytitle', '#articleTitle', '.articleTitle', 'post post-title', 'h1.title', 'h2.article', 'h1', 'html head title', 'title'];\n\nvar GenericTitleExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        metaCache = _ref.metaCache;\n\n    // First, check to see if we have a matching meta tag that we can make\n    // use of that is strongly associated with the headline.\n    var title = void 0;\n\n    title = extractFromMeta$$1($, STRONG_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // Second, look through our content selectors for the most likely\n    // article title that is strongly associated with the headline.\n    title = extractFromSelectors$$1($, STRONG_TITLE_SELECTORS);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // Third, check for weaker meta tags that may match.\n    title = extractFromMeta$$1($, WEAK_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // Last, look for weaker selector tags that may match.\n    title = extractFromSelectors$$1($, WEAK_TITLE_SELECTORS);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // If no matches, return an empty string\n    return '';\n  }\n};\n\n// An ordered list of meta tag names that denote likely article authors. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\n//\n// Note: \"author\" is too often the -developer- of the page, so it is not\n// added here.\nvar AUTHOR_META_TAGS = ['byl', 'clmst', 'dc.author', 'dcsext.author', 'dc.creator', 'rbauthors', 'authors'];\n\nvar AUTHOR_MAX_LENGTH = 300;\n\n// An ordered list of XPath Selectors to find likely article authors. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nvar AUTHOR_SELECTORS = ['.entry .entry-author', '.author.vcard .fn', '.author .vcard .fn', '.byline.vcard .fn', '.byline .vcard .fn', '.byline .by .author', '.byline .by', '.byline .author', '.post-author.vcard', '.post-author .vcard', 'a[rel=author]', '#by_author', '.by_author', '#entryAuthor', '.entryAuthor', '.byline a[href*=author]', '#author .authorname', '.author .authorname', '#author', '.author', '.articleauthor', '.ArticleAuthor', '.byline'];\n\n// An ordered list of Selectors to find likely article authors, with\n// regular expression for content.\nvar bylineRe = /^[\\n\\s]*By/i;\nvar BYLINE_SELECTORS_RE = [['#byline', bylineRe], ['.byline', bylineRe]];\n\nvar GenericAuthorExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        metaCache = _ref.metaCache;\n\n    var author = void 0;\n\n    // First, check to see if we have a matching\n    // meta tag that we can make use of.\n    author = extractFromMeta$$1($, AUTHOR_META_TAGS, metaCache);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Second, look through our selectors looking for potential authors.\n    author = extractFromSelectors$$1($, AUTHOR_SELECTORS, 2);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Last, use our looser regular-expression based selectors for\n    // potential authors.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(BYLINE_SELECTORS_RE), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ref4 = _step.value;\n\n        var _ref3 = _slicedToArray(_ref4, 2);\n\n        var selector = _ref3[0];\n        var regex = _ref3[1];\n\n        var node = $(selector);\n        if (node.length === 1) {\n          var text = node.text();\n          if (regex.test(text)) {\n            return cleanAuthor(text);\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\n// An ordered list of meta tag names that denote\n// likely date published dates. All attributes\n// should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nvar DATE_PUBLISHED_META_TAGS = ['article:published_time', 'displaydate', 'dc.date', 'dc.date.issued', 'rbpubdate', 'publish_date', 'pub_date', 'pagedate', 'pubdate', 'revision_date', 'doc_date', 'date_created', 'content_create_date', 'lastmodified', 'created', 'date'];\n\n// An ordered list of XPath Selectors to find\n// likely date published dates. From most explicit\n// to least explicit.\nvar DATE_PUBLISHED_SELECTORS = ['.hentry .dtstamp.published', '.hentry .published', '.hentry .dtstamp.updated', '.hentry .updated', '.single .published', '.meta .published', '.meta .postDate', '.entry-date', '.byline .date', '.postmetadata .date', '.article_datetime', '.date-header', '.story-date', '.dateStamp', '#story .datetime', '.dateline', '.pubdate'];\n\n// An ordered list of compiled regular expressions to find likely date\n// published dates from the URL. These should always have the first\n// reference be a date string that is parseable by dateutil.parser.parse\nvar abbrevMonthsStr = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\nvar DATE_PUBLISHED_URL_RES = [\n// /2012/01/27/ but not /2012/01/293\nnew RegExp('/(20\\\\d{2}/\\\\d{2}/\\\\d{2})/', 'i'),\n// 20120127 or 20120127T but not 2012012733 or 8201201733\n// /[^0-9](20\\d{2}[01]\\d[0-3]\\d)([^0-9]|$)/i,\n// 2012-01-27\nnew RegExp('(20\\\\d{2}-[01]\\\\d-[0-3]\\\\d)', 'i'),\n// /2012/jan/27/\nnew RegExp('/(20\\\\d{2}/' + abbrevMonthsStr + '/[0-3]\\\\d)/', 'i')];\n\nvar GenericDatePublishedExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        metaCache = _ref.metaCache;\n\n    var datePublished = void 0;\n    // First, check to see if we have a matching meta tag\n    // that we can make use of.\n    // Don't try cleaning tags from this string\n    datePublished = extractFromMeta$$1($, DATE_PUBLISHED_META_TAGS, metaCache, false);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Second, look through our selectors looking for potential\n    // date_published's.\n    datePublished = extractFromSelectors$$1($, DATE_PUBLISHED_SELECTORS);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Lastly, look to see if a dately string exists in the URL\n    datePublished = extractFromUrl(url, DATE_PUBLISHED_URL_RES);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    return null;\n  }\n};\n\n// import {\n//   DEK_META_TAGS,\n//   DEK_SELECTORS,\n//   DEK_URL_RES,\n// } from './constants';\n\n// import { cleanDek } from 'cleaners';\n\n// import {\n//   extractFromMeta,\n//   extractFromSelectors,\n// } from 'utils/dom';\n\n// Currently there is only one selector for\n// deks. We should simply return null here\n// until we have a more robust generic option.\n// Below is the original source for this, for reference.\nvar GenericDekExtractor = {\n  // extract({ $, content, metaCache }) {\n  extract: function extract() {\n    return null;\n  }\n};\n\n\n\n// def extract_dek(self):\n//     # First, check to see if we have a matching meta tag that we can make\n//     # use of.\n//     dek = self.extract_from_meta('dek', constants.DEK_META_TAGS)\n//     if not dek:\n//         # Second, look through our CSS/XPath selectors. This may return\n//         # an HTML fragment.\n//         dek = self.extract_from_selectors('dek',\n//                                            constants.DEK_SELECTORS,\n//                                            text_only=False)\n//\n//     if dek:\n//         # Make sure our dek isn't in the first few thousand characters\n//         # of the content, otherwise it's just the start of the article\n//         # and not a true dek.\n//         content = self.extract_content()\n//         content_chunk = normalize_spaces(strip_tags(content[:2000]))\n//         dek_chunk = normalize_spaces(dek[:100]) # Already has no tags.\n//\n//         # 80% or greater similarity means the dek was very similar to some\n//         # of the starting content, so we skip it.\n//         if fuzz.partial_ratio(content_chunk, dek_chunk) < 80:\n//             return dek\n//\n//     return None\n\n// An ordered list of meta tag names that denote likely article leading images.\n// All attributes should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nvar LEAD_IMAGE_URL_META_TAGS = ['og:image', 'twitter:image', 'image_src'];\n\nvar LEAD_IMAGE_URL_SELECTORS = ['link[rel=image_src]'];\n\nvar POSITIVE_LEAD_IMAGE_URL_HINTS = ['upload', 'wp-content', 'large', 'photo', 'wp-image'];\nvar POSITIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(POSITIVE_LEAD_IMAGE_URL_HINTS.join('|'), 'i');\n\nvar NEGATIVE_LEAD_IMAGE_URL_HINTS = ['spacer', 'sprite', 'blank', 'throbber', 'gradient', 'tile', 'bg', 'background', 'icon', 'social', 'header', 'hdr', 'advert', 'spinner', 'loader', 'loading', 'default', 'rating', 'share', 'facebook', 'twitter', 'theme', 'promo', 'ads', 'wp-includes'];\nvar NEGATIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(NEGATIVE_LEAD_IMAGE_URL_HINTS.join('|'), 'i');\n\nvar GIF_RE = /\\.gif(\\?.*)?$/i;\nvar JPG_RE = /\\.jpe?g(\\?.*)?$/i;\n\nfunction getSig($node) {\n  return ($node.attr('class') || '') + ' ' + ($node.attr('id') || '');\n}\n\n// Scores image urls based on a variety of heuristics.\nfunction scoreImageUrl(url) {\n  url = url.trim();\n  var score = 0;\n\n  if (POSITIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score += 20;\n  }\n\n  if (NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score -= 20;\n  }\n\n  // TODO: We might want to consider removing this as\n  // gifs are much more common/popular than they once were\n  if (GIF_RE.test(url)) {\n    score -= 10;\n  }\n\n  if (JPG_RE.test(url)) {\n    score += 10;\n  }\n\n  // PNGs are neutral.\n\n  return score;\n}\n\n// Alt attribute usually means non-presentational image.\nfunction scoreAttr($img) {\n  if ($img.attr('alt')) {\n    return 5;\n  }\n\n  return 0;\n}\n\n// Look through our parent and grandparent for figure-like\n// container elements, give a bonus if we find them\nfunction scoreByParents($img) {\n  var score = 0;\n  var $figParent = $img.parents('figure').first();\n\n  if ($figParent.length === 1) {\n    score += 25;\n  }\n\n  var $parent = $img.parent();\n  var $gParent = void 0;\n  if ($parent.length === 1) {\n    $gParent = $parent.parent();\n  }\n\n  [$parent, $gParent].forEach(function ($node) {\n    if (PHOTO_HINTS_RE$1.test(getSig($node))) {\n      score += 15;\n    }\n  });\n\n  return score;\n}\n\n// Look at our immediate sibling and see if it looks like it's a\n// caption. Bonus if so.\nfunction scoreBySibling($img) {\n  var score = 0;\n  var $sibling = $img.next();\n  var sibling = $sibling.get(0);\n\n  if (sibling && sibling.tagName.toLowerCase() === 'figcaption') {\n    score += 25;\n  }\n\n  if (PHOTO_HINTS_RE$1.test(getSig($sibling))) {\n    score += 15;\n  }\n\n  return score;\n}\n\nfunction scoreByDimensions($img) {\n  var score = 0;\n\n  var width = parseFloat($img.attr('width'));\n  var height = parseFloat($img.attr('height'));\n  var src = $img.attr('src');\n\n  // Penalty for skinny images\n  if (width && width <= 50) {\n    score -= 50;\n  }\n\n  // Penalty for short images\n  if (height && height <= 50) {\n    score -= 50;\n  }\n\n  if (width && height && !src.includes('sprite')) {\n    var area = width * height;\n    if (area < 5000) {\n      // Smaller than 50 x 100\n      score -= 100;\n    } else {\n      score += Math.round(area / 1000);\n    }\n  }\n\n  return score;\n}\n\nfunction scoreByPosition($imgs, index) {\n  return $imgs.length / 2 - index;\n}\n\n// Given a resource, try to find the lead image URL from within\n// it. Like content and next page extraction, uses a scoring system\n// to determine what the most likely image may be. Short circuits\n// on really probable things like og:image meta tags.\n//\n// Potential signals to still take advantage of:\n//   * domain\n//   * weird aspect ratio\nvar GenericLeadImageUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        content = _ref.content,\n        metaCache = _ref.metaCache,\n        html = _ref.html;\n\n    var cleanUrl = void 0;\n    if (!$.browser && $('head').length === 0) {\n      $('*').first().prepend(html);\n    }\n\n    // Check to see if we have a matching meta tag that we can make use of.\n    // Moving this higher because common practice is now to use large\n    // images on things like Open Graph or Twitter cards.\n    // images usually have for things like Open Graph.\n    var imageUrl = extractFromMeta$$1($, LEAD_IMAGE_URL_META_TAGS, metaCache, false);\n\n    if (imageUrl) {\n      cleanUrl = clean$1(imageUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // Next, try to find the \"best\" image via the content.\n    // We'd rather not have to fetch each image and check dimensions,\n    // so try to do some analysis and determine them instead.\n    var $content = $(content);\n    var imgs = $('img', $content).toArray();\n    var imgScores = {};\n\n    imgs.forEach(function (img, index) {\n      var $img = $(img);\n      var src = $img.attr('src');\n\n      if (!src) return;\n\n      var score = scoreImageUrl(src);\n      score += scoreAttr($img);\n      score += scoreByParents($img);\n      score += scoreBySibling($img);\n      score += scoreByDimensions($img);\n      score += scoreByPosition(imgs, index);\n\n      imgScores[src] = score;\n    });\n\n    var _Reflect$ownKeys$redu = _Reflect$ownKeys(imgScores).reduce(function (acc, key) {\n      return imgScores[key] > acc[1] ? [key, imgScores[key]] : acc;\n    }, [null, 0]),\n        _Reflect$ownKeys$redu2 = _slicedToArray(_Reflect$ownKeys$redu, 2),\n        topUrl = _Reflect$ownKeys$redu2[0],\n        topScore = _Reflect$ownKeys$redu2[1];\n\n    if (topScore > 0) {\n      cleanUrl = clean$1(topUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // If nothing else worked, check to see if there are any really\n    // probable nodes in the doc, like <link rel=\"image_src\" />.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(LEAD_IMAGE_URL_SELECTORS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var selector = _step.value;\n\n        var $node = $(selector).first();\n        var src = $node.attr('src');\n        if (src) {\n          cleanUrl = clean$1(src);\n          if (cleanUrl) return cleanUrl;\n        }\n\n        var href = $node.attr('href');\n        if (href) {\n          cleanUrl = clean$1(href);\n          if (cleanUrl) return cleanUrl;\n        }\n\n        var value = $node.attr('value');\n        if (value) {\n          cleanUrl = clean$1(value);\n          if (cleanUrl) return cleanUrl;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\n\n\n// def extract(self):\n//     \"\"\"\n//     # First, try to find the \"best\" image via the content.\n//     # We'd rather not have to fetch each image and check dimensions,\n//     # so try to do some analysis and determine them instead.\n//     content = self.extractor.extract_content(return_type=\"node\")\n//     imgs = content.xpath('.//img')\n//     img_scores = defaultdict(int)\n//     logger.debug('Scoring %d images from content', len(imgs))\n//     for (i, img) in enumerate(imgs):\n//         img_score = 0\n//\n//         if not 'src' in img.attrib:\n//             logger.debug('No src attribute found')\n//             continue\n//\n//         try:\n//             parsed_img = urlparse(img.attrib['src'])\n//             img_path = parsed_img.path.lower()\n//         except ValueError:\n//             logger.debug('ValueError getting img path.')\n//             continue\n//         logger.debug('Image path is %s', img_path)\n//\n//         if constants.POSITIVE_LEAD_IMAGE_URL_HINTS_RE.match(img_path):\n//             logger.debug('Positive URL hints match. Adding 20.')\n//             img_score += 20\n//\n//         if constants.NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.match(img_path):\n//             logger.debug('Negative URL hints match. Subtracting 20.')\n//             img_score -= 20\n//\n//         # Gifs are more often structure than photos\n//         if img_path.endswith('gif'):\n//             logger.debug('gif found. Subtracting 10.')\n//             img_score -= 10\n//\n//         # JPGs are more often photographs\n//         if img_path.endswith('jpg'):\n//             logger.debug('jpg found. Adding 10.')\n//             img_score += 10\n//\n//         # PNGs are neutral.\n//\n//         # Alt attribute usually means non-presentational image.\n//         if 'alt' in img.attrib and len(img.attrib['alt']) > 5:\n//             logger.debug('alt attribute found. Adding 5.')\n//             img_score += 5\n//\n//         # Look through our parent and grandparent for figure-like\n//         # container elements, give a bonus if we find them\n//         parents = [img.getparent()]\n//         if parents[0] is not None and parents[0].getparent() is not None:\n//             parents.append(parents[0].getparent())\n//         for p in parents:\n//             if p.tag == 'figure':\n//                 logger.debug('Parent with <figure> tag found. Adding 25.')\n//                 img_score += 25\n//\n//             p_sig = ' '.join([p.get('id', ''), p.get('class', '')])\n//             if constants.PHOTO_HINTS_RE.search(p_sig):\n//                 logger.debug('Photo hints regex match. Adding 15.')\n//                 img_score += 15\n//\n//         # Look at our immediate sibling and see if it looks like it's a\n//         # caption. Bonus if so.\n//         sibling = img.getnext()\n//         if sibling is not None:\n//             if sibling.tag == 'figcaption':\n//                 img_score += 25\n//\n//             sib_sig = ' '.join([sibling.get('id', ''),\n//                                 sibling.get('class', '')]).lower()\n//             if 'caption' in sib_sig:\n//                 img_score += 15\n//\n//         # Pull out width/height if they were set.\n//         img_width = None\n//         img_height = None\n//         if 'width' in img.attrib:\n//             try:\n//                 img_width = float(img.get('width'))\n//             except ValueError:\n//                 pass\n//         if 'height' in img.attrib:\n//             try:\n//                 img_height = float(img.get('height'))\n//             except ValueError:\n//                 pass\n//\n//         # Penalty for skinny images\n//         if img_width and img_width <= 50:\n//             logger.debug('Skinny image found. Subtracting 50.')\n//             img_score -= 50\n//\n//         # Penalty for short images\n//         if img_height and img_height <= 50:\n//             # Wide, short images are more common than narrow, tall ones\n//             logger.debug('Short image found. Subtracting 25.')\n//             img_score -= 25\n//\n//         if img_width and img_height and not 'sprite' in img_path:\n//             area = img_width * img_height\n//\n//             if area < 5000: # Smaller than 50x100\n//                 logger.debug('Image with small area found. Subtracting 100.')\n//                 img_score -= 100\n//             else:\n//                 img_score += round(area/1000.0)\n//\n//         # If the image is higher on the page than other images,\n//         # it gets a bonus. Penalty if lower.\n//         logger.debug('Adding page placement bonus of %d.', len(imgs)/2 - i)\n//         img_score += len(imgs)/2 - i\n//\n//         # Use the raw src here because we munged img_path for case\n//         # insensitivity\n//         logger.debug('Final score is %d.', img_score)\n//         img_scores[img.attrib['src']] += img_score\n//\n//     top_score = 0\n//     top_url = None\n//     for (url, score) in img_scores.items():\n//         if score > top_score:\n//             top_url = url\n//             top_score = score\n//\n//     if top_score > 0:\n//         logger.debug('Using top score image from content. Score was %d', top_score)\n//         return top_url\n//\n//\n//     # If nothing else worked, check to see if there are any really\n//     # probable nodes in the doc, like <link rel=\"image_src\" />.\n//     logger.debug('Trying to find lead image in probable nodes')\n//     for selector in constants.LEAD_IMAGE_URL_SELECTORS:\n//         nodes = self.resource.extract_by_selector(selector)\n//         for node in nodes:\n//             clean_value = None\n//             if node.attrib.get('src'):\n//                 clean_value = self.clean(node.attrib['src'])\n//\n//             if not clean_value and node.attrib.get('href'):\n//                 clean_value = self.clean(node.attrib['href'])\n//\n//             if not clean_value and node.attrib.get('value'):\n//                 clean_value = self.clean(node.attrib['value'])\n//\n//             if clean_value:\n//                 logger.debug('Found lead image in probable nodes.')\n//                 logger.debug('Node was: %s', node)\n//                 return clean_value\n//\n//     return None\n\nfunction scoreSimilarity(score, articleUrl, href) {\n  // Do this last and only if we have a real candidate, because it's\n  // potentially expensive computationally. Compare the link to this\n  // URL using difflib to get the % similarity of these URLs. On a\n  // sliding scale, subtract points from this link based on\n  // similarity.\n  if (score > 0) {\n    var similarity = new difflib.SequenceMatcher(null, articleUrl, href).ratio();\n    // Subtract .1 from diff_percent when calculating modifier,\n    // which means that if it's less than 10% different, we give a\n    // bonus instead. Ex:\n    //  3% different = +17.5 points\n    // 10% different = 0 points\n    // 20% different = -25 points\n    var diffPercent = 1.0 - similarity;\n    var diffModifier = -(250 * (diffPercent - 0.2));\n    return score + diffModifier;\n  }\n\n  return 0;\n}\n\nfunction scoreLinkText(linkText, pageNum) {\n  // If the link text can be parsed as a number, give it a minor\n  // bonus, with a slight bias towards lower numbered pages. This is\n  // so that pages that might not have 'next' in their text can still\n  // get scored, and sorted properly by score.\n  var score = 0;\n\n  if (IS_DIGIT_RE.test(linkText.trim())) {\n    var linkTextAsNum = parseInt(linkText, 10);\n    // If it's the first page, we already got it on the first call.\n    // Give it a negative score. Otherwise, up to page 10, give a\n    // small bonus.\n    if (linkTextAsNum < 2) {\n      score = -30;\n    } else {\n      score = Math.max(0, 10 - linkTextAsNum);\n    }\n\n    // If it appears that the current page number is greater than\n    // this links page number, it's a very bad sign. Give it a big\n    // penalty.\n    if (pageNum && pageNum >= linkTextAsNum) {\n      score -= 50;\n    }\n  }\n\n  return score;\n}\n\nfunction scorePageInLink(pageNum, isWp) {\n  // page in the link = bonus. Intentionally ignore wordpress because\n  // their ?p=123 link style gets caught by this even though it means\n  // separate documents entirely.\n  if (pageNum && !isWp) {\n    return 50;\n  }\n\n  return 0;\n}\n\nvar DIGIT_RE$2 = /\\d/;\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nvar EXTRANEOUS_LINK_HINTS$1 = ['print', 'archive', 'comment', 'discuss', 'e-mail', 'email', 'share', 'reply', 'all', 'login', 'sign', 'single', 'adx', 'entry-unrelated'];\nvar EXTRANEOUS_LINK_HINTS_RE$1 = new RegExp(EXTRANEOUS_LINK_HINTS$1.join('|'), 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\nvar NEXT_LINK_TEXT_RE$1 = new RegExp('(next|weiter|continue|>([^|]|$)|»([^|]|$))', 'i');\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nvar CAP_LINK_TEXT_RE$1 = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nvar PREV_LINK_TEXT_RE$1 = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\n\nfunction scoreExtraneousLinks(href) {\n  // If the URL itself contains extraneous values, give a penalty.\n  if (EXTRANEOUS_LINK_HINTS_RE$1.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n\nfunction makeSig$1($link) {\n  return ($link.attr('class') || '') + ' ' + ($link.attr('id') || '');\n}\n\nfunction scoreByParents$1($link) {\n  // If a parent node contains paging-like classname or id, give a\n  // bonus. Additionally, if a parent_node contains bad content\n  // (like 'sponsor'), give a penalty.\n  var $parent = $link.parent();\n  var positiveMatch = false;\n  var negativeMatch = false;\n  var score = 0;\n\n  _Array$from(range(0, 4)).forEach(function () {\n    if ($parent.length === 0) {\n      return;\n    }\n\n    var parentData = makeSig$1($parent, ' ');\n\n    // If we have 'page' or 'paging' in our data, that's a good\n    // sign. Add a bonus.\n    if (!positiveMatch && PAGE_RE.test(parentData)) {\n      positiveMatch = true;\n      score += 25;\n    }\n\n    // If we have 'comment' or something in our data, and\n    // we don't have something like 'content' as well, that's\n    // a bad sign. Give a penalty.\n    if (!negativeMatch && NEGATIVE_SCORE_RE.test(parentData) && EXTRANEOUS_LINK_HINTS_RE$1.test(parentData)) {\n      if (!POSITIVE_SCORE_RE.test(parentData)) {\n        negativeMatch = true;\n        score -= 25;\n      }\n    }\n\n    $parent = $parent.parent();\n  });\n\n  return score;\n}\n\nfunction scorePrevLink(linkData) {\n  // If the link has something like \"previous\", its definitely\n  // an old link, skip it.\n  if (PREV_LINK_TEXT_RE$1.test(linkData)) {\n    return -200;\n  }\n\n  return 0;\n}\n\nfunction shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls) {\n  // skip if we've already fetched this url\n  if (previousUrls.find(function (url) {\n    return href === url;\n  }) !== undefined) {\n    return false;\n  }\n\n  // If we've already parsed this URL, or the URL matches the base\n  // URL, or is empty, skip it.\n  if (!href || href === articleUrl || href === baseUrl) {\n    return false;\n  }\n\n  var hostname = parsedUrl.hostname;\n\n  var _URL$parse = URL.parse(href),\n      linkHost = _URL$parse.hostname;\n\n  // Domain mismatch.\n\n\n  if (linkHost !== hostname) {\n    return false;\n  }\n\n  // If href doesn't contain a digit after removing the base URL,\n  // it's certainly not the next page.\n  var fragment = href.replace(baseUrl, '');\n  if (!DIGIT_RE$2.test(fragment)) {\n    return false;\n  }\n\n  // This link has extraneous content (like \"comment\") in its link\n  // text, so we skip it.\n  if (EXTRANEOUS_LINK_HINTS_RE$1.test(linkText)) {\n    return false;\n  }\n\n  // Next page link text is never long, skip if it is too long.\n  if (linkText.length > 25) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction scoreBaseUrl(href, baseRegex) {\n  // If the baseUrl isn't part of this URL, penalize this\n  // link. It could still be the link, but the odds are lower.\n  // Example:\n  // http://www.actionscript.org/resources/articles/745/1/JavaScript-and-VBScript-Injection-in-ActionScript-3/Page1.html\n  if (!baseRegex.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n\nfunction scoreNextLinkText(linkData) {\n  // Things like \"next\", \">>\", etc.\n  if (NEXT_LINK_TEXT_RE$1.test(linkData)) {\n    return 50;\n  }\n\n  return 0;\n}\n\nfunction scoreCapLinks(linkData) {\n  // Cap links are links like \"last\", etc.\n  if (CAP_LINK_TEXT_RE$1.test(linkData)) {\n    // If we found a link like \"last\", but we've already seen that\n    // this link is also \"next\", it's fine. If it's not been\n    // previously marked as \"next\", then it's probably bad.\n    // Penalize.\n    if (NEXT_LINK_TEXT_RE$1.test(linkData)) {\n      return -65;\n    }\n  }\n\n  return 0;\n}\n\nfunction makeBaseRegex(baseUrl) {\n  return new RegExp('^' + baseUrl, 'i');\n}\n\nfunction makeSig($link, linkText) {\n  return (linkText || $link.text()) + ' ' + ($link.attr('class') || '') + ' ' + ($link.attr('id') || '');\n}\n\nfunction scoreLinks(_ref) {\n  var links = _ref.links,\n      articleUrl = _ref.articleUrl,\n      baseUrl = _ref.baseUrl,\n      parsedUrl = _ref.parsedUrl,\n      $ = _ref.$,\n      _ref$previousUrls = _ref.previousUrls,\n      previousUrls = _ref$previousUrls === undefined ? [] : _ref$previousUrls;\n\n  parsedUrl = parsedUrl || URL.parse(articleUrl);\n  var baseRegex = makeBaseRegex(baseUrl);\n  var isWp = isWordpress($);\n\n  // Loop through all links, looking for hints that they may be next-page\n  // links. Things like having \"page\" in their textContent, className or\n  // id, or being a child of a node with a page-y className or id.\n  //\n  // After we do that, assign each page a score, and pick the one that\n  // looks most like the next page link, as long as its score is strong\n  // enough to have decent confidence.\n  var scoredPages = links.reduce(function (possiblePages, link) {\n    // Remove any anchor data since we don't do a good job\n    // standardizing URLs (it's hard), we're going to do\n    // some checking with and without a trailing slash\n    var attrs = getAttrs(link);\n\n    // if href is undefined, return\n    if (!attrs.href) return possiblePages;\n\n    var href = removeAnchor(attrs.href);\n    var $link = $(link);\n    var linkText = $link.text();\n\n    if (!shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls)) {\n      return possiblePages;\n    }\n\n    // ## PASSED THE FIRST-PASS TESTS. Start scoring. ##\n    if (!possiblePages[href]) {\n      possiblePages[href] = {\n        score: 0,\n        linkText: linkText,\n        href: href\n      };\n    } else {\n      possiblePages[href].linkText = possiblePages[href].linkText + '|' + linkText;\n    }\n\n    var possiblePage = possiblePages[href];\n    var linkData = makeSig($link, linkText);\n    var pageNum = pageNumFromUrl(href);\n\n    var score = scoreBaseUrl(href, baseRegex);\n    score += scoreNextLinkText(linkData);\n    score += scoreCapLinks(linkData);\n    score += scorePrevLink(linkData);\n    score += scoreByParents$1($link);\n    score += scoreExtraneousLinks(href);\n    score += scorePageInLink(pageNum, isWp);\n    score += scoreLinkText(linkText, pageNum);\n    score += scoreSimilarity(score, articleUrl, href);\n\n    possiblePage.score = score;\n\n    return possiblePages;\n  }, {});\n\n  return _Reflect$ownKeys(scoredPages).length === 0 ? null : scoredPages;\n}\n\n// Looks for and returns next page url\n// for multi-page articles\nvar GenericNextPageUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        parsedUrl = _ref.parsedUrl,\n        _ref$previousUrls = _ref.previousUrls,\n        previousUrls = _ref$previousUrls === undefined ? [] : _ref$previousUrls;\n\n    parsedUrl = parsedUrl || URL.parse(url);\n\n    var articleUrl = removeAnchor(url);\n    var baseUrl = articleBaseUrl(url, parsedUrl);\n\n    var links = $('a[href]').toArray();\n\n    var scoredLinks = scoreLinks({\n      links: links,\n      articleUrl: articleUrl,\n      baseUrl: baseUrl,\n      parsedUrl: parsedUrl,\n      $: $,\n      previousUrls: previousUrls\n    });\n\n    // If no links were scored, return null\n    if (!scoredLinks) return null;\n\n    // now that we've scored all possible pages,\n    // find the biggest one.\n    var topPage = _Reflect$ownKeys(scoredLinks).reduce(function (acc, link) {\n      var scoredLink = scoredLinks[link];\n      return scoredLink.score > acc.score ? scoredLink : acc;\n    }, { score: -100 });\n\n    // If the score is less than 50, we're not confident enough to use it,\n    // so we fail.\n    if (topPage.score >= 50) {\n      return topPage.href;\n    }\n\n    return null;\n  }\n};\n\nvar CANONICAL_META_SELECTORS = ['og:url'];\n\nfunction parseDomain(url) {\n  var parsedUrl = URL.parse(url);\n  var hostname = parsedUrl.hostname;\n\n  return hostname;\n}\n\nfunction result(url) {\n  return {\n    url: url,\n    domain: parseDomain(url)\n  };\n}\n\nvar GenericUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        metaCache = _ref.metaCache;\n\n    var $canonical = $('link[rel=canonical]');\n    if ($canonical.length !== 0) {\n      var href = $canonical.attr('href');\n      if (href) {\n        return result(href);\n      }\n    }\n\n    var metaUrl = extractFromMeta$$1($, CANONICAL_META_SELECTORS, metaCache);\n    if (metaUrl) {\n      return result(metaUrl);\n    }\n\n    return result(url);\n  }\n};\n\nvar EXCERPT_META_SELECTORS = ['og:description', 'twitter:description'];\n\nfunction clean$2(content, $) {\n  var maxLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n\n  content = content.replace(/[\\s\\n]+/g, ' ').trim();\n  return ellipsize(content, maxLength, { ellipse: '&hellip;' });\n}\n\nvar GenericExcerptExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        content = _ref.content,\n        metaCache = _ref.metaCache;\n\n    var excerpt = extractFromMeta$$1($, EXCERPT_META_SELECTORS, metaCache);\n    if (excerpt) {\n      return clean$2(stripTags(excerpt, $));\n    }\n    // Fall back to excerpting from the extracted content\n    var maxLength = 200;\n    var shortContent = content.slice(0, maxLength * 5);\n    return clean$2($(shortContent).text(), $, maxLength);\n  }\n};\n\nvar GenericWordCountExtractor = {\n  extract: function extract(_ref) {\n    var content = _ref.content;\n\n    var $ = cheerio.load(content);\n    var $content = $('div').first();\n\n    var text = normalizeSpaces($content.text());\n    return text.split(/\\s/).length;\n  }\n};\n\nvar GenericExtractor = {\n  // This extractor is the default for all domains\n  domain: '*',\n  title: GenericTitleExtractor.extract,\n  date_published: GenericDatePublishedExtractor.extract,\n  author: GenericAuthorExtractor.extract,\n  content: GenericContentExtractor.extract.bind(GenericContentExtractor),\n  lead_image_url: GenericLeadImageUrlExtractor.extract,\n  dek: GenericDekExtractor.extract,\n  next_page_url: GenericNextPageUrlExtractor.extract,\n  url_and_domain: GenericUrlExtractor.extract,\n  excerpt: GenericExcerptExtractor.extract,\n  word_count: GenericWordCountExtractor.extract,\n  direction: function direction(_ref) {\n    var title = _ref.title;\n    return stringDirection.getDirection(title);\n  },\n\n  extract: function extract(options) {\n    var html = options.html,\n        $ = options.$;\n\n\n    if (html && !$) {\n      var loaded = cheerio.load(html);\n      options.$ = loaded;\n    }\n\n    var title = this.title(options);\n    var date_published = this.date_published(options);\n    var author = this.author(options);\n    var content = this.content(_extends({}, options, { title: title }));\n    var lead_image_url = this.lead_image_url(_extends({}, options, { content: content }));\n    var dek = this.dek(_extends({}, options, { content: content }));\n    var next_page_url = this.next_page_url(options);\n    var excerpt = this.excerpt(_extends({}, options, { content: content }));\n    var word_count = this.word_count(_extends({}, options, { content: content }));\n    var direction = this.direction({ title: title });\n\n    var _url_and_domain = this.url_and_domain(options),\n        url = _url_and_domain.url,\n        domain = _url_and_domain.domain;\n\n    return {\n      title: title,\n      author: author,\n      date_published: date_published || null,\n      dek: dek,\n      lead_image_url: lead_image_url,\n      content: content,\n      next_page_url: next_page_url,\n      url: url,\n      domain: domain,\n      excerpt: excerpt,\n      word_count: word_count,\n      direction: direction\n    };\n  }\n};\n\nvar Detectors = {\n  'meta[name=\"al:ios:app_name\"][value=\"Medium\"]': MediumExtractor,\n  'meta[name=\"generator\"][value=\"blogger\"]': BloggerExtractor\n};\n\nfunction detectByHtml($) {\n  var selector = _Reflect$ownKeys(Detectors).find(function (s) {\n    return $(s).length > 0;\n  });\n\n  return Detectors[selector];\n}\n\nfunction getExtractor(url, parsedUrl, $) {\n  parsedUrl = parsedUrl || URL.parse(url);\n  var _parsedUrl = parsedUrl,\n      hostname = _parsedUrl.hostname;\n\n  var baseDomain = hostname.split('.').slice(-2).join('.');\n\n  return Extractors[hostname] || Extractors[baseDomain] || detectByHtml($) || GenericExtractor;\n}\n\n// Remove elements by an array of selectors\nfunction cleanBySelectors($content, $, _ref) {\n  var clean = _ref.clean;\n\n  if (!clean) return $content;\n\n  $(clean.join(','), $content).remove();\n\n  return $content;\n}\n\n// Transform matching elements\nfunction transformElements($content, $, _ref2) {\n  var transforms = _ref2.transforms;\n\n  if (!transforms) return $content;\n\n  _Reflect$ownKeys(transforms).forEach(function (key) {\n    var $matches = $(key, $content);\n    var value = transforms[key];\n\n    // If value is a string, convert directly\n    if (typeof value === 'string') {\n      $matches.each(function (index, node) {\n        convertNodeTo$$1($(node), $, transforms[key]);\n      });\n    } else if (typeof value === 'function') {\n      // If value is function, apply function to node\n      $matches.each(function (index, node) {\n        var result = value($(node), $);\n        // If function returns a string, convert node to that value\n        if (typeof result === 'string') {\n          convertNodeTo$$1($(node), $, result);\n        }\n      });\n    }\n  });\n\n  return $content;\n}\n\nfunction findMatchingSelector($, selectors, extractHtml) {\n  return selectors.find(function (selector) {\n    if (Array.isArray(selector)) {\n      if (extractHtml) {\n        return selector.reduce(function (acc, s) {\n          return acc && $(s).length > 0;\n        }, true);\n      }\n\n      var _selector = _slicedToArray(selector, 2),\n          s = _selector[0],\n          attr = _selector[1];\n\n      return $(s).length === 1 && $(s).attr(attr) && $(s).attr(attr).trim() !== '';\n    }\n\n    return $(selector).length === 1 && $(selector).text().trim() !== '';\n  });\n}\n\nfunction select(opts) {\n  var $ = opts.$,\n      type = opts.type,\n      extractionOpts = opts.extractionOpts,\n      _opts$extractHtml = opts.extractHtml,\n      extractHtml = _opts$extractHtml === undefined ? false : _opts$extractHtml;\n  // Skip if there's not extraction for this type\n\n  if (!extractionOpts) return null;\n\n  // If a string is hardcoded for a type (e.g., Wikipedia\n  // contributors), return the string\n  if (typeof extractionOpts === 'string') return extractionOpts;\n\n  var selectors = extractionOpts.selectors,\n      _extractionOpts$defau = extractionOpts.defaultCleaner,\n      defaultCleaner = _extractionOpts$defau === undefined ? true : _extractionOpts$defau;\n\n\n  var matchingSelector = findMatchingSelector($, selectors, extractHtml);\n\n  if (!matchingSelector) return null;\n\n  // Declaring result; will contain either\n  // text or html, which will be cleaned\n  // by the appropriate cleaner type\n\n  // If the selector type requests html as its return type\n  // transform and clean the element with provided selectors\n  var $content = void 0;\n  if (extractHtml) {\n    // If matching selector is an array, we're considering this a\n    // multi-match selection, which allows the parser to choose several\n    // selectors to include in the result. Note that all selectors in the\n    // array must match in order for this selector to trigger\n    if (Array.isArray(matchingSelector)) {\n      (function () {\n        $content = $(matchingSelector.join(','));\n        var $wrapper = $('<div></div>');\n        $content.each(function (index, element) {\n          $wrapper.append(element);\n        });\n\n        $content = $wrapper;\n      })();\n    } else {\n      $content = $(matchingSelector);\n    }\n\n    // Wrap in div so transformation can take place on root element\n    $content.wrap($('<div></div>'));\n    $content = $content.parent();\n\n    $content = transformElements($content, $, extractionOpts);\n    $content = cleanBySelectors($content, $, extractionOpts);\n\n    $content = Cleaners[type]($content, _extends({}, opts, { defaultCleaner: defaultCleaner }));\n\n    return $.html($content);\n  }\n\n  var result = void 0;\n\n  // if selector is an array (e.g., ['img', 'src']),\n  // extract the attr\n  if (Array.isArray(matchingSelector)) {\n    var _matchingSelector = _slicedToArray(matchingSelector, 2),\n        selector = _matchingSelector[0],\n        attr = _matchingSelector[1];\n\n    result = $(selector).attr(attr).trim();\n  } else {\n    var $node = $(matchingSelector);\n\n    $node = cleanBySelectors($node, $, extractionOpts);\n    $node = transformElements($node, $, extractionOpts);\n\n    result = $node.text().trim();\n  }\n\n  // Allow custom extractor to skip default cleaner\n  // for this type; defaults to true\n  if (defaultCleaner) {\n    return Cleaners[type](result, _extends({}, opts, extractionOpts));\n  }\n\n  return result;\n}\n\nfunction extractResult(opts) {\n  var type = opts.type,\n      extractor = opts.extractor,\n      _opts$fallback = opts.fallback,\n      fallback = _opts$fallback === undefined ? true : _opts$fallback;\n\n\n  var result = select(_extends({}, opts, { extractionOpts: extractor[type] }));\n\n  // If custom parser succeeds, return the result\n  if (result) {\n    return result;\n  }\n\n  // If nothing matches the selector, and fallback is enabled,\n  // run the Generic extraction\n  if (fallback) return GenericExtractor[type](opts);\n\n  return null;\n}\n\nvar RootExtractor = {\n  extract: function extract() {\n    var extractor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : GenericExtractor;\n    var opts = arguments[1];\n    var _opts = opts,\n        contentOnly = _opts.contentOnly,\n        extractedTitle = _opts.extractedTitle;\n    // This is the generic extractor. Run its extract method\n\n    if (extractor.domain === '*') return extractor.extract(opts);\n\n    opts = _extends({}, opts, {\n      extractor: extractor\n    });\n\n    if (contentOnly) {\n      var _content = extractResult(_extends({}, opts, { type: 'content', extractHtml: true, title: extractedTitle\n      }));\n      return {\n        content: _content\n      };\n    }\n    var title = extractResult(_extends({}, opts, { type: 'title' }));\n    var date_published = extractResult(_extends({}, opts, { type: 'date_published' }));\n    var author = extractResult(_extends({}, opts, { type: 'author' }));\n    var next_page_url = extractResult(_extends({}, opts, { type: 'next_page_url' }));\n    var content = extractResult(_extends({}, opts, { type: 'content', extractHtml: true, title: title\n    }));\n    var lead_image_url = extractResult(_extends({}, opts, { type: 'lead_image_url', content: content }));\n    var excerpt = extractResult(_extends({}, opts, { type: 'excerpt', content: content }));\n    var dek = extractResult(_extends({}, opts, { type: 'dek', content: content, excerpt: excerpt }));\n    var word_count = extractResult(_extends({}, opts, { type: 'word_count', content: content }));\n    var direction = extractResult(_extends({}, opts, { type: 'direction', title: title }));\n\n    var _ref3 = extractResult(_extends({}, opts, { type: 'url_and_domain' })) || { url: null, domain: null },\n        url = _ref3.url,\n        domain = _ref3.domain;\n\n    return {\n      title: title,\n      content: content,\n      author: author,\n      date_published: date_published,\n      lead_image_url: lead_image_url,\n      dek: dek,\n      next_page_url: next_page_url,\n      url: url,\n      domain: domain,\n      excerpt: excerpt,\n      word_count: word_count,\n      direction: direction\n    };\n  }\n};\n\nvar collectAllPages = (function () {\n  var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref2) {\n    var next_page_url = _ref2.next_page_url,\n        html = _ref2.html,\n        $ = _ref2.$,\n        metaCache = _ref2.metaCache,\n        result = _ref2.result,\n        Extractor = _ref2.Extractor,\n        title = _ref2.title,\n        url = _ref2.url;\n    var pages, previousUrls, extractorOpts, nextPageResult, word_count;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // At this point, we've fetched just the first page\n            pages = 1;\n            previousUrls = [removeAnchor(url)];\n\n            // If we've gone over 26 pages, something has\n            // likely gone wrong.\n\n          case 2:\n            if (!(next_page_url && pages < 26)) {\n              _context.next = 15;\n              break;\n            }\n\n            pages += 1;\n            _context.next = 6;\n            return Resource.create(next_page_url);\n\n          case 6:\n            $ = _context.sent;\n\n            html = $.html();\n\n            extractorOpts = {\n              url: next_page_url,\n              html: html,\n              $: $,\n              metaCache: metaCache,\n              contentOnly: true,\n              extractedTitle: title,\n              previousUrls: previousUrls\n            };\n            nextPageResult = RootExtractor.extract(Extractor, extractorOpts);\n\n\n            previousUrls.push(next_page_url);\n            result = _extends({}, result, {\n              content: result.content + '<hr><h4>Page ' + pages + '</h4>' + nextPageResult.content\n            });\n\n            next_page_url = nextPageResult.next_page_url;\n            _context.next = 2;\n            break;\n\n          case 15:\n            word_count = GenericExtractor.word_count({ content: '<div>' + result.content + '</div>' });\n            return _context.abrupt('return', _extends({}, result, {\n              total_pages: pages,\n              pages_rendered: pages,\n              word_count: word_count\n            }));\n\n          case 17:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  function collectAllPages(_x) {\n    return _ref.apply(this, arguments);\n  }\n\n  return collectAllPages;\n})();\n\nvar Mercury = {\n  parse: function parse(url, html) {\n    var _this = this;\n\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n      var _opts$fetchAllPages, fetchAllPages, _opts$fallback, fallback, parsedUrl, $, Extractor, metaCache, result, _result, title, next_page_url;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _opts$fetchAllPages = opts.fetchAllPages, fetchAllPages = _opts$fetchAllPages === undefined ? true : _opts$fetchAllPages, _opts$fallback = opts.fallback, fallback = _opts$fallback === undefined ? true : _opts$fallback;\n\n              // if no url was passed and this is the browser version,\n              // set url to window.location.href and load the html\n              // from the current page\n\n              if (!url && cheerio.browser) {\n                url = window.location.href; // eslint-disable-line no-undef\n                html = html || cheerio.html();\n              }\n\n              parsedUrl = URL.parse(url);\n\n              if (validateUrl(parsedUrl)) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt('return', Errors.badUrl);\n\n            case 5:\n              _context.next = 7;\n              return Resource.create(url, html, parsedUrl);\n\n            case 7:\n              $ = _context.sent;\n              Extractor = getExtractor(url, parsedUrl, $);\n              // console.log(`Using extractor for ${Extractor.domain}`);\n\n              // If we found an error creating the resource, return that error\n\n              if (!$.failed) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt('return', $);\n\n            case 11:\n\n              // if html still has not been set (i.e., url passed to Mercury.parse),\n              // set html from the response of Resource.create\n              if (!html) {\n                html = $.html();\n              }\n\n              // Cached value of every meta name in our document.\n              // Used when extracting title/author/date_published/dek\n              metaCache = $('meta').map(function (_, node) {\n                return $(node).attr('name');\n              }).toArray();\n              result = RootExtractor.extract(Extractor, {\n                url: url,\n                html: html,\n                $: $,\n                metaCache: metaCache,\n                parsedUrl: parsedUrl,\n                fallback: fallback\n              });\n              _result = result, title = _result.title, next_page_url = _result.next_page_url;\n\n              // Fetch more pages if next_page_url found\n\n              if (!(fetchAllPages && next_page_url)) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 18;\n              return collectAllPages({\n                Extractor: Extractor,\n                next_page_url: next_page_url,\n                html: html,\n                $: $,\n                metaCache: metaCache,\n                result: result,\n                title: title,\n                url: url\n              });\n\n            case 18:\n              result = _context.sent;\n              _context.next = 22;\n              break;\n\n            case 21:\n              result = _extends({}, result, {\n                total_pages: 1,\n                rendered_pages: 1\n              });\n\n            case 22:\n\n              // if this parse is happening in the browser,\n              // clean up any trace from the page.\n              if (cheerio.browser) {\n                cheerio.cleanup();\n              }\n\n              return _context.abrupt('return', result);\n\n            case 24:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this);\n    }))();\n  },\n\n\n  browser: !!cheerio.browser,\n\n  // A convenience method for getting a resource\n  // to work with, e.g., for custom extractor generator\n  fetchResource: function fetchResource(url) {\n    var _this2 = this;\n\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Resource.create(url);\n\n            case 2:\n              return _context2.abrupt('return', _context2.sent);\n\n            case 3:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, _this2);\n    }))();\n  }\n};\n\nmodule.exports = Mercury;\n//# sourceMappingURL=mercury.js.map\n","export default function insertValues(strings, ...values) {\n  if (values.length) {\n    return strings.reduce((result, part, idx) => {\n      let value = values[idx];\n\n      if (value && typeof value.toString === 'function') {\n        value = value.toString();\n      } else {\n        value = '';\n      }\n\n      return result + part + value;\n    }, '');\n  }\n\n  return strings.join('');\n}\n","import insertValues from './insert-values';\n\nconst bodyPattern = /^\\n([\\s\\S]+)\\s{2}$/gm;\nconst trailingWhitespace = /\\s+$/;\n\nexport default function template(strings, ...values) {\n  const compiled = insertValues(strings, ...values);\n  let [body] = compiled.match(bodyPattern) || [];\n  let indentLevel = /^\\s{0,4}(.+)$/g;\n\n  if (!body) {\n    body = compiled;\n    indentLevel = /^\\s{0,2}(.+)$/g;\n  }\n\n  return body.split('\\n')\n    .slice(1)\n    .map((line) => {\n      line = line.replace(indentLevel, '$1');\n\n      if (trailingWhitespace.test(line)) {\n        line = line.replace(trailingWhitespace, '');\n      }\n\n      return line;\n    })\n    .join('\\n');\n}\n","import template from './index';\n\nexport default function (hostname, name) {\n  return template`\n    export const ${name} = {\n      domain: '${hostname}',\n\n      title: {\n        selectors: [\n          // enter title selectors\n        ],\n      },\n\n      author: {\n        selectors: [\n          // enter author selectors\n        ],\n      },\n\n      date_published: {\n        selectors: [\n          // enter selectors\n        ],\n      },\n\n      dek: {\n        selectors: [\n          // enter selectors\n        ],\n      },\n\n      lead_image_url: {\n        selectors: [\n          // enter selectors\n        ],\n      },\n\n      content: {\n        selectors: [\n          // enter content selectors\n        ],\n\n        // Is there anything in the content you selected that needs transformed\n        // before it's consumable content? E.g., unusual lazy loaded images\n        transforms: {\n        },\n\n        // Is there anything that is in the result that shouldn't be?\n        // The clean selectors will remove anything that matches from\n        // the result\n        clean: [\n\n        ]\n      },\n    }\n  `;\n}\n","import template from './index';\n\nconst IGNORE = [\n  'url',\n  'domain',\n  'content',\n  'word_count',\n  'next_page_url',\n  'excerpt',\n  'direction',\n  'total_pages',\n  'rendered_pages',\n];\n\nfunction testFor(key, value, dir) {\n  if (IGNORE.find(k => k === key)) return '';\n\n  return template`\n  it('returns the ${key}', async () => {\n            // To pass this test, fill out the ${key} selector\n            // in ${dir}/index.js.\n            const { ${key} } = await result\n\n            // Update these values with the expected values from\n            // the article.\n            assert.equal(${key}, ${value ? `\\`${value}\\`` : \"''\"})\n          });\n    `;\n}\n\nexport default function (file, url, dir, result, name) {\n  return template`\n    import assert from 'assert';\n    import fs from 'fs';\n    import URL from 'url';\n    import cheerio from 'cheerio';\n\n    import Mercury from 'mercury';\n    import getExtractor from 'extractors/get-extractor';\n    import { excerptContent } from 'utils/text';\n\n    describe('${name}', () => {\n      describe('initial test case', () => {\n        let result;\n        let url;\n        beforeAll(() => {\n          url =\n            '${url}';\n          const html =\n            fs.readFileSync('${file}');\n          result =\n            Mercury.parse(url, html, { fallback: false });\n        });\n\n        it('is selected properly', () => {\n          // This test should be passing by default.\n          // It sanity checks that the correct parser\n          // is being selected for URLs from this domain\n          const extractor = getExtractor(url);\n          assert.equal(extractor.domain, URL.parse(url).hostname)\n        })\n\n          ${Reflect.ownKeys(result).map(k => testFor(k, result[k], dir)).join('\\n\\n')}\n\n        it('returns the content', async () => {\n          // To pass this test, fill out the content selector\n          // in ${dir}/index.js.\n          // You may also want to make use of the clean and transform\n          // options.\n          const { content } = await result;\n\n          const $ = cheerio.load(content || '');\n\n          const first13 = excerptContent($('*').first().text(), 13)\n\n          // Update these values with the expected values from\n          // the article.\n          assert.equal(first13, 'Add the first 13 words of the article here');\n        });\n      });\n    });\n  `;\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-console */\nimport fs from 'fs';\nimport URL from 'url';\nimport inquirer from 'inquirer';\nimport ora from 'ora';\nimport { exec } from 'child_process';\n\nimport {\n  stripJunkTags,\n  makeLinksAbsolute,\n} from 'utils/dom';\nimport Mercury from '../dist/mercury';\nimport extractorTemplate from './templates/custom-extractor';\nimport extractorTestTemplate from './templates/custom-extractor-test';\n\nconst questions = [\n  {\n    type: 'input',\n    name: 'website',\n    message: 'Paste a url to an article you\\'d like to create or extend a parser for:',\n    validate(value) {\n      const { hostname } = URL.parse(value);\n      if (hostname) return true;\n\n      return false;\n    },\n  },\n];\nlet spinner;\n\nfunction confirm(fn, args, msg, newParser) {\n  spinner = ora({ text: msg });\n  spinner.start();\n  const result = fn(...args);\n\n  if (result && result.then) {\n    result.then(r => savePage(r, args, newParser));\n  } else {\n    spinner.succeed();\n  }\n\n  return result;\n}\n\nfunction confirmCreateDir(dir, msg) {\n  if (!fs.existsSync(dir)) {\n    confirm(fs.mkdirSync, [dir], msg);\n  }\n}\n\nfunction getDir(url) {\n  const { hostname } = URL.parse(url);\n  return `./src/extractors/custom/${hostname}`;\n}\n\nfunction scaffoldCustomParser(url) {\n  const dir = getDir(url);\n  const { hostname } = URL.parse(url);\n  let newParser = false;\n\n  if (!fs.existsSync(dir)) {\n    newParser = true;\n    confirmCreateDir(dir, `Creating ${hostname} directory`);\n    confirmCreateDir(`./fixtures/${hostname}`, 'Creating fixtures directory');\n  }\n\n  confirm(Mercury.fetchResource, [url], 'Fetching fixture', newParser);\n}\n\ninquirer.prompt(questions).then((answers) => {\n  scaffoldCustomParser(answers.website);\n});\n\nfunction generateScaffold(url, file, result) {\n  const { hostname } = URL.parse(url);\n  const extractor = extractorTemplate(hostname, extractorName(hostname));\n  const extractorTest =\n    extractorTestTemplate(\n      file, url, getDir(url), result, extractorName(hostname)\n    );\n\n  fs.writeFileSync(`${getDir(url)}/index.js`, extractor);\n  fs.writeFileSync(`${getDir(url)}/index.test.js`, extractorTest);\n  fs.appendFileSync(\n    './src/extractors/custom/index.js',\n    exportString(url),\n  );\n  exec(`npm run lint-fix-quiet -- ${getDir(url)}/*.js`);\n}\n\nfunction savePage($, [url], newParser) {\n  const { hostname } = URL.parse(url);\n\n  spinner.succeed();\n\n  const filename = new Date().getTime();\n  const file = `./fixtures/${hostname}/${filename}.html`;\n  // fix http(s) relative links:\n  makeLinksAbsolute($('*').first(), $, url);\n  $('[src], [href]').each((index, node) => {\n    const $node = $(node);\n    const link = $node.attr('src');\n    if (link && link.slice(0, 2) === '//') {\n      $node.attr('src', `http:${link}`);\n    }\n  });\n  const html = stripJunkTags($('*').first(), $, ['script']).html();\n\n  fs.writeFileSync(file, html);\n\n  Mercury.parse(url, html).then((result) => {\n    if (newParser) {\n      confirm(generateScaffold, [url, file, result], 'Generating parser and tests');\n      console.log(`Your custom site extractor has been set up. To get started building it, run\n      yarn watch:test -- ${hostname}\n        -- OR --\n      npm run watch:test -- ${hostname}`);\n    } else {\n      console.log(`\n  It looks like you already have a custom parser for this url.\n  The page you linked to has been added to ${file}. Copy and paste\n  the following code to use that page in your tests:\n  const html = fs.readFileSync('${file}');`);\n    }\n  });\n}\n\nfunction exportString(url) {\n  const { hostname } = URL.parse(url);\n  return `export * from './${hostname}';`;\n}\n\nfunction extractorName(hostname) {\n  const name = hostname\n    .split('.')\n    .map(w => `${w.charAt(0).toUpperCase()}${w.slice(1)}`)\n    .join('');\n  return `${name}Extractor`;\n}\n"],"names":["KEEP_CLASS","KEEP_SELECTORS","STRIP_OUTPUT_TAGS","REMOVE_ATTRS","REMOVE_ATTR_SELECTORS","map","selector","REMOVE_ATTR_LIST","join","REMOVE_EMPTY_TAGS","REMOVE_EMPTY_SELECTORS","tag","CLEAN_CONDITIONALLY_TAGS","HEADER_TAGS","HEADER_TAG_LIST","UNLIKELY_CANDIDATES_BLACKLIST","UNLIKELY_CANDIDATES_WHITELIST","DIV_TO_P_BLOCK_TAGS","BLOCK_LEVEL_TAGS","BLOCK_LEVEL_TAGS_RE","RegExp","candidatesBlacklist","candidatesWhitelist","brsToPs","$","collapsing","each","index","element","$element","nextElement","next","get","tagName","toLowerCase","remove","paragraphize","node","br","$node","sibling","nextSibling","p","test","appendTo","replaceWith","convertDivs","div","$div","convertable","children","length","convertSpans","span","$span","parents","convertNodeTo","attrs","getAttrs","attribString","key","html","browser","text","contents","stripJunkTags","article","tags","not","removeClass","NON_TOP_CANDIDATE_TAGS","NON_TOP_CANDIDATE_TAGS_RE","HNEWS_CONTENT_SELECTORS","PHOTO_HINTS","PHOTO_HINTS_RE","POSITIVE_SCORE_HINTS","POSITIVE_SCORE_RE","READABILITY_ASSET","NEGATIVE_SCORE_HINTS","NEGATIVE_SCORE_RE","DIGIT_RE","BR_TAGS_RE","BR_TAG_RE","CANDIDATES_BLACKLIST","CANDIDATES_WHITELIST","UNLIKELY_RE","PARAGRAPH_SCORE_TAGS","CHILD_CONTENT_TAGS","BAD_TAGS","HTML_OR_BODY_RE","getWeight","classes","attr","id","score","getScore","parseFloat","scoreCommas","match","idkRe","scoreLength","textLength","chunks","lengthBonus","Math","min","max","scoreParagraph","trim","slice","setScore","addScore","amount","getOrInitScore","e","addToParent","parent","weightNodes","scoreNode","addScoreTo","NORMALIZE_RE","normalizeSpaces","replace","PAGE_IN_HREF_RE","HAS_ALPHA_RE","IS_ALPHA_RE","IS_DIGIT_RE","isGoodSegment","segment","firstSegmentHasLetters","goodSegment","SENTENCE_END_RE","hasSentenceEnd","mergeSiblings","$candidate","topScore","siblingScoreThreshold","wrappingDiv","$sibling","siblingScore","append","contentBonus","density","linkDensity","newScore","siblingContent","siblingContentLength","first","removeUnlessContent","weight","hasClass","content","pCount","inputCount","contentLength","imgCount","nodeIsList","previousNode","prev","scriptCount","absolutize","rootUrl","$content","_","url","absoluteUrl","URL","resolve","makeLinksAbsolute","forEach","totalTextLength","linkText","find","linkLength","isGoodNode","maxChildren","withinComment","stripTags","cleanText","toArray","commentParent","nodeClass","class","classAndId","includes","undefined","attribs","attributes","reduce","acc","name","value","setAttr","val","setAttribute","_interopDefault","ex","_regeneratorRuntime","require$$22","_extends","require$$21","_asyncToGenerator","require$$20","require$$19","cheerio","require$$18","_Promise","require$$17","request","require$$16","iconv","require$$15","_slicedToArray","require$$14","_Reflect$ownKeys","require$$13","_toConsumableArray","require$$12","_defineProperty","require$$11","_typeof","require$$10","_getIterator","require$$9","_Object$keys","require$$8","stringDirection","require$$7","validUrl","require$$6","moment","require$$5","parseFormat","require$$4","wuzzy","require$$3","difflib","require$$2","_Array$from","require$$1","ellipsize","require$$0","_marked","range","mark","start","arguments","end","wrap","range$","_context","stop","validateUrl","_ref","hostname","Errors","extractFromUrl","regexList","matchRe","re","exec","ENCODING_RE","pageNumFromUrl","matches","pageNum","parseInt","removeAnchor","split","articleBaseUrl","parsed","parsedUrl","parse","protocol","host","path","cleanedSegments","reverse","rawSegment","_segment$split","_segment$split2","possibleSegment","fileExt","push","excerptContent","words","getEncoding","str","REQUEST_HEADERS","FETCH_TIMEOUT","BAD_CONTENT_TYPES","BAD_CONTENT_TYPES_RE","MAX_CONTENT_LENGTH","options","reject","err","response","body","encoding","headers","encodingExists","decode","load","contentType","properEncoding","validateResponse","parseNon2xx","statusMessage","statusCode","Error","error","_response$headers","fetchResource$1","_ref2","_callee","_ref3","_callee$","encodeURI","href","sent","abrupt","t0","badUrl","fetchResource","_x2","_x3","apply","convertMetaProp","from","to","removeAttr","normalizeMetaTags","SPACER_RE","WHITELIST_ATTRS","WHITELIST_ATTRS_RE","IS_WP_SELECTOR","PAGE_RE","stripUnlikelyCandidates","brsToPs$$1","convertToParagraphs$$1","convertNodeTo$$1","cleanForHeight","$img","height","width","removeSpacers","cleanImages","$article","img","markToKeep","_URL$parse","concat","addClass","cleanHOnes$$1","$hOnes","removeAllButWhitelist","cleanAttributes$$1","removeEmpty","$p","UNLIKELY_CANDIDATES_BLACKLIST$1","UNLIKELY_CANDIDATES_WHITELIST$1","DIV_TO_P_BLOCK_TAGS$1","NON_TOP_CANDIDATE_TAGS$1","NON_TOP_CANDIDATE_TAGS_RE$1","HNEWS_CONTENT_SELECTORS$1","PHOTO_HINTS$1","PHOTO_HINTS_RE$1","POSITIVE_SCORE_HINTS$1","POSITIVE_SCORE_RE$1","READABILITY_ASSET$1","NEGATIVE_SCORE_HINTS$1","NEGATIVE_SCORE_RE$1","candidatesBlacklist$1","candidatesWhitelist$1","PARAGRAPH_SCORE_TAGS$1","CHILD_CONTENT_TAGS$1","BAD_TAGS$1","scoreParagraph$$1","addScore$$1","getOrInitScore$$1","addToParent$$1","scoreNode$$1","_$node$get","convertSpans$1","scorePs","$parent","rawScore","scoreContent$$1","parentSelector","childSelector","findTopCandidate$$1","cleanTags$$1","cleanHeaders","title","header","$header","prevAll","rewriteTopLevel$$1","makeLinksAbsolute$$1","extractFromMeta$$1","metaNames","cachedNames","foundNames","filter","indexOf","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_loop","_step","type","nodes","values","metaValue","_iterator","done","_ret","v","return","withinComment$$1","extractFromSelectors$$1","selectors","textOnly","nodeIsSufficient","isWordpress","setAttrs","removeAttribute","IS_LINK","IS_IMAGE","TAGS_TO_REMOVE","convertLazyLoadedImages","isComment","cleanComments","root","clean","Resource","create","preparedResponse","_this","result","validResponse","failed","generateDoc","merge","extractor","domains","domain","mergeSupportedDomains","supportedDomains","BloggerExtractor","NYMagExtractor","noscript","$children","WikipediaExtractor","infoboxImg","prepend","TwitterExtractor","permalinkRoleMain","tweets","$tweetContainer","NYTimesExtractor","imgGLazy","src","TheAtlanticExtractor","NewYorkerExtractor","WiredExtractor","MSNExtractor","YahooExtractor","BuzzfeedExtractor","divLongform_custom_header_media","has","WikiaExtractor","LittleThingsExtractor","PoliticoExtractor","DeadspinExtractor","iframeLazyloadDataRecommendIdYoutube","youtubeId","BroadwayWorldExtractor","ApartmentTherapyExtractor","divDataRenderReactIdImagesLazyPicture","data","JSON","sources","MediumExtractor","iframe","ytRe","thumb","decodeURIComponent","_thumb$match","_thumb$match2","$caption","empty","figure","WwwTmzComExtractor","WwwWashingtonpostComExtractor","divInlineContent","WwwHuffingtonpostComExtractor","NewrepublicComExtractor","MoneyCnnComExtractor","WwwThevergeComExtractor","WwwCnnComExtractor","znBody__paragraphEl__leafmediaSourcedParagraph","$text","znBody__paragraph","WwwAolComExtractor","WwwYoutubeComExtractor","playerApi","videoId","WwwTheguardianComExtractor","WwwSbnationComExtractor","WwwBloombergComExtractor","WwwBustleComExtractor","WwwNprOrgExtractor","WwwRecodeNetExtractor","QzComExtractor","WwwDmagazineComExtractor","WwwReutersComExtractor","MashableComExtractor","WwwChicagotribuneComExtractor","WwwVoxComExtractor","figureEImage__imageNoscript","imgHtml","NewsNationalgeographicComExtractor","parsysContent","$imgSrc","WwwNationalgeographicComExtractor","$imageParent","$dataAttrContainer","imgPath1","imgPath2","WwwLatimesComExtractor","trb_ar_la","$figure","PagesixComExtractor","ThefederalistpapersOrgExtractor","WwwCbssportsComExtractor","WwwMsnbcComExtractor","paneNodeBody","_WwwMsnbcComExtractor","lead_image_url","WwwThepoliticalinsiderComExtractor","WwwMentalflossComExtractor","AbcnewsGoComExtractor","WwwNydailynewsComExtractor","WwwCnbcComExtractor","WwwPopsugarComExtractor","ObserverComExtractor","PeopleComExtractor","WwwUsmagazineComExtractor","WwwRollingstoneComExtractor","twofortysevensportsComExtractor","UproxxComExtractor","WwwEonlineComExtractor","WwwMiamiheraldComExtractor","WwwRefinery29ComExtractor","divLoadingNoscript","WwwMacrumorsComExtractor","WwwAndroidcentralComExtractor","WwwSiComExtractor","WwwRawstoryComExtractor","WwwCnetComExtractor","figureImage","WwwCinemablendComExtractor","WwwTodayComExtractor","WwwHowtogeekComExtractor","WwwAlComExtractor","WwwThepennyhoarderComExtractor","WwwWesternjournalismComExtractor","FusionNetExtractor","WwwAmericanowComExtractor","ScienceflyComExtractor","HellogigglesComExtractor","ThoughtcatalogComExtractor","WwwNjComExtractor","WwwInquisitrComExtractor","WwwNbcnewsComExtractor","FortuneComExtractor","WwwLinkedinComExtractor","ObamawhitehouseArchivesGovExtractor","WwwOpposingviewsComExtractor","CustomExtractors","Extractors","CLEAN_AUTHOR_RE","TEXT_LINK_RE","MS_DATE_STRING","SEC_DATE_STRING","CLEAN_DATE_STRING_RE","TIME_MERIDIAN_SPACE_RE","TIME_MERIDIAN_DOTS_RE","months","allMonths","timestamp1","timestamp2","timestamp3","SPLIT_DATE_STRING","TIME_WITH_OFFSET_RE","TITLE_SPLITTERS_RE","DOMAIN_ENDINGS_RE","cleanAuthor","author","clean$1","leadImageUrl","isWebUri","cleanDek","dek","excerpt","dekText","cleanDateString","dateString","createDate","timezone","format","Date","tz","cleanDatePublished","toISOString","date","isValid","extractCleanNode","_ref$cleanConditional","cleanConditionally","_ref$title","_ref$url","_ref$defaultCleaner","defaultCleaner","cleanTitle$$1","resolveSplitTitle","h1","extractBreadcrumbTitle","splitTitle","termCounts","titleText","_Reflect$ownKeys$redu","_Reflect$ownKeys$redu2","maxTerm","termCount","splitEnds","longestEnd","cleanDomainFromTitle","nakedDomain","startSlug","startSlugRatio","levenshtein","endSlug","endSlugRatio","newTitle","Cleaners","extractBestNode","opts","$topCandidate","GenericContentExtractor","extract","defaultOpts","getContentNode","cleanAndReturnNode","k","STRONG_TITLE_META_TAGS","WEAK_TITLE_META_TAGS","STRONG_TITLE_SELECTORS","WEAK_TITLE_SELECTORS","GenericTitleExtractor","metaCache","AUTHOR_META_TAGS","AUTHOR_MAX_LENGTH","AUTHOR_SELECTORS","bylineRe","BYLINE_SELECTORS_RE","GenericAuthorExtractor","_ref4","regex","DATE_PUBLISHED_META_TAGS","DATE_PUBLISHED_SELECTORS","abbrevMonthsStr","DATE_PUBLISHED_URL_RES","GenericDatePublishedExtractor","datePublished","GenericDekExtractor","LEAD_IMAGE_URL_META_TAGS","LEAD_IMAGE_URL_SELECTORS","POSITIVE_LEAD_IMAGE_URL_HINTS","POSITIVE_LEAD_IMAGE_URL_HINTS_RE","NEGATIVE_LEAD_IMAGE_URL_HINTS","NEGATIVE_LEAD_IMAGE_URL_HINTS_RE","GIF_RE","JPG_RE","getSig","scoreImageUrl","scoreAttr","scoreByParents","$figParent","$gParent","scoreBySibling","scoreByDimensions","area","round","scoreByPosition","$imgs","GenericLeadImageUrlExtractor","cleanUrl","imageUrl","imgs","imgScores","topUrl","scoreSimilarity","articleUrl","similarity","SequenceMatcher","ratio","diffPercent","diffModifier","scoreLinkText","linkTextAsNum","scorePageInLink","isWp","DIGIT_RE$2","EXTRANEOUS_LINK_HINTS$1","EXTRANEOUS_LINK_HINTS_RE$1","NEXT_LINK_TEXT_RE$1","CAP_LINK_TEXT_RE$1","PREV_LINK_TEXT_RE$1","scoreExtraneousLinks","makeSig$1","$link","scoreByParents$1","positiveMatch","negativeMatch","parentData","scorePrevLink","linkData","shouldScore","baseUrl","previousUrls","linkHost","fragment","scoreBaseUrl","baseRegex","scoreNextLinkText","scoreCapLinks","makeBaseRegex","makeSig","scoreLinks","links","_ref$previousUrls","scoredPages","possiblePages","link","possiblePage","GenericNextPageUrlExtractor","scoredLinks","topPage","scoredLink","CANONICAL_META_SELECTORS","parseDomain","GenericUrlExtractor","$canonical","metaUrl","EXCERPT_META_SELECTORS","clean$2","maxLength","ellipse","GenericExcerptExtractor","shortContent","GenericWordCountExtractor","GenericExtractor","bind","direction","getDirection","loaded","date_published","next_page_url","word_count","_url_and_domain","url_and_domain","Detectors","detectByHtml","s","getExtractor","_parsedUrl","baseDomain","cleanBySelectors","transformElements","transforms","$matches","findMatchingSelector","extractHtml","Array","isArray","_selector","select","extractionOpts","_opts$extractHtml","_extractionOpts$defau","matchingSelector","$wrapper","_matchingSelector","extractResult","_opts$fallback","fallback","RootExtractor","_opts","contentOnly","extractedTitle","_content","collectAllPages","Extractor","pages","extractorOpts","nextPageResult","_x","Mercury","_opts$fetchAllPages","fetchAllPages","_result","window","location","cleanup","_this2","_callee2","_callee2$","_context2","insertValues","strings","part","idx","toString","bodyPattern","trailingWhitespace","template","compiled","indentLevel","line","IGNORE","testFor","dir","file","questions","spinner","confirm","fn","args","msg","newParser","ora","then","savePage","r","succeed","confirmCreateDir","fs","existsSync","mkdirSync","getDir","scaffoldCustomParser","inquirer","prompt","answers","website","generateScaffold","extractorTemplate","extractorName","extractorTest","extractorTestTemplate","writeFileSync","appendFileSync","exportString","filename","getTime","log","w","charAt","toUpperCase"],"mappings":"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"}