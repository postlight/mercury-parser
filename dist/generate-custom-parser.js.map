{"version":3,"file":null,"sources":["../src/utils/dom/constants.js","../src/utils/dom/brs-to-ps.js","../src/utils/dom/paragraphize.js","../src/utils/dom/convert-to-paragraphs.js","../src/utils/dom/convert-node-to.js","../src/utils/dom/clean-images.js","../src/utils/dom/strip-junk-tags.js","../src/utils/dom/clean-attributes.js","../src/extractors/generic/content/scoring/constants.js","../src/extractors/generic/content/scoring/get-weight.js","../src/extractors/generic/content/scoring/get-score.js","../src/extractors/generic/content/scoring/score-commas.js","../src/extractors/generic/content/scoring/score-length.js","../src/extractors/generic/content/scoring/score-paragraph.js","../src/extractors/generic/content/scoring/set-score.js","../src/extractors/generic/content/scoring/add-score.js","../src/extractors/generic/content/scoring/add-to-parent.js","../src/extractors/generic/content/scoring/get-or-init-score.js","../src/extractors/generic/content/scoring/score-node.js","../src/extractors/generic/content/scoring/score-content.js","../src/utils/text/normalize-spaces.js","../src/utils/text/extract-from-url.js","../src/utils/text/constants.js","../src/utils/text/article-base-url.js","../src/utils/text/has-sentence-end.js","../src/extractors/generic/content/scoring/merge-siblings.js","../src/extractors/generic/content/scoring/index.js","../src/utils/dom/clean-tags.js","../src/utils/dom/make-links-absolute.js","../src/utils/dom/link-density.js","../src/utils/dom/extract-from-selectors.js","../src/utils/dom/strip-tags.js","../src/utils/dom/within-comment.js","../src/utils/dom/node-is-sufficient.js","../src/utils/dom/get-attrs.js","../src/utils/dom/set-attr.js","../src/utils/dom/set-attrs.js","../src/utils/dom/index.js","mercury.js","../scripts/templates/insert-values.js","../scripts/templates/index.js","../scripts/templates/custom-extractor.js","../scripts/templates/custom-extractor-test.js","../scripts/generate-custom-parser.js"],"sourcesContent":["// Spacer images to be removed\nexport const SPACER_RE = new RegExp('trans|transparent|spacer|blank', 'i');\n\n// The class we will use to mark elements we want to keep\n// but would normally remove\nexport const KEEP_CLASS = 'mercury-parser-keep';\n\nexport const KEEP_SELECTORS = [\n  'iframe[src^=\"https://www.youtube.com\"]',\n  'iframe[src^=\"http://www.youtube.com\"]',\n  'iframe[src^=\"https://player.vimeo\"]',\n  'iframe[src^=\"http://player.vimeo\"]',\n];\n\n// A list of tags to strip from the output if we encounter them.\nexport const STRIP_OUTPUT_TAGS = [\n  'title',\n  'script',\n  'noscript',\n  'link',\n  'style',\n  'hr',\n  'embed',\n  'iframe',\n  'object',\n];\n\n// cleanAttributes\nexport const REMOVE_ATTRS = ['style', 'align'];\nexport const REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(selector => `[${selector}]`);\nexport const REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nexport const WHITELIST_ATTRS = ['src', 'srcset', 'href', 'class', 'id', 'alt'];\nexport const WHITELIST_ATTRS_RE = new RegExp(`^(${WHITELIST_ATTRS.join('|')})$`, 'i');\n\n// removeEmpty\nexport const REMOVE_EMPTY_TAGS = ['p'];\nexport const REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(tag => `${tag}:empty`).join(',');\n\n// cleanTags\nexport const CLEAN_CONDITIONALLY_TAGS = ['ul', 'ol', 'table', 'div', 'button', 'form'].join(',');\n\n// cleanHeaders\nconst HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nexport const HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  // 'form', // This is too generic, has too many false positives\n  'header',\n  'hidden',\n  'loader',\n  'login',                     // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'outbrain',\n  'pager',\n  'pagination',\n  'predicta',                  // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'taboola',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE =\n  new RegExp(`^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`, 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = [\n  'figure',\n  'photo',\n  'image',\n  'caption',\n];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nexport const IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nexport const EXTRANEOUS_LINK_HINTS = [\n  'print',\n  'archive',\n  'comment',\n  'discuss',\n  'e-mail',\n  'email',\n  'share',\n  'reply',\n  'all',\n  'login',\n  'sign',\n  'single',\n  'adx',\n  'entry-unrelated',\n];\nexport const EXTRANEOUS_LINK_HINTS_RE = new RegExp(EXTRANEOUS_LINK_HINTS.join('|'), 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nexport const PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\nexport const NEXT_LINK_TEXT_RE = /(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))/i;\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nexport const CAP_LINK_TEXT_RE = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nexport const PREV_LINK_TEXT_RE = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(`^(${BLOCK_LEVEL_TAGS.join('|')})$`, 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(`!(${candidatesWhitelist})|(${candidatesBlacklist})`, 'i');\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import { paragraphize } from './index';\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nexport default function brsToPs($) {\n  let collapsing = false;\n  $('br').each((index, element) => {\n    const $element = $(element);\n    const nextElement = $element.next().get(0);\n\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\n      collapsing = true;\n      $element.remove();\n    } else if (collapsing) {\n      collapsing = false;\n      // $(element).replaceWith('<p />')\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n","import { BLOCK_LEVEL_TAGS_RE } from './constants';\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nexport default function paragraphize(node, $, br = false) {\n  const $node = $(node);\n\n  if (br) {\n    let sibling = node.nextSibling;\n    const p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (sibling && !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))) {\n      const nextSibling = sibling.nextSibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n","import { brsToPs, convertNodeTo } from 'utils/dom';\n\nimport { DIV_TO_P_BLOCK_TAGS } from './constants';\n\nfunction convertDivs($) {\n  $('div').each((index, div) => {\n    const $div = $(div);\n    const convertable = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertable) {\n      convertNodeTo($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each((index, span) => {\n    const $span = $(span);\n    const convertable = $span.parents('p, div').length === 0;\n    if (convertable) {\n      convertNodeTo($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nexport default function convertToParagraphs($) {\n  $ = brsToPs($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function convertNodeTo($node, $, tag = 'p') {\n  const node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n  const attrs = getAttrs(node) || {};\n  // console.log(attrs)\n\n  const attribString = Reflect.ownKeys(attrs)\n                              .map(key => `${key}=${attrs[key]}`)\n                              .join(' ');\n  let html;\n\n  if ($.browser) {\n    // In the browser, the contents of noscript tags aren't rendered, therefore\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\n    // as expected. This test case handles that\n    html = node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\n  } else {\n    html = $node.contents();\n  }\n  $node.replaceWith(\n    `<${tag} ${attribString}>${html}</${tag}>`\n  );\n  return $;\n}\n","import { SPACER_RE } from './constants';\n\nfunction cleanForHeight($img, $) {\n  const height = parseInt($img.attr('height'), 10);\n  const width = parseInt($img.attr('width'), 10) || 20;\n\n  // Remove images that explicitly have very small heights or\n  // widths, because they are most likely shims or icons,\n  // which aren't very useful for reading.\n  if ((height || 20) < 10 || width < 10) {\n    $img.remove();\n  } else if (height) {\n    // Don't ever specify a height on images, so that we can\n    // scale with respect to width without screwing up the\n    // aspect ratio.\n    $img.removeAttr('height');\n  }\n\n  return $;\n}\n\n// Cleans out images where the source string matches transparent/spacer/etc\n// TODO This seems very aggressive - AP\nfunction removeSpacers($img, $) {\n  if (SPACER_RE.test($img.attr('src'))) {\n    $img.remove();\n  }\n\n  return $;\n}\n\nexport default function cleanImages($article, $) {\n  $article.find('img').each((index, img) => {\n    const $img = $(img);\n\n    cleanForHeight($img, $);\n    removeSpacers($img, $);\n  });\n\n  return $;\n}\n","import {\n  STRIP_OUTPUT_TAGS,\n  KEEP_CLASS,\n} from './constants';\n\nexport default function stripJunkTags(article, $, tags = []) {\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  // Remove matching elements, but ignore\n  // any element with a class of mercury-parser-keep\n  $(tags.join(','), article).not(`.${KEEP_CLASS}`).remove();\n\n  // Remove the mercury-parser-keep class from result\n  $(`.${KEEP_CLASS}`, article).removeClass(KEEP_CLASS);\n\n  return $;\n}\n","import {\n  getAttrs,\n  setAttrs,\n} from 'utils/dom';\n\nimport { WHITELIST_ATTRS_RE } from './constants';\n\nfunction removeAllButWhitelist($article) {\n  $article.find('*').each((index, node) => {\n    const attrs = getAttrs(node);\n\n    setAttrs(node, Reflect.ownKeys(attrs).reduce((acc, attr) => {\n      if (WHITELIST_ATTRS_RE.test(attr)) {\n        return { ...acc, [attr]: attrs[attr] };\n      }\n\n      return acc;\n    }, {}));\n  });\n\n  return $article;\n}\n\n// function removeAttrs(article, $) {\n//   REMOVE_ATTRS.forEach((attr) => {\n//     $(`[${attr}]`, article).removeAttr(attr);\n//   });\n// }\n\n// Remove attributes like style or align\nexport default function cleanAttributes($article) {\n  // Grabbing the parent because at this point\n  // $article will be wrapped in a div which will\n  // have a score set on it.\n  return removeAllButWhitelist(\n    $article.parent().length ?\n      $article.parent() : $article\n  );\n}\n","// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nexport const UNLIKELY_CANDIDATES_BLACKLIST = [\n  'ad-break',\n  'adbox',\n  'advert',\n  'addthis',\n  'agegate',\n  'aux',\n  'blogger-labels',\n  'combx',\n  'comment',\n  'conversation',\n  'disqus',\n  'entry-unrelated',\n  'extra',\n  'foot',\n  'form',\n  'header',\n  'hidden',\n  'loader',\n  'login',                     // Note: This can hit 'blogindex'.\n  'menu',\n  'meta',\n  'nav',\n  'pager',\n  'pagination',\n  'predicta',                  // readwriteweb inline ad box\n  'presence_control_external', // lifehacker.com container full of false positives\n  'popup',\n  'printfriendly',\n  'related',\n  'remove',\n  'remark',\n  'rss',\n  'share',\n  'shoutbox',\n  'sidebar',\n  'sociable',\n  'sponsor',\n  'tools',\n];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nexport const UNLIKELY_CANDIDATES_WHITELIST = [\n  'and',\n  'article',\n  'body',\n  'blogindex',\n  'column',\n  'content',\n  'entry-content-asset',\n  'format', // misuse of form\n  'hfeed',\n  'hentry',\n  'hatom',\n  'main',\n  'page',\n  'posts',\n  'shadow',\n];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nexport const DIV_TO_P_BLOCK_TAGS = [\n  'a',\n  'blockquote',\n  'dl',\n  'div',\n  'img',\n  'p',\n  'pre',\n  'table',\n].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nexport const NON_TOP_CANDIDATE_TAGS = [\n  'br',\n  'b',\n  'i',\n  'label',\n  'hr',\n  'area',\n  'base',\n  'basefont',\n  'input',\n  'img',\n  'link',\n  'meta',\n];\n\nexport const NON_TOP_CANDIDATE_TAGS_RE =\n  new RegExp(`^(${NON_TOP_CANDIDATE_TAGS.join('|')})$`, 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nexport const HNEWS_CONTENT_SELECTORS = [\n  ['.hentry', '.entry-content'],\n  ['entry', '.entry-content'],\n  ['.entry', '.entry_content'],\n  ['.post', '.postbody'],\n  ['.post', '.post_body'],\n  ['.post', '.post-body'],\n];\n\nexport const PHOTO_HINTS = [\n  'figure',\n  'photo',\n  'image',\n  'caption',\n];\nexport const PHOTO_HINTS_RE = new RegExp(PHOTO_HINTS.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const POSITIVE_SCORE_HINTS = [\n  'article',\n  'articlecontent',\n  'instapaper_body',\n  'blog',\n  'body',\n  'content',\n  'entry-content-asset',\n  'entry',\n  'hentry',\n  'main',\n  'Normal',\n  'page',\n  'pagination',\n  'permalink',\n  'post',\n  'story',\n  'text',\n  '[-_]copy', // usatoday\n  '\\\\Bcopy',\n];\n\n// The above list, joined into a matching regular expression\nexport const POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nexport const READABILITY_ASSET = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nexport const NEGATIVE_SCORE_HINTS = [\n  'adbox',\n  'advert',\n  'author',\n  'bio',\n  'bookmark',\n  'bottom',\n  'byline',\n  'clear',\n  'com-',\n  'combx',\n  'comment',\n  'comment\\\\B',\n  'contact',\n  'copy',\n  'credit',\n  'crumb',\n  'date',\n  'deck',\n  'excerpt',\n  'featured', // tnr.com has a featured_content which throws us off\n  'foot',\n  'footer',\n  'footnote',\n  'graf',\n  'head',\n  'info',\n  'infotext', // newscientist.com copyright\n  'instapaper_ignore',\n  'jump',\n  'linebreak',\n  'link',\n  'masthead',\n  'media',\n  'meta',\n  'modal',\n  'outbrain', // slate.com junk\n  'promo',\n  'pr_', // autoblog - press release\n  'related',\n  'respond',\n  'roundcontent', // lifehacker restricted content warning\n  'scroll',\n  'secondary',\n  'share',\n  'shopping',\n  'shoutbox',\n  'side',\n  'sidebar',\n  'sponsor',\n  'stamp',\n  'sub',\n  'summary',\n  'tags',\n  'tools',\n  'widget',\n];\n// The above list, joined into a matching regular expression\nexport const NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// Match a digit. Pretty clear.\nexport const DIGIT_RE = new RegExp('[0-9]');\n\n// Match 2 or more consecutive <br> tags\nexport const BR_TAGS_RE = new RegExp('(<br[^>]*>[ \\n\\r\\t]*){2,}', 'i');\n\n// Match 1 BR tag.\nexport const BR_TAG_RE = new RegExp('<br[^>]*>', 'i');\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nexport const BLOCK_LEVEL_TAGS = [\n  'article',\n  'aside',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'col',\n  'colgroup',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'header',\n  'hgroup',\n  'hr',\n  'li',\n  'map',\n  'object',\n  'ol',\n  'output',\n  'p',\n  'pre',\n  'progress',\n  'section',\n  'table',\n  'tbody',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'tr',\n  'ul',\n  'video',\n];\nexport const BLOCK_LEVEL_TAGS_RE = new RegExp(`^(${BLOCK_LEVEL_TAGS.join('|')})$`, 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nconst candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nexport const CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nconst candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nexport const CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nexport const UNLIKELY_RE = new RegExp(`!(${candidatesWhitelist})|(${candidatesBlacklist})`, 'i');\n\nexport const PARAGRAPH_SCORE_TAGS = new RegExp('^(p|li|span|pre)$', 'i');\nexport const CHILD_CONTENT_TAGS = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nexport const BAD_TAGS = new RegExp('^(address|form)$', 'i');\n\nexport const HTML_OR_BODY_RE = new RegExp('^(html|body)$', 'i');\n","import {\n  NEGATIVE_SCORE_RE,\n  POSITIVE_SCORE_RE,\n  PHOTO_HINTS_RE,\n  READABILITY_ASSET,\n} from './constants';\n\n// Get the score of a node based on its className and id.\nexport default function getWeight(node) {\n  const classes = node.attr('class');\n  const id = node.attr('id');\n  let score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n","// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nexport default function getScore($node) {\n  // console.log(\"NODE\", $node, $node.attr('score'))\n  return parseFloat($node.attr('score')) || null;\n}\n","// return 1 for every comma in text\nexport default function scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n","const idkRe = new RegExp('^(p|pre)$', 'i');\n\nexport default function scoreLength(textLength, tagName = 'p') {\n  const chunks = textLength / 50;\n\n  if (chunks > 0) {\n    let lengthBonus;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n","import {\n  scoreCommas,\n  scoreLength,\n} from './index';\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nexport default function scoreParagraph(node) {\n  let score = 1;\n  const text = node.text().trim();\n  const textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n","export default function setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n","import {\n  getOrInitScore,\n  setScore,\n} from './index';\n\nexport default function addScore($node, $, amount) {\n  try {\n    const score = getOrInitScore($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n","import { addScore } from './index';\n\n// Adds 1/4 of a child's score to its parent\nexport default function addToParent(node, $, score) {\n  const parent = node.parent();\n  if (parent) {\n    addScore(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n","import {\n  getScore,\n  scoreNode,\n  getWeight,\n  addToParent,\n} from './index';\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nexport default function getOrInitScore($node, $, weightNodes = true) {\n  let score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent($node, $, score);\n\n  return score;\n}\n","import { scoreParagraph } from './index';\nimport {\n  PARAGRAPH_SCORE_TAGS,\n  CHILD_CONTENT_TAGS,\n  BAD_TAGS,\n} from './constants';\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nexport default function scoreNode($node) {\n  const { tagName } = $node.get(0);\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n  if (PARAGRAPH_SCORE_TAGS.test(tagName)) {\n    return scoreParagraph($node);\n  } else if (tagName.toLowerCase() === 'div') {\n    return 5;\n  } else if (CHILD_CONTENT_TAGS.test(tagName)) {\n    return 3;\n  } else if (BAD_TAGS.test(tagName)) {\n    return -3;\n  } else if (tagName.toLowerCase() === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n","import { convertNodeTo } from 'utils/dom';\n\nimport { HNEWS_CONTENT_SELECTORS } from './constants';\nimport {\n  scoreNode,\n  setScore,\n  getOrInitScore,\n  addScore,\n} from './index';\n\nfunction convertSpans($node, $) {\n  if ($node.get(0)) {\n    const { tagName } = $node.get(0);\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans($node, $);\n    addScore($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre').not('[score]').each((index, node) => {\n    // The raw score for this paragraph, before we add any parent/child\n    // scores.\n    let $node = $(node);\n    $node = setScore($node, $, getOrInitScore($node, $, weightNodes));\n\n    const $parent = $node.parent();\n    const rawScore = scoreNode($node);\n\n    addScoreTo($parent, $, rawScore, weightNodes);\n    if ($parent) {\n      // Add half of the individual content score to the\n      // grandparent\n      addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n    }\n  });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nexport default function scoreContent($, weightNodes = true) {\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS.forEach(([parentSelector, childSelector]) => {\n    $(`${parentSelector} ${childSelector}`).each((index, node) => {\n      addScore($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n","const NORMALIZE_RE = /\\s{2,}/g;\n\nexport default function normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n","// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nexport default function extractFromUrl(url, regexList) {\n  const matchRe = regexList.find(re => re.test(url));\n  // const matchRe = null\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n","// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nexport const PAGE_IN_HREF_RE = new RegExp('(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})', 'i');\n\nexport const HAS_ALPHA_RE = /[a-z]/i;\n\nexport const IS_ALPHA_RE = /^[a-z]+$/i;\nexport const IS_DIGIT_RE = /^[0-9]+$/i;\n","import URL from 'url';\n\nimport {\n  HAS_ALPHA_RE,\n  IS_ALPHA_RE,\n  IS_DIGIT_RE,\n  PAGE_IN_HREF_RE,\n} from './constants';\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  let goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nexport default function articleBaseUrl(url, parsed) {\n  const parsedUrl = parsed || URL.parse(url);\n  const { protocol, host, path } = parsedUrl;\n\n  let firstSegmentHasLetters = false;\n  const cleanedSegments = path.split('/')\n  .reverse()\n  .reduce((acc, rawSegment, index) => {\n    let segment = rawSegment;\n\n    // Split off and save anything that looks like a file type.\n    if (segment.includes('.')) {\n      const [possibleSegment, fileExt] = segment.split('.');\n      if (IS_ALPHA_RE.test(fileExt)) {\n        segment = possibleSegment;\n      }\n    }\n\n    // If our first or second segment has anything looking like a page\n    // number, remove it.\n    if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n      segment = segment.replace(PAGE_IN_HREF_RE, '');\n    }\n\n    // If we're on the first segment, check to see if we have any\n    // characters in it. The first segment is actually the last bit of\n    // the URL, and this will be helpful to determine if we're on a URL\n    // segment that looks like \"/2/\" for example.\n    if (index === 0) {\n      firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n    }\n\n    // If it's not marked for deletion, push it to cleaned_segments.\n    if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n      acc.push(segment);\n    }\n\n    return acc;\n  }, []);\n\n  return `${protocol}//${host}${cleanedSegments.reverse().join('/')}`;\n}\n","// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nconst SENTENCE_END_RE = new RegExp('.( |$)');\nexport default function hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n","import {\n  textLength,\n  linkDensity,\n} from 'utils/dom';\nimport { hasSentenceEnd } from 'utils/text';\n\nimport { NON_TOP_CANDIDATE_TAGS_RE } from './constants';\nimport { getScore } from './index';\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nexport default function mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  const siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  const wrappingDiv = $('<div></div>');\n\n  $candidate.parent().children().each((index, sibling) => {\n    const $sibling = $(sibling);\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE.test(sibling.tagName)) {\n      return null;\n    }\n\n    const siblingScore = getScore($sibling);\n    if (siblingScore) {\n      if ($sibling.get(0) === $candidate.get(0)) {\n        wrappingDiv.append($sibling);\n      } else {\n        let contentBonus = 0;\n        const density = linkDensity($sibling);\n\n        // If sibling has a very low link density,\n        // give it a small bonus\n        if (density < 0.05) {\n          contentBonus += 20;\n        }\n\n        // If sibling has a high link density,\n        // give it a penalty\n        if (density >= 0.5) {\n          contentBonus -= 20;\n        }\n\n        // If sibling node has the same class as\n        // candidate, give it a bonus\n        if ($sibling.attr('class') === $candidate.attr('class')) {\n          contentBonus += topScore * 0.2;\n        }\n\n        const newScore = siblingScore + contentBonus;\n\n        if (newScore >= siblingScoreThreshold) {\n          return wrappingDiv.append($sibling);\n        } else if (sibling.tagName === 'p') {\n          const siblingContent = $sibling.text();\n          const siblingContentLength = textLength(siblingContent);\n\n          if (siblingContentLength > 80 && density < 0.25) {\n            return wrappingDiv.append($sibling);\n          } else if (siblingContentLength <= 80 && density === 0 &&\n                    hasSentenceEnd(siblingContent)) {\n            return wrappingDiv.append($sibling);\n          }\n        }\n      }\n    }\n\n    return null;\n  });\n\n  if (wrappingDiv.children().length === 1 &&\n    wrappingDiv.children().first().get(0) === $candidate.get(0)) {\n    return $candidate;\n  }\n\n  return wrappingDiv;\n}\n","// Scoring\nexport { default as getWeight } from './get-weight';\nexport { default as getScore } from './get-score';\nexport { default as scoreCommas } from './score-commas';\nexport { default as scoreLength } from './score-length';\nexport { default as scoreParagraph } from './score-paragraph';\nexport { default as setScore } from './set-score';\nexport { default as addScore } from './add-score';\nexport { default as addToParent } from './add-to-parent';\nexport { default as getOrInitScore } from './get-or-init-score';\nexport { default as scoreNode } from './score-node';\nexport { default as scoreContent } from './score-content';\nexport { default as findTopCandidate } from './find-top-candidate';\n","import {\n  getScore,\n  setScore,\n  getOrInitScore,\n  scoreCommas,\n} from 'extractors/generic/content/scoring';\n\nimport { CLEAN_CONDITIONALLY_TAGS } from './constants';\nimport { normalizeSpaces } from '../text';\nimport { linkDensity } from './index';\n\nfunction removeUnlessContent($node, $, weight) {\n    // Explicitly save entry-content-asset tags, which are\n    // noted as valuable in the Publisher guidelines. For now\n    // this works everywhere. We may want to consider making\n    // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  const content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    const pCount = $('p', $node).length;\n    const inputCount = $('input', $node).length;\n\n      // Looks like a form, too many inputs.\n    if (inputCount > (pCount / 3)) {\n      $node.remove();\n      return;\n    }\n\n    const contentLength = content.length;\n    const imgCount = $('img', $node).length;\n\n      // Content is too short, and there are no images, so\n      // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    const density = linkDensity($node);\n\n      // Too high of link density, is probably a menu or\n      // something similar.\n      // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n      // Too high of a link density, despite the score being\n      // high.\n    if (weight >= 25 && density > 0.5) {\n        // Don't remove the node if it's a list and the\n        // previous sibling starts with a colon though. That\n        // means it's probably content.\n      const tagName = $node.get(0).tagName.toLowerCase();\n      const nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        const previousNode = $node.prev();\n        if (previousNode && normalizeSpaces(previousNode.text()).slice(-1) === ':') {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    const scriptCount = $('script', $node).length;\n\n      // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n      return;\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nexport default function cleanTags($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each((index, node) => {\n    const $node = $(node);\n    let weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n","/* eslint-disable */\nimport URL from 'url';\n\nimport {\n  getAttrs,\n  setAttr,\n} from 'utils/dom';\n\nfunction absolutize($, rootUrl, attr, $content) {\n  $(`[${attr}]`, $content).each((_, node) => {\n    const attrs = getAttrs(node);\n    const url = attrs[attr];\n\n    if (url) {\n      const absoluteUrl = URL.resolve(rootUrl, url);\n      setAttr(node, attr, absoluteUrl);\n    }\n  });\n}\n\nexport default function makeLinksAbsolute($content, $, url) {\n  ['href', 'src'].forEach(attr => absolutize($, url, attr, $content));\n\n  return $content;\n}\n","export function textLength(text) {\n  return text.trim()\n             .replace(/\\s+/g, ' ')\n             .length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nexport function linkDensity($node) {\n  const totalTextLength = textLength($node.text());\n\n  const linkText = $node.find('a').text();\n  const linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  } else if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n","import { withinComment } from 'utils/dom';\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nexport default function extractFromSelectors(\n  $,\n  selectors,\n  maxChildren = 1,\n  textOnly = true\n) {\n  for (const selector of selectors) {\n    const nodes = $(selector);\n\n    // If we didn't get exactly one of this selector, this may be\n    // a list of articles or comments. Skip it.\n    if (nodes.length === 1) {\n      const $node = $(nodes[0]);\n\n      if (isGoodNode($node, maxChildren)) {\n        let content;\n        if (textOnly) {\n          content = $node.text();\n        } else {\n          content = $node.html();\n        }\n\n        if (content) {\n          return content;\n        }\n      }\n    }\n  }\n\n  return null;\n}\n","// strips all tags from a string of text\nexport default function stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  const cleanText = $(`<span>${text}</span>`).text();\n  return cleanText === '' ? text : cleanText;\n}\n","import { getAttrs } from 'utils/dom';\n\nexport default function withinComment($node) {\n  const parents = $node.parents().toArray();\n  const commentParent = parents.find((parent) => {\n    const attrs = getAttrs(parent);\n    const { class: nodeClass, id } = attrs;\n    const classAndId = `${nodeClass} ${id}`;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n","// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nexport default function nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n","export default function getAttrs(node) {\n  const { attribs, attributes } = node;\n\n  if (!attribs && attributes) {\n    const attrs = Reflect.ownKeys(attributes).reduce((acc, index) => {\n      const attr = attributes[index];\n\n      if (!attr.name || !attr.value) return acc;\n\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n    return attrs;\n  }\n\n  return attribs;\n}\n","export default function setAttr(node, attr, val) {\n  if (node.attribs) {\n    node.attribs[attr] = val;\n  } else if (node.attributes) {\n    node.setAttribute(attr, val);\n  }\n\n  return node;\n}\n","/* eslint-disable */\nexport default function setAttrs(node, attrs) {\n  if (node.attribs) {\n    node.attribs = attrs;\n  } else if (node.attributes) {\n    while(node.attributes.length > 0)\n      node.removeAttribute(node.attributes[0].name);\n\n    Reflect.ownKeys(attrs).forEach(key => {\n      node.setAttribute(key, attrs[key]);\n    })\n  }\n\n  return node;\n}\n","// DOM manipulation\nexport { default as stripUnlikelyCandidates } from './strip-unlikely-candidates';\nexport { default as brsToPs } from './brs-to-ps';\nexport { default as paragraphize } from './paragraphize';\nexport { default as convertToParagraphs } from './convert-to-paragraphs';\nexport { default as convertNodeTo } from './convert-node-to';\nexport { default as cleanImages } from './clean-images';\nexport { default as markToKeep } from './mark-to-keep';\nexport { default as stripJunkTags } from './strip-junk-tags';\nexport { default as cleanHOnes } from './clean-h-ones';\nexport { default as cleanAttributes } from './clean-attributes';\nexport { default as removeEmpty } from './remove-empty';\nexport { default as cleanTags } from './clean-tags';\nexport { default as cleanHeaders } from './clean-headers';\nexport { default as rewriteTopLevel } from './rewrite-top-level';\nexport { default as makeLinksAbsolute } from './make-links-absolute';\nexport { textLength, linkDensity } from './link-density';\nexport { default as extractFromMeta } from './extract-from-meta';\nexport { default as extractFromSelectors } from './extract-from-selectors';\nexport { default as stripTags } from './strip-tags';\nexport { default as withinComment } from './within-comment';\nexport { default as nodeIsSufficient } from './node-is-sufficient';\nexport { default as isWordpress } from './is-wordpress';\nexport { default as getAttrs } from './get-attrs';\nexport { default as setAttr } from './set-attr';\nexport { default as setAttrs } from './set-attrs';\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar _regeneratorRuntime = _interopDefault(require('babel-runtime/regenerator'));\nvar _extends = _interopDefault(require('babel-runtime/helpers/extends'));\nvar _asyncToGenerator = _interopDefault(require('babel-runtime/helpers/asyncToGenerator'));\nvar URL = _interopDefault(require('url'));\nvar cheerio = _interopDefault(require('cheerio'));\nvar _Promise = _interopDefault(require('babel-runtime/core-js/promise'));\nvar request = _interopDefault(require('request'));\nvar _Reflect$ownKeys = _interopDefault(require('babel-runtime/core-js/reflect/own-keys'));\nvar _toConsumableArray = _interopDefault(require('babel-runtime/helpers/toConsumableArray'));\nvar _defineProperty = _interopDefault(require('babel-runtime/helpers/defineProperty'));\nvar _slicedToArray = _interopDefault(require('babel-runtime/helpers/slicedToArray'));\nvar _typeof = _interopDefault(require('babel-runtime/helpers/typeof'));\nvar _getIterator = _interopDefault(require('babel-runtime/core-js/get-iterator'));\nvar _Object$keys = _interopDefault(require('babel-runtime/core-js/object/keys'));\nvar stringDirection = _interopDefault(require('string-direction'));\nvar validUrl = _interopDefault(require('valid-url'));\nvar moment = _interopDefault(require('moment'));\nvar wuzzy = _interopDefault(require('wuzzy'));\nvar difflib = _interopDefault(require('difflib'));\nvar _Array$from = _interopDefault(require('babel-runtime/core-js/array/from'));\nvar ellipsize = _interopDefault(require('ellipsize'));\n\nvar _marked = [range].map(_regeneratorRuntime.mark);\n\nfunction range() {\n  var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return _regeneratorRuntime.wrap(function range$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(start <= end)) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 3;\n          return start += 1;\n\n        case 3:\n          _context.next = 0;\n          break;\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked[0], this);\n}\n\n// extremely simple url validation as a first step\nfunction validateUrl(_ref) {\n  var hostname = _ref.hostname;\n\n  // If this isn't a valid url, return an error message\n  return !!hostname;\n}\n\nvar Errors = {\n  badUrl: {\n    error: true,\n    messages: 'The url parameter passed does not look like a valid URL. Please check your data and try again.'\n  }\n};\n\nvar REQUEST_HEADERS = {\n  'User-Agent': 'Readability - http://readability.com/about/'\n};\n\n// The number of milliseconds to attempt to fetch a resource before timing out.\nvar FETCH_TIMEOUT = 10000;\n\n// Content types that we do not extract content from\nvar BAD_CONTENT_TYPES = ['audio/mpeg', 'image/gif', 'image/jpeg', 'image/jpg'];\n\nvar BAD_CONTENT_TYPES_RE = new RegExp('^(' + BAD_CONTENT_TYPES.join('|') + ')$', 'i');\n\n// Use this setting as the maximum size an article can be\n// for us to attempt parsing. Defaults to 5 MB.\nvar MAX_CONTENT_LENGTH = 5242880;\n\n// Turn the global proxy on or off\n// Proxying is not currently enabled in Python source\n// so not implementing logic in port.\n\nfunction get(options) {\n  // eslint-disable-line\n  return new _Promise(function (resolve, reject) {\n    request(options, function (err, response, body) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve({ body: body, response: response });\n      }\n    });\n  });\n}\n\n// Evaluate a response to ensure it's something we should be keeping.\n// This does not validate in the sense of a response being 200 level or\n// not. Validation here means that we haven't found reason to bail from\n// further processing of this url.\n\nfunction validateResponse(response) {\n  var parseNon2xx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  // Check if we got a valid status code\n  // This isn't great, but I'm requiring a statusMessage to be set\n  // before short circuiting b/c nock doesn't set it in tests\n  // statusMessage only not set in nock response, in which case\n  // I check statusCode, which is currently only 200 for OK responses\n  // in tests\n  if (response.statusMessage && response.statusMessage !== 'OK' || response.statusCode !== 200) {\n    if (!response.statusCode) {\n      throw new Error('Unable to fetch content. Original exception was ' + response.error);\n    } else if (!parseNon2xx) {\n      throw new Error('Resource returned a response status code of ' + response.statusCode + ' and resource was instructed to reject non-2xx level status codes.');\n    }\n  }\n\n  var _response$headers = response.headers,\n      contentType = _response$headers['content-type'],\n      contentLength = _response$headers['content-length'];\n\n  // Check that the content is not in BAD_CONTENT_TYPES\n\n  if (BAD_CONTENT_TYPES_RE.test(contentType)) {\n    throw new Error('Content-type for this resource was ' + contentType + ' and is not allowed.');\n  }\n\n  // Check that the content length is below maximum\n  if (contentLength > MAX_CONTENT_LENGTH) {\n    throw new Error('Content for this resource was too large. Maximum content length is ' + MAX_CONTENT_LENGTH + '.');\n  }\n\n  return true;\n}\n\n// Grabs the last two pieces of the URL and joins them back together\n// This is to get the 'livejournal.com' from 'erotictrains.livejournal.com'\n\n\n// Set our response attribute to the result of fetching our URL.\n// TODO: This should gracefully handle timeouts and raise the\n//       proper exceptions on the many failure cases of HTTP.\n// TODO: Ensure we are not fetching something enormous. Always return\n//       unicode content for HTML, with charset conversion.\n\nvar fetchResource$1 = (function () {\n  var _ref2 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(url, parsedUrl) {\n    var options, _ref3, response, body;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            parsedUrl = parsedUrl || URL.parse(encodeURI(url));\n\n            options = {\n              url: parsedUrl,\n              headers: _extends({}, REQUEST_HEADERS),\n              timeout: FETCH_TIMEOUT,\n              // Don't set encoding; fixes issues\n              // w/gzipped responses\n              encoding: null,\n              // Accept cookies\n              jar: true,\n              // Accept and decode gzip\n              gzip: true,\n              // Follow any redirect\n              followAllRedirects: true\n            };\n            _context.next = 4;\n            return get(options);\n\n          case 4:\n            _ref3 = _context.sent;\n            response = _ref3.response;\n            body = _ref3.body;\n            _context.prev = 7;\n\n            validateResponse(response);\n            return _context.abrupt('return', {\n              body: body,\n              response: response\n            });\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context['catch'](7);\n            return _context.abrupt('return', Errors.badUrl);\n\n          case 15:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[7, 12]]);\n  }));\n\n  function fetchResource(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  }\n\n  return fetchResource;\n})();\n\nfunction convertMetaProp($, from, to) {\n  $('meta[' + from + ']').each(function (_, node) {\n    var $node = $(node);\n\n    var value = $node.attr(from);\n    $node.attr(to, value);\n    $node.removeAttr(from);\n  });\n\n  return $;\n}\n\n// For ease of use in extracting from meta tags,\n// replace the \"content\" attribute on meta tags with the\n// \"value\" attribute.\n//\n// In addition, normalize 'property' attributes to 'name' for ease of\n// querying later. See, e.g., og or twitter meta tags.\n\nfunction normalizeMetaTags($) {\n  $ = convertMetaProp($, 'content', 'value');\n  $ = convertMetaProp($, 'property', 'name');\n  return $;\n}\n\n// Spacer images to be removed\nvar SPACER_RE = new RegExp('trans|transparent|spacer|blank', 'i');\n\n// The class we will use to mark elements we want to keep\n// but would normally remove\nvar KEEP_CLASS = 'mercury-parser-keep';\n\nvar KEEP_SELECTORS = ['iframe[src^=\"https://www.youtube.com\"]', 'iframe[src^=\"http://www.youtube.com\"]', 'iframe[src^=\"https://player.vimeo\"]', 'iframe[src^=\"http://player.vimeo\"]'];\n\n// A list of tags to strip from the output if we encounter them.\nvar STRIP_OUTPUT_TAGS = ['title', 'script', 'noscript', 'link', 'style', 'hr', 'embed', 'iframe', 'object'];\n\n// cleanAttributes\nvar REMOVE_ATTRS = ['style', 'align'];\nvar REMOVE_ATTR_SELECTORS = REMOVE_ATTRS.map(function (selector) {\n  return '[' + selector + ']';\n});\nvar REMOVE_ATTR_LIST = REMOVE_ATTRS.join(',');\nvar WHITELIST_ATTRS = ['src', 'srcset', 'href', 'class', 'id', 'alt'];\nvar WHITELIST_ATTRS_RE = new RegExp('^(' + WHITELIST_ATTRS.join('|') + ')$', 'i');\n\n// removeEmpty\nvar REMOVE_EMPTY_TAGS = ['p'];\nvar REMOVE_EMPTY_SELECTORS = REMOVE_EMPTY_TAGS.map(function (tag) {\n  return tag + ':empty';\n}).join(',');\n\n// cleanTags\nvar CLEAN_CONDITIONALLY_TAGS = ['ul', 'ol', 'table', 'div', 'button', 'form'].join(',');\n\n// cleanHeaders\nvar HEADER_TAGS = ['h2', 'h3', 'h4', 'h5', 'h6'];\nvar HEADER_TAG_LIST = HEADER_TAGS.join(',');\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nvar UNLIKELY_CANDIDATES_BLACKLIST = ['ad-break', 'adbox', 'advert', 'addthis', 'agegate', 'aux', 'blogger-labels', 'combx', 'comment', 'conversation', 'disqus', 'entry-unrelated', 'extra', 'foot',\n// 'form', // This is too generic, has too many false positives\n'header', 'hidden', 'loader', 'login', // Note: This can hit 'blogindex'.\n'menu', 'meta', 'nav', 'outbrain', 'pager', 'pagination', 'predicta', // readwriteweb inline ad box\n'presence_control_external', // lifehacker.com container full of false positives\n'popup', 'printfriendly', 'related', 'remove', 'remark', 'rss', 'share', 'shoutbox', 'sidebar', 'sociable', 'sponsor', 'taboola', 'tools'];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nvar UNLIKELY_CANDIDATES_WHITELIST = ['and', 'article', 'body', 'blogindex', 'column', 'content', 'entry-content-asset', 'format', // misuse of form\n'hfeed', 'hentry', 'hatom', 'main', 'page', 'posts', 'shadow'];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nvar DIV_TO_P_BLOCK_TAGS = ['a', 'blockquote', 'dl', 'div', 'img', 'p', 'pre', 'table'].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\n\n\n\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\n\n\n\n\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar POSITIVE_SCORE_HINTS = ['article', 'articlecontent', 'instapaper_body', 'blog', 'body', 'content', 'entry-content-asset', 'entry', 'hentry', 'main', 'Normal', 'page', 'pagination', 'permalink', 'post', 'story', 'text', '[-_]copy', // usatoday\n'\\\\Bcopy'];\n\n// The above list, joined into a matching regular expression\nvar POSITIVE_SCORE_RE = new RegExp(POSITIVE_SCORE_HINTS.join('|'), 'i');\n\n// Readability publisher-specific guidelines\n\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar NEGATIVE_SCORE_HINTS = ['adbox', 'advert', 'author', 'bio', 'bookmark', 'bottom', 'byline', 'clear', 'com-', 'combx', 'comment', 'comment\\\\B', 'contact', 'copy', 'credit', 'crumb', 'date', 'deck', 'excerpt', 'featured', // tnr.com has a featured_content which throws us off\n'foot', 'footer', 'footnote', 'graf', 'head', 'info', 'infotext', // newscientist.com copyright\n'instapaper_ignore', 'jump', 'linebreak', 'link', 'masthead', 'media', 'meta', 'modal', 'outbrain', // slate.com junk\n'promo', 'pr_', // autoblog - press release\n'related', 'respond', 'roundcontent', // lifehacker restricted content warning\n'scroll', 'secondary', 'share', 'shopping', 'shoutbox', 'side', 'sidebar', 'sponsor', 'stamp', 'sub', 'summary', 'tags', 'tools', 'widget'];\n// The above list, joined into a matching regular expression\nvar NEGATIVE_SCORE_RE = new RegExp(NEGATIVE_SCORE_HINTS.join('|'), 'i');\n\n// XPath to try to determine if a page is wordpress. Not always successful.\nvar IS_WP_SELECTOR = 'meta[name=generator][value^=WordPress]';\n\n// Match a digit. Pretty clear.\n\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\n\n\n\n// Match any phrase that looks like it could be page, or paging, or pagination\nvar PAGE_RE = new RegExp('pag(e|ing|inat)', 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\n// export const NEXT_LINK_TEXT_RE = new RegExp('(next|weiter|continue|>([^\\|]|$)|»([^\\|]|$))', 'i');\n\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\n\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\n\n\n// Match 2 or more consecutive <br> tags\n\n\n// Match 1 BR tag.\n\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\nvar BLOCK_LEVEL_TAGS = ['article', 'aside', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'col', 'colgroup', 'dd', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li', 'map', 'object', 'ol', 'output', 'p', 'pre', 'progress', 'section', 'table', 'tbody', 'textarea', 'tfoot', 'th', 'thead', 'tr', 'ul', 'video'];\nvar BLOCK_LEVEL_TAGS_RE = new RegExp('^(' + BLOCK_LEVEL_TAGS.join('|') + ')$', 'i');\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nvar candidatesBlacklist = UNLIKELY_CANDIDATES_BLACKLIST.join('|');\nvar CANDIDATES_BLACKLIST = new RegExp(candidatesBlacklist, 'i');\n\nvar candidatesWhitelist = UNLIKELY_CANDIDATES_WHITELIST.join('|');\nvar CANDIDATES_WHITELIST = new RegExp(candidatesWhitelist, 'i');\n\nfunction stripUnlikelyCandidates($) {\n  //  Loop through the provided document and remove any non-link nodes\n  //  that are unlikely candidates for article content.\n  //\n  //  Links are ignored because there are very often links to content\n  //  that are identified as non-body-content, but may be inside\n  //  article-like content.\n  //\n  //  :param $: a cheerio object to strip nodes from\n  //  :return $: the cleaned cheerio object\n  $('*').not('a').each(function (index, node) {\n    var $node = $(node);\n    var classes = $node.attr('class');\n    var id = $node.attr('id');\n    if (!id && !classes) return;\n\n    var classAndId = (classes || '') + ' ' + (id || '');\n    if (CANDIDATES_WHITELIST.test(classAndId)) {\n      return;\n    } else if (CANDIDATES_BLACKLIST.test(classAndId)) {\n      $node.remove();\n    }\n  });\n\n  return $;\n}\n\n// ## NOTES:\n// Another good candidate for refactoring/optimizing.\n// Very imperative code, I don't love it. - AP\n\n//  Given cheerio object, convert consecutive <br /> tags into\n//  <p /> tags instead.\n//\n//  :param $: A cheerio object\n\nfunction brsToPs$$1($) {\n  var collapsing = false;\n  $('br').each(function (index, element) {\n    var $element = $(element);\n    var nextElement = $element.next().get(0);\n\n    if (nextElement && nextElement.tagName.toLowerCase() === 'br') {\n      collapsing = true;\n      $element.remove();\n    } else if (collapsing) {\n      collapsing = false;\n      // $(element).replaceWith('<p />')\n      paragraphize(element, $, true);\n    }\n  });\n\n  return $;\n}\n\n// Given a node, turn it into a P if it is not already a P, and\n// make sure it conforms to the constraints of a P tag (I.E. does\n// not contain any other block tags.)\n//\n// If the node is a <br />, it treats the following inline siblings\n// as if they were its children.\n//\n// :param node: The node to paragraphize; this is a raw node\n// :param $: The cheerio object to handle dom manipulation\n// :param br: Whether or not the passed node is a br\n\nfunction paragraphize(node, $) {\n  var br = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var $node = $(node);\n\n  if (br) {\n    var sibling = node.nextSibling;\n    var p = $('<p></p>');\n\n    // while the next node is text or not a block level element\n    // append it to a new p node\n    while (sibling && !(sibling.tagName && BLOCK_LEVEL_TAGS_RE.test(sibling.tagName))) {\n      var nextSibling = sibling.nextSibling;\n      $(sibling).appendTo(p);\n      sibling = nextSibling;\n    }\n\n    $node.replaceWith(p);\n    $node.remove();\n    return $;\n  }\n\n  return $;\n}\n\nfunction convertDivs($) {\n  $('div').each(function (index, div) {\n    var $div = $(div);\n    var convertable = $div.children(DIV_TO_P_BLOCK_TAGS).length === 0;\n\n    if (convertable) {\n      convertNodeTo$$1($div, $, 'p');\n    }\n  });\n\n  return $;\n}\n\nfunction convertSpans($) {\n  $('span').each(function (index, span) {\n    var $span = $(span);\n    var convertable = $span.parents('p, div').length === 0;\n    if (convertable) {\n      convertNodeTo$$1($span, $, 'p');\n    }\n  });\n\n  return $;\n}\n\n// Loop through the provided doc, and convert any p-like elements to\n// actual paragraph tags.\n//\n//   Things fitting this criteria:\n//   * Multiple consecutive <br /> tags.\n//   * <div /> tags without block level elements inside of them\n//   * <span /> tags who are not children of <p /> or <div /> tags.\n//\n//   :param $: A cheerio object to search\n//   :return cheerio object with new p elements\n//   (By-reference mutation, though. Returned just for convenience.)\n\nfunction convertToParagraphs$$1($) {\n  $ = brsToPs$$1($);\n  $ = convertDivs($);\n  $ = convertSpans($);\n\n  return $;\n}\n\nfunction convertNodeTo$$1($node, $) {\n  var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'p';\n\n  var node = $node.get(0);\n  if (!node) {\n    return $;\n  }\n  var attrs = getAttrs(node) || {};\n\n  var attribString = _Reflect$ownKeys(attrs).map(function (key) {\n    return key + '=' + attrs[key];\n  }).join(' ');\n  var html = void 0;\n\n  if ($.browser) {\n    // In the browser, the contents of noscript tags aren't rendered, therefore\n    // transforms on the noscript tag (commonly used for lazy-loading) don't work\n    // as expected. This test case handles that\n    html = node.tagName.toLowerCase() === 'noscript' ? $node.text() : $node.html();\n  } else {\n    html = $node.contents();\n  }\n  $node.replaceWith('<' + tag + ' ' + attribString + '>' + html + '</' + tag + '>');\n  return $;\n}\n\nfunction cleanForHeight($img, $) {\n  var height = parseInt($img.attr('height'), 10);\n  var width = parseInt($img.attr('width'), 10) || 20;\n\n  // Remove images that explicitly have very small heights or\n  // widths, because they are most likely shims or icons,\n  // which aren't very useful for reading.\n  if ((height || 20) < 10 || width < 10) {\n    $img.remove();\n  } else if (height) {\n    // Don't ever specify a height on images, so that we can\n    // scale with respect to width without screwing up the\n    // aspect ratio.\n    $img.removeAttr('height');\n  }\n\n  return $;\n}\n\n// Cleans out images where the source string matches transparent/spacer/etc\n// TODO This seems very aggressive - AP\nfunction removeSpacers($img, $) {\n  if (SPACER_RE.test($img.attr('src'))) {\n    $img.remove();\n  }\n\n  return $;\n}\n\nfunction cleanImages($article, $) {\n  $article.find('img').each(function (index, img) {\n    var $img = $(img);\n\n    cleanForHeight($img, $);\n    removeSpacers($img, $);\n  });\n\n  return $;\n}\n\nfunction markToKeep(article, $, url) {\n  var tags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n  if (tags.length === 0) {\n    tags = KEEP_SELECTORS;\n  }\n\n  if (url) {\n    var _URL$parse = URL.parse(url),\n        protocol = _URL$parse.protocol,\n        hostname = _URL$parse.hostname;\n\n    tags = [].concat(_toConsumableArray(tags), ['iframe[src^=\"' + protocol + '//' + hostname + '\"]']);\n  }\n\n  $(tags.join(','), article).addClass(KEEP_CLASS);\n\n  return $;\n}\n\nfunction stripJunkTags(article, $) {\n  var tags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  if (tags.length === 0) {\n    tags = STRIP_OUTPUT_TAGS;\n  }\n\n  // Remove matching elements, but ignore\n  // any element with a class of mercury-parser-keep\n  $(tags.join(','), article).not('.' + KEEP_CLASS).remove();\n\n  // Remove the mercury-parser-keep class from result\n  $('.' + KEEP_CLASS, article).removeClass(KEEP_CLASS);\n\n  return $;\n}\n\n// H1 tags are typically the article title, which should be extracted\n// by the title extractor instead. If there's less than 3 of them (<3),\n// strip them. Otherwise, turn 'em into H2s.\n\nfunction cleanHOnes$$1(article, $) {\n  var $hOnes = $('h1', article);\n\n  if ($hOnes.length < 3) {\n    $hOnes.each(function (index, node) {\n      return $(node).remove();\n    });\n  } else {\n    $hOnes.each(function (index, node) {\n      convertNodeTo$$1($(node), $, 'h2');\n    });\n  }\n\n  return $;\n}\n\nfunction removeAllButWhitelist($article) {\n  $article.find('*').each(function (index, node) {\n    var attrs = getAttrs(node);\n\n    setAttrs(node, _Reflect$ownKeys(attrs).reduce(function (acc, attr) {\n      if (WHITELIST_ATTRS_RE.test(attr)) {\n        return _extends({}, acc, _defineProperty({}, attr, attrs[attr]));\n      }\n\n      return acc;\n    }, {}));\n  });\n\n  return $article;\n}\n\n// function removeAttrs(article, $) {\n//   REMOVE_ATTRS.forEach((attr) => {\n//     $(`[${attr}]`, article).removeAttr(attr);\n//   });\n// }\n\n// Remove attributes like style or align\nfunction cleanAttributes$$1($article) {\n  // Grabbing the parent because at this point\n  // $article will be wrapped in a div which will\n  // have a score set on it.\n  return removeAllButWhitelist($article.parent().length ? $article.parent() : $article);\n}\n\nfunction removeEmpty($article, $) {\n  $article.find('p').each(function (index, p) {\n    var $p = $(p);\n    if ($p.find('iframe, img').length === 0 && $p.text().trim() === '') $p.remove();\n  });\n\n  return $;\n}\n\n// // CONTENT FETCHING CONSTANTS ////\n\n// A list of strings that can be considered unlikely candidates when\n// extracting content from a resource. These strings are joined together\n// and then tested for existence using re:test, so may contain simple,\n// non-pipe style regular expression queries if necessary.\nvar UNLIKELY_CANDIDATES_BLACKLIST$1 = ['ad-break', 'adbox', 'advert', 'addthis', 'agegate', 'aux', 'blogger-labels', 'combx', 'comment', 'conversation', 'disqus', 'entry-unrelated', 'extra', 'foot', 'form', 'header', 'hidden', 'loader', 'login', // Note: This can hit 'blogindex'.\n'menu', 'meta', 'nav', 'pager', 'pagination', 'predicta', // readwriteweb inline ad box\n'presence_control_external', // lifehacker.com container full of false positives\n'popup', 'printfriendly', 'related', 'remove', 'remark', 'rss', 'share', 'shoutbox', 'sidebar', 'sociable', 'sponsor', 'tools'];\n\n// A list of strings that can be considered LIKELY candidates when\n// extracting content from a resource. Essentially, the inverse of the\n// blacklist above - if something matches both blacklist and whitelist,\n// it is kept. This is useful, for example, if something has a className\n// of \"rss-content entry-content\". It matched 'rss', so it would normally\n// be removed, however, it's also the entry content, so it should be left\n// alone.\n//\n// These strings are joined together and then tested for existence using\n// re:test, so may contain simple, non-pipe style regular expression queries\n// if necessary.\nvar UNLIKELY_CANDIDATES_WHITELIST$1 = ['and', 'article', 'body', 'blogindex', 'column', 'content', 'entry-content-asset', 'format', // misuse of form\n'hfeed', 'hentry', 'hatom', 'main', 'page', 'posts', 'shadow'];\n\n// A list of tags which, if found inside, should cause a <div /> to NOT\n// be turned into a paragraph tag. Shallow div tags without these elements\n// should be turned into <p /> tags.\nvar DIV_TO_P_BLOCK_TAGS$1 = ['a', 'blockquote', 'dl', 'div', 'img', 'p', 'pre', 'table'].join(',');\n\n// A list of tags that should be ignored when trying to find the top candidate\n// for a document.\nvar NON_TOP_CANDIDATE_TAGS$1 = ['br', 'b', 'i', 'label', 'hr', 'area', 'base', 'basefont', 'input', 'img', 'link', 'meta'];\n\nvar NON_TOP_CANDIDATE_TAGS_RE$1 = new RegExp('^(' + NON_TOP_CANDIDATE_TAGS$1.join('|') + ')$', 'i');\n\n// A list of selectors that specify, very clearly, either hNews or other\n// very content-specific style content, like Blogger templates.\n// More examples here: http://microformats.org/wiki/blog-post-formats\nvar HNEWS_CONTENT_SELECTORS$1 = [['.hentry', '.entry-content'], ['entry', '.entry-content'], ['.entry', '.entry_content'], ['.post', '.postbody'], ['.post', '.post_body'], ['.post', '.post-body']];\n\nvar PHOTO_HINTS$1 = ['figure', 'photo', 'image', 'caption'];\nvar PHOTO_HINTS_RE$1 = new RegExp(PHOTO_HINTS$1.join('|'), 'i');\n\n// A list of strings that denote a positive scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar POSITIVE_SCORE_HINTS$1 = ['article', 'articlecontent', 'instapaper_body', 'blog', 'body', 'content', 'entry-content-asset', 'entry', 'hentry', 'main', 'Normal', 'page', 'pagination', 'permalink', 'post', 'story', 'text', '[-_]copy', // usatoday\n'\\\\Bcopy'];\n\n// The above list, joined into a matching regular expression\nvar POSITIVE_SCORE_RE$1 = new RegExp(POSITIVE_SCORE_HINTS$1.join('|'), 'i');\n\n// Readability publisher-specific guidelines\nvar READABILITY_ASSET$1 = new RegExp('entry-content-asset', 'i');\n\n// A list of strings that denote a negative scoring for this content as being\n// an article container. Checked against className and id.\n//\n// TODO: Perhaps have these scale based on their odds of being quality?\nvar NEGATIVE_SCORE_HINTS$1 = ['adbox', 'advert', 'author', 'bio', 'bookmark', 'bottom', 'byline', 'clear', 'com-', 'combx', 'comment', 'comment\\\\B', 'contact', 'copy', 'credit', 'crumb', 'date', 'deck', 'excerpt', 'featured', // tnr.com has a featured_content which throws us off\n'foot', 'footer', 'footnote', 'graf', 'head', 'info', 'infotext', // newscientist.com copyright\n'instapaper_ignore', 'jump', 'linebreak', 'link', 'masthead', 'media', 'meta', 'modal', 'outbrain', // slate.com junk\n'promo', 'pr_', // autoblog - press release\n'related', 'respond', 'roundcontent', // lifehacker restricted content warning\n'scroll', 'secondary', 'share', 'shopping', 'shoutbox', 'side', 'sidebar', 'sponsor', 'stamp', 'sub', 'summary', 'tags', 'tools', 'widget'];\n// The above list, joined into a matching regular expression\nvar NEGATIVE_SCORE_RE$1 = new RegExp(NEGATIVE_SCORE_HINTS$1.join('|'), 'i');\n\n// Match a digit. Pretty clear.\n\n\n// Match 2 or more consecutive <br> tags\n\n\n// Match 1 BR tag.\n\n\n// A list of all of the block level tags known in HTML5 and below. Taken from\n// http://bit.ly/qneNIT\n\n\n\n// The removal is implemented as a blacklist and whitelist, this test finds\n// blacklisted elements that aren't whitelisted. We do this all in one\n// expression-both because it's only one pass, and because this skips the\n// serialization for whitelisted nodes.\nvar candidatesBlacklist$1 = UNLIKELY_CANDIDATES_BLACKLIST$1.join('|');\n\n\nvar candidatesWhitelist$1 = UNLIKELY_CANDIDATES_WHITELIST$1.join('|');\n\n\n\n\nvar PARAGRAPH_SCORE_TAGS$1 = new RegExp('^(p|li|span|pre)$', 'i');\nvar CHILD_CONTENT_TAGS$1 = new RegExp('^(td|blockquote|ol|ul|dl)$', 'i');\nvar BAD_TAGS$1 = new RegExp('^(address|form)$', 'i');\n\n// Get the score of a node based on its className and id.\nfunction getWeight(node) {\n  var classes = node.attr('class');\n  var id = node.attr('id');\n  var score = 0;\n\n  if (id) {\n    // if id exists, try to score on both positive and negative\n    if (POSITIVE_SCORE_RE$1.test(id)) {\n      score += 25;\n    }\n    if (NEGATIVE_SCORE_RE$1.test(id)) {\n      score -= 25;\n    }\n  }\n\n  if (classes) {\n    if (score === 0) {\n      // if classes exist and id did not contribute to score\n      // try to score on both positive and negative\n      if (POSITIVE_SCORE_RE$1.test(classes)) {\n        score += 25;\n      }\n      if (NEGATIVE_SCORE_RE$1.test(classes)) {\n        score -= 25;\n      }\n    }\n\n    // even if score has been set by id, add score for\n    // possible photo matches\n    // \"try to keep photos if we can\"\n    if (PHOTO_HINTS_RE$1.test(classes)) {\n      score += 10;\n    }\n\n    // add 25 if class matches entry-content-asset,\n    // a class apparently instructed for use in the\n    // Readability publisher guidelines\n    // https://www.readability.com/developers/guidelines\n    if (READABILITY_ASSET$1.test(classes)) {\n      score += 25;\n    }\n  }\n\n  return score;\n}\n\n// returns the score of a node based on\n// the node's score attribute\n// returns null if no score set\nfunction getScore($node) {\n  // console.log(\"NODE\", $node, $node.attr('score'))\n  return parseFloat($node.attr('score')) || null;\n}\n\n// return 1 for every comma in text\nfunction scoreCommas(text) {\n  return (text.match(/,/g) || []).length;\n}\n\nvar idkRe = new RegExp('^(p|pre)$', 'i');\n\nfunction scoreLength(textLength) {\n  var tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'p';\n\n  var chunks = textLength / 50;\n\n  if (chunks > 0) {\n    var lengthBonus = void 0;\n\n    // No idea why p or pre are being tamped down here\n    // but just following the source for now\n    // Not even sure why tagName is included here,\n    // since this is only being called from the context\n    // of scoreParagraph\n    if (idkRe.test(tagName)) {\n      lengthBonus = chunks - 2;\n    } else {\n      lengthBonus = chunks - 1.25;\n    }\n\n    return Math.min(Math.max(lengthBonus, 0), 3);\n  }\n\n  return 0;\n}\n\n// Score a paragraph using various methods. Things like number of\n// commas, etc. Higher is better.\nfunction scoreParagraph$$1(node) {\n  var score = 1;\n  var text = node.text().trim();\n  var textLength = text.length;\n\n  // If this paragraph is less than 25 characters, don't count it.\n  if (textLength < 25) {\n    return 0;\n  }\n\n  // Add points for any commas within this paragraph\n  score += scoreCommas(text);\n\n  // For every 50 characters in this paragraph, add another point. Up\n  // to 3 points.\n  score += scoreLength(textLength);\n\n  // Articles can end with short paragraphs when people are being clever\n  // but they can also end with short paragraphs setting up lists of junk\n  // that we strip. This negative tweaks junk setup paragraphs just below\n  // the cutoff threshold.\n  if (text.slice(-1) === ':') {\n    score -= 1;\n  }\n\n  return score;\n}\n\nfunction setScore($node, $, score) {\n  $node.attr('score', score);\n  return $node;\n}\n\nfunction addScore$$1($node, $, amount) {\n  try {\n    var score = getOrInitScore$$1($node, $) + amount;\n    setScore($node, $, score);\n  } catch (e) {\n    // Ignoring; error occurs in scoreNode\n  }\n\n  return $node;\n}\n\n// Adds 1/4 of a child's score to its parent\nfunction addToParent$$1(node, $, score) {\n  var parent = node.parent();\n  if (parent) {\n    addScore$$1(parent, $, score * 0.25);\n  }\n\n  return node;\n}\n\n// gets and returns the score if it exists\n// if not, initializes a score based on\n// the node's tag type\nfunction getOrInitScore$$1($node, $) {\n  var weightNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  var score = getScore($node);\n\n  if (score) {\n    return score;\n  }\n\n  score = scoreNode$$1($node);\n\n  if (weightNodes) {\n    score += getWeight($node);\n  }\n\n  addToParent$$1($node, $, score);\n\n  return score;\n}\n\n// Score an individual node. Has some smarts for paragraphs, otherwise\n// just scores based on tag.\nfunction scoreNode$$1($node) {\n  var _$node$get = $node.get(0),\n      tagName = _$node$get.tagName;\n\n  // TODO: Consider ordering by most likely.\n  // E.g., if divs are a more common tag on a page,\n  // Could save doing that regex test on every node – AP\n\n\n  if (PARAGRAPH_SCORE_TAGS$1.test(tagName)) {\n    return scoreParagraph$$1($node);\n  } else if (tagName.toLowerCase() === 'div') {\n    return 5;\n  } else if (CHILD_CONTENT_TAGS$1.test(tagName)) {\n    return 3;\n  } else if (BAD_TAGS$1.test(tagName)) {\n    return -3;\n  } else if (tagName.toLowerCase() === 'th') {\n    return -5;\n  }\n\n  return 0;\n}\n\nfunction convertSpans$1($node, $) {\n  if ($node.get(0)) {\n    var _$node$get = $node.get(0),\n        tagName = _$node$get.tagName;\n\n    if (tagName === 'span') {\n      // convert spans to divs\n      convertNodeTo$$1($node, $, 'div');\n    }\n  }\n}\n\nfunction addScoreTo($node, $, score) {\n  if ($node) {\n    convertSpans$1($node, $);\n    addScore$$1($node, $, score);\n  }\n}\n\nfunction scorePs($, weightNodes) {\n  $('p, pre').not('[score]').each(function (index, node) {\n    // The raw score for this paragraph, before we add any parent/child\n    // scores.\n    var $node = $(node);\n    $node = setScore($node, $, getOrInitScore$$1($node, $, weightNodes));\n\n    var $parent = $node.parent();\n    var rawScore = scoreNode$$1($node);\n\n    addScoreTo($parent, $, rawScore, weightNodes);\n    if ($parent) {\n      // Add half of the individual content score to the\n      // grandparent\n      addScoreTo($parent.parent(), $, rawScore / 2, weightNodes);\n    }\n  });\n\n  return $;\n}\n\n// score content. Parents get the full value of their children's\n// content score, grandparents half\nfunction scoreContent$$1($) {\n  var weightNodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  // First, look for special hNews based selectors and give them a big\n  // boost, if they exist\n  HNEWS_CONTENT_SELECTORS$1.forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        parentSelector = _ref2[0],\n        childSelector = _ref2[1];\n\n    $(parentSelector + ' ' + childSelector).each(function (index, node) {\n      addScore$$1($(node).parent(parentSelector), $, 80);\n    });\n  });\n\n  // Doubling this again\n  // Previous solution caused a bug\n  // in which parents weren't retaining\n  // scores. This is not ideal, and\n  // should be fixed.\n  scorePs($, weightNodes);\n  scorePs($, weightNodes);\n\n  return $;\n}\n\nvar NORMALIZE_RE = /\\s{2,}/g;\n\nfunction normalizeSpaces(text) {\n  return text.replace(NORMALIZE_RE, ' ').trim();\n}\n\n// Given a node type to search for, and a list of regular expressions,\n// look to see if this extraction can be found in the URL. Expects\n// that each expression in r_list will return group(1) as the proper\n// string to be cleaned.\n// Only used for date_published currently.\nfunction extractFromUrl(url, regexList) {\n  var matchRe = regexList.find(function (re) {\n    return re.test(url);\n  });\n  // const matchRe = null\n  if (matchRe) {\n    return matchRe.exec(url)[1];\n  }\n\n  return null;\n}\n\n// An expression that looks to try to find the page digit within a URL, if\n// it exists.\n// Matches:\n//  page=1\n//  pg=1\n//  p=1\n//  paging=12\n//  pag=7\n//  pagination/1\n//  paging/88\n//  pa/83\n//  p/11\n//\n// Does not match:\n//  pg=102\n//  page:2\nvar PAGE_IN_HREF_RE = new RegExp('(page|paging|(p(a|g|ag)?(e|enum|ewanted|ing|ination)))?(=|/)([0-9]{1,3})', 'i');\n\nvar HAS_ALPHA_RE = /[a-z]/i;\n\nvar IS_ALPHA_RE = /^[a-z]+$/i;\nvar IS_DIGIT_RE = /^[0-9]+$/i;\n\nfunction pageNumFromUrl(url) {\n  var matches = url.match(PAGE_IN_HREF_RE);\n  if (!matches) return null;\n\n  var pageNum = parseInt(matches[6], 10);\n\n  // Return pageNum < 100, otherwise\n  // return null\n  return pageNum < 100 ? pageNum : null;\n}\n\nfunction removeAnchor(url) {\n  return url.split('#')[0].replace(/\\/$/, '');\n}\n\nfunction isGoodSegment(segment, index, firstSegmentHasLetters) {\n  var goodSegment = true;\n\n  // If this is purely a number, and it's the first or second\n  // url_segment, it's probably a page number. Remove it.\n  if (index < 2 && IS_DIGIT_RE.test(segment) && segment.length < 3) {\n    goodSegment = true;\n  }\n\n  // If this is the first url_segment and it's just \"index\",\n  // remove it\n  if (index === 0 && segment.toLowerCase() === 'index') {\n    goodSegment = false;\n  }\n\n  // If our first or second url_segment is smaller than 3 characters,\n  // and the first url_segment had no alphas, remove it.\n  if (index < 2 && segment.length < 3 && !firstSegmentHasLetters) {\n    goodSegment = false;\n  }\n\n  return goodSegment;\n}\n\n// Take a URL, and return the article base of said URL. That is, no\n// pagination data exists in it. Useful for comparing to other links\n// that might have pagination data within them.\nfunction articleBaseUrl(url, parsed) {\n  var parsedUrl = parsed || URL.parse(url);\n  var protocol = parsedUrl.protocol,\n      host = parsedUrl.host,\n      path = parsedUrl.path;\n\n\n  var firstSegmentHasLetters = false;\n  var cleanedSegments = path.split('/').reverse().reduce(function (acc, rawSegment, index) {\n    var segment = rawSegment;\n\n    // Split off and save anything that looks like a file type.\n    if (segment.includes('.')) {\n      var _segment$split = segment.split('.'),\n          _segment$split2 = _slicedToArray(_segment$split, 2),\n          possibleSegment = _segment$split2[0],\n          fileExt = _segment$split2[1];\n\n      if (IS_ALPHA_RE.test(fileExt)) {\n        segment = possibleSegment;\n      }\n    }\n\n    // If our first or second segment has anything looking like a page\n    // number, remove it.\n    if (PAGE_IN_HREF_RE.test(segment) && index < 2) {\n      segment = segment.replace(PAGE_IN_HREF_RE, '');\n    }\n\n    // If we're on the first segment, check to see if we have any\n    // characters in it. The first segment is actually the last bit of\n    // the URL, and this will be helpful to determine if we're on a URL\n    // segment that looks like \"/2/\" for example.\n    if (index === 0) {\n      firstSegmentHasLetters = HAS_ALPHA_RE.test(segment);\n    }\n\n    // If it's not marked for deletion, push it to cleaned_segments.\n    if (isGoodSegment(segment, index, firstSegmentHasLetters)) {\n      acc.push(segment);\n    }\n\n    return acc;\n  }, []);\n\n  return protocol + '//' + host + cleanedSegments.reverse().join('/');\n}\n\n// Given a string, return True if it appears to have an ending sentence\n// within it, false otherwise.\nvar SENTENCE_END_RE = new RegExp('.( |$)');\nfunction hasSentenceEnd(text) {\n  return SENTENCE_END_RE.test(text);\n}\n\nfunction excerptContent(content) {\n              var words = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n\n              return content.trim().split(/\\s+/).slice(0, words).join(' ');\n}\n\n// Now that we have a top_candidate, look through the siblings of\n// it to see if any of them are decently scored. If they are, they\n// may be split parts of the content (Like two divs, a preamble and\n// a body.) Example:\n// http://articles.latimes.com/2009/oct/14/business/fi-bigtvs14\nfunction mergeSiblings($candidate, topScore, $) {\n  if (!$candidate.parent().length) {\n    return $candidate;\n  }\n\n  var siblingScoreThreshold = Math.max(10, topScore * 0.25);\n  var wrappingDiv = $('<div></div>');\n\n  $candidate.parent().children().each(function (index, sibling) {\n    var $sibling = $(sibling);\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE$1.test(sibling.tagName)) {\n      return null;\n    }\n\n    var siblingScore = getScore($sibling);\n    if (siblingScore) {\n      if ($sibling.get(0) === $candidate.get(0)) {\n        wrappingDiv.append($sibling);\n      } else {\n        var contentBonus = 0;\n        var density = linkDensity($sibling);\n\n        // If sibling has a very low link density,\n        // give it a small bonus\n        if (density < 0.05) {\n          contentBonus += 20;\n        }\n\n        // If sibling has a high link density,\n        // give it a penalty\n        if (density >= 0.5) {\n          contentBonus -= 20;\n        }\n\n        // If sibling node has the same class as\n        // candidate, give it a bonus\n        if ($sibling.attr('class') === $candidate.attr('class')) {\n          contentBonus += topScore * 0.2;\n        }\n\n        var newScore = siblingScore + contentBonus;\n\n        if (newScore >= siblingScoreThreshold) {\n          return wrappingDiv.append($sibling);\n        } else if (sibling.tagName === 'p') {\n          var siblingContent = $sibling.text();\n          var siblingContentLength = textLength(siblingContent);\n\n          if (siblingContentLength > 80 && density < 0.25) {\n            return wrappingDiv.append($sibling);\n          } else if (siblingContentLength <= 80 && density === 0 && hasSentenceEnd(siblingContent)) {\n            return wrappingDiv.append($sibling);\n          }\n        }\n      }\n    }\n\n    return null;\n  });\n\n  if (wrappingDiv.children().length === 1 && wrappingDiv.children().first().get(0) === $candidate.get(0)) {\n    return $candidate;\n  }\n\n  return wrappingDiv;\n}\n\n// After we've calculated scores, loop through all of the possible\n// candidate nodes we found and find the one with the highest score.\nfunction findTopCandidate$$1($) {\n  var $candidate = void 0;\n  var topScore = 0;\n\n  $('[score]').each(function (index, node) {\n    // Ignore tags like BR, HR, etc\n    if (NON_TOP_CANDIDATE_TAGS_RE$1.test(node.tagName)) {\n      return;\n    }\n\n    var $node = $(node);\n    var score = getScore($node);\n\n    if (score > topScore) {\n      topScore = score;\n      $candidate = $node;\n    }\n  });\n\n  // If we don't have a candidate, return the body\n  // or whatever the first element is\n  if (!$candidate) {\n    return $('body') || $('*').first();\n  }\n\n  $candidate = mergeSiblings($candidate, topScore, $);\n\n  return $candidate;\n}\n\n// Scoring\n\nfunction removeUnlessContent($node, $, weight) {\n  // Explicitly save entry-content-asset tags, which are\n  // noted as valuable in the Publisher guidelines. For now\n  // this works everywhere. We may want to consider making\n  // this less of a sure-thing later.\n  if ($node.hasClass('entry-content-asset')) {\n    return;\n  }\n\n  var content = normalizeSpaces($node.text());\n\n  if (scoreCommas(content) < 10) {\n    var pCount = $('p', $node).length;\n    var inputCount = $('input', $node).length;\n\n    // Looks like a form, too many inputs.\n    if (inputCount > pCount / 3) {\n      $node.remove();\n      return;\n    }\n\n    var contentLength = content.length;\n    var imgCount = $('img', $node).length;\n\n    // Content is too short, and there are no images, so\n    // this is probably junk content.\n    if (contentLength < 25 && imgCount === 0) {\n      $node.remove();\n      return;\n    }\n\n    var density = linkDensity($node);\n\n    // Too high of link density, is probably a menu or\n    // something similar.\n    // console.log(weight, density, contentLength)\n    if (weight < 25 && density > 0.2 && contentLength > 75) {\n      $node.remove();\n      return;\n    }\n\n    // Too high of a link density, despite the score being\n    // high.\n    if (weight >= 25 && density > 0.5) {\n      // Don't remove the node if it's a list and the\n      // previous sibling starts with a colon though. That\n      // means it's probably content.\n      var tagName = $node.get(0).tagName.toLowerCase();\n      var nodeIsList = tagName === 'ol' || tagName === 'ul';\n      if (nodeIsList) {\n        var previousNode = $node.prev();\n        if (previousNode && normalizeSpaces(previousNode.text()).slice(-1) === ':') {\n          return;\n        }\n      }\n\n      $node.remove();\n      return;\n    }\n\n    var scriptCount = $('script', $node).length;\n\n    // Too many script tags, not enough content.\n    if (scriptCount > 0 && contentLength < 150) {\n      $node.remove();\n      return;\n    }\n  }\n}\n\n// Given an article, clean it of some superfluous content specified by\n// tags. Things like forms, ads, etc.\n//\n// Tags is an array of tag name's to search through. (like div, form,\n// etc)\n//\n// Return this same doc.\nfunction cleanTags$$1($article, $) {\n  $(CLEAN_CONDITIONALLY_TAGS, $article).each(function (index, node) {\n    var $node = $(node);\n    var weight = getScore($node);\n    if (!weight) {\n      weight = getOrInitScore$$1($node, $);\n      setScore($node, $, weight);\n    }\n\n    // drop node if its weight is < 0\n    if (weight < 0) {\n      $node.remove();\n    } else {\n      // deteremine if node seems like content\n      removeUnlessContent($node, $, weight);\n    }\n  });\n\n  return $;\n}\n\nfunction cleanHeaders($article, $) {\n  var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  $(HEADER_TAG_LIST, $article).each(function (index, header) {\n    var $header = $(header);\n    // Remove any headers that appear before all other p tags in the\n    // document. This probably means that it was part of the title, a\n    // subtitle or something else extraneous like a datestamp or byline,\n    // all of which should be handled by other metadata handling.\n    if ($($header, $article).prevAll('p').length === 0) {\n      return $header.remove();\n    }\n\n    // Remove any headers that match the title exactly.\n    if (normalizeSpaces($(header).text()) === title) {\n      return $header.remove();\n    }\n\n    // If this header has a negative weight, it's probably junk.\n    // Get rid of it.\n    if (getWeight($(header)) < 0) {\n      return $header.remove();\n    }\n\n    return $header;\n  });\n\n  return $;\n}\n\n// Rewrite the tag name to div if it's a top level node like body or\n// html to avoid later complications with multiple body tags.\n\nfunction rewriteTopLevel$$1(article, $) {\n  // I'm not using context here because\n  // it's problematic when converting the\n  // top-level/root node - AP\n  $ = convertNodeTo$$1($('html'), $, 'div');\n  $ = convertNodeTo$$1($('body'), $, 'div');\n\n  return $;\n}\n\n/* eslint-disable */\nfunction absolutize($, rootUrl, attr, $content) {\n  $('[' + attr + ']', $content).each(function (_, node) {\n    var attrs = getAttrs(node);\n    var url = attrs[attr];\n\n    if (url) {\n      var absoluteUrl = URL.resolve(rootUrl, url);\n      setAttr(node, attr, absoluteUrl);\n    }\n  });\n}\n\nfunction makeLinksAbsolute$$1($content, $, url) {\n  ['href', 'src'].forEach(function (attr) {\n    return absolutize($, url, attr, $content);\n  });\n\n  return $content;\n}\n\nfunction textLength(text) {\n  return text.trim().replace(/\\s+/g, ' ').length;\n}\n\n// Determines what percentage of the text\n// in a node is link text\n// Takes a node, returns a float\nfunction linkDensity($node) {\n  var totalTextLength = textLength($node.text());\n\n  var linkText = $node.find('a').text();\n  var linkLength = textLength(linkText);\n\n  if (totalTextLength > 0) {\n    return linkLength / totalTextLength;\n  } else if (totalTextLength === 0 && linkLength > 0) {\n    return 1;\n  }\n\n  return 0;\n}\n\n// Given a node type to search for, and a list of meta tag names to\n// search for, find a meta tag associated.\n\nfunction extractFromMeta$$1($, metaNames, cachedNames) {\n  var cleanTags$$1 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  var foundNames = metaNames.filter(function (name) {\n    return cachedNames.indexOf(name) !== -1;\n  });\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    var _loop = function _loop() {\n      var name = _step.value;\n\n      var type = 'name';\n      var value = 'value';\n\n      var nodes = $('meta[' + type + '=\"' + name + '\"]');\n\n      // Get the unique value of every matching node, in case there\n      // are two meta tags with the same name and value.\n      // Remove empty values.\n      var values = nodes.map(function (index, node) {\n        return $(node).attr(value);\n      }).toArray().filter(function (text) {\n        return text !== '';\n      });\n\n      // If we have more than one value for the same name, we have a\n      // conflict and can't trust any of them. Skip this name. If we have\n      // zero, that means our meta tags had no values. Skip this name\n      // also.\n      if (values.length === 1) {\n        var metaValue = void 0;\n        // Meta values that contain HTML should be stripped, as they\n        // weren't subject to cleaning previously.\n        if (cleanTags$$1) {\n          metaValue = stripTags(values[0], $);\n        } else {\n          metaValue = values[0];\n        }\n\n        return {\n          v: metaValue\n        };\n      }\n    };\n\n    for (var _iterator = _getIterator(foundNames), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ret = _loop();\n\n      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    }\n\n    // If nothing is found, return null\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction isGoodNode($node, maxChildren) {\n  // If it has a number of children, it's more likely a container\n  // element. Skip it.\n  if ($node.children().length > maxChildren) {\n    return false;\n  }\n  // If it looks to be within a comment, skip it.\n  if (withinComment$$1($node)) {\n    return false;\n  }\n\n  return true;\n}\n\n// Given a a list of selectors find content that may\n// be extractable from the document. This is for flat\n// meta-information, like author, title, date published, etc.\nfunction extractFromSelectors$$1($, selectors) {\n  var maxChildren = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var textOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = _getIterator(selectors), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var selector = _step.value;\n\n      var nodes = $(selector);\n\n      // If we didn't get exactly one of this selector, this may be\n      // a list of articles or comments. Skip it.\n      if (nodes.length === 1) {\n        var $node = $(nodes[0]);\n\n        if (isGoodNode($node, maxChildren)) {\n          var content = void 0;\n          if (textOnly) {\n            content = $node.text();\n          } else {\n            content = $node.html();\n          }\n\n          if (content) {\n            return content;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return null;\n}\n\n// strips all tags from a string of text\nfunction stripTags(text, $) {\n  // Wrapping text in html element prevents errors when text\n  // has no html\n  var cleanText = $('<span>' + text + '</span>').text();\n  return cleanText === '' ? text : cleanText;\n}\n\nfunction withinComment$$1($node) {\n  var parents = $node.parents().toArray();\n  var commentParent = parents.find(function (parent) {\n    var attrs = getAttrs(parent);\n    var nodeClass = attrs.class,\n        id = attrs.id;\n\n    var classAndId = nodeClass + ' ' + id;\n    return classAndId.includes('comment');\n  });\n\n  return commentParent !== undefined;\n}\n\n// Given a node, determine if it's article-like enough to return\n// param: node (a cheerio node)\n// return: boolean\n\nfunction nodeIsSufficient($node) {\n  return $node.text().trim().length >= 100;\n}\n\nfunction isWordpress($) {\n  return $(IS_WP_SELECTOR).length > 0;\n}\n\nfunction getAttrs(node) {\n  var attribs = node.attribs,\n      attributes = node.attributes;\n\n\n  if (!attribs && attributes) {\n    var attrs = _Reflect$ownKeys(attributes).reduce(function (acc, index) {\n      var attr = attributes[index];\n\n      acc[attr.name] = attr.value;\n      return acc;\n    }, {});\n    return attrs;\n  }\n\n  return attribs;\n}\n\nfunction setAttr(node, attr, val) {\n  if (node.attribs) {\n    node.attribs[attr] = val;\n  } else if (node.attributes) {\n    node.setAttribute(attr, val);\n  }\n\n  return node;\n}\n\n/* eslint-disable */\nfunction setAttrs(node, attrs) {\n  if (node.attribs) {\n    node.attribs = attrs;\n  } else if (node.attributes) {\n    while (node.attributes.length > 0) {\n      node.removeAttribute(node.attributes[0].name);\n    }_Reflect$ownKeys(attrs).forEach(function (key) {\n      node.setAttribute(key, attrs[key]);\n    });\n  }\n\n  return node;\n}\n\n// DOM manipulation\n\nvar IS_LINK = new RegExp('https?://', 'i');\nvar IS_IMAGE = new RegExp('.(png|gif|jpe?g)', 'i');\n\nvar TAGS_TO_REMOVE = ['script', 'style', 'form'].join(',');\n\n// Convert all instances of images with potentially\n// lazy loaded images into normal images.\n// Many sites will have img tags with no source, or an image tag with a src\n// attribute that a is a placeholer. We need to be able to properly fill in\n// the src attribute so the images are no longer lazy loaded.\nfunction convertLazyLoadedImages($) {\n  $('img').each(function (_, img) {\n    var attrs = getAttrs(img);\n\n    _Reflect$ownKeys(attrs).forEach(function (attr) {\n      var value = attrs[attr];\n\n      if (attr !== 'src' && IS_LINK.test(value) && IS_IMAGE.test(value)) {\n        $(img).attr('src', value);\n      }\n    });\n  });\n\n  return $;\n}\n\nfunction isComment(index, node) {\n  return node.type === 'comment';\n}\n\nfunction cleanComments($) {\n  $('*').first().contents().filter(isComment).remove();\n\n  return $;\n}\n\nfunction clean($) {\n  $(TAGS_TO_REMOVE).remove();\n\n  $ = cleanComments($);\n  return $;\n}\n\nvar Resource = {\n\n  // Create a Resource.\n  //\n  // :param url: The URL for the document we should retrieve.\n  // :param response: If set, use as the response rather than\n  //                  attempting to fetch it ourselves. Expects a\n  //                  string.\n  create: function create(url, preparedResponse, parsedUrl) {\n    var _this = this;\n\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n      var result, validResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              result = void 0;\n\n              if (!preparedResponse) {\n                _context.next = 6;\n                break;\n              }\n\n              validResponse = {\n                statusMessage: 'OK',\n                statusCode: 200,\n                headers: {\n                  'content-type': 'text/html',\n                  'content-length': 500\n                }\n              };\n\n\n              result = { body: preparedResponse, response: validResponse };\n              _context.next = 9;\n              break;\n\n            case 6:\n              _context.next = 8;\n              return fetchResource$1(url, parsedUrl);\n\n            case 8:\n              result = _context.sent;\n\n            case 9:\n              if (!result.error) {\n                _context.next = 11;\n                break;\n              }\n\n              return _context.abrupt('return', result);\n\n            case 11:\n              return _context.abrupt('return', _this.generateDoc(result));\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this);\n    }))();\n  },\n  generateDoc: function generateDoc(_ref) {\n    var content = _ref.body,\n        response = _ref.response;\n    var contentType = response.headers['content-type'];\n\n    // TODO: Implement is_text function from\n    // https://github.com/ReadabilityHoldings/readability/blob/8dc89613241d04741ebd42fa9fa7df1b1d746303/readability/utils/text.py#L57\n\n    if (!contentType.includes('html') && !contentType.includes('text')) {\n      throw new Error('Content does not appear to be text.');\n    }\n\n    var $ = cheerio.load(content, { normalizeWhitespace: true });\n\n    if ($('*').first().children().length === 0) {\n      throw new Error('No children, likely a bad parse.');\n    }\n\n    $ = normalizeMetaTags($);\n    $ = convertLazyLoadedImages($);\n    $ = clean($);\n\n    return $;\n  }\n};\n\nvar merge = function merge(extractor, domains) {\n  return domains.reduce(function (acc, domain) {\n    acc[domain] = extractor;\n    return acc;\n  }, {});\n};\n\nfunction mergeSupportedDomains(extractor) {\n  return extractor.supportedDomains ? merge(extractor, [extractor.domain].concat(_toConsumableArray(extractor.supportedDomains))) : merge(extractor, [extractor.domain]);\n}\n\nvar BloggerExtractor = {\n  domain: 'blogspot.com',\n  content: {\n    // Blogger is insane and does not load its content\n    // initially in the page, but it's all there\n    // in noscript\n    selectors: ['.post-content noscript'],\n\n    // Selectors to remove from the extracted content\n    clean: [],\n\n    // Convert the noscript tag to a div\n    transforms: {\n      noscript: 'div'\n    }\n  },\n\n  author: {\n    selectors: ['.post-author-name']\n  },\n\n  title: {\n    selectors: ['.post h2.title']\n  },\n\n  date_published: {\n    selectors: ['span.publishdate']\n  }\n};\n\nvar NYMagExtractor = {\n  domain: 'nymag.com',\n  content: {\n    // Order by most likely. Extractor will stop on first occurrence\n    selectors: ['div.article-content', 'section.body', 'article.article'],\n\n    // Selectors to remove from the extracted content\n    clean: ['.ad', '.single-related-story'],\n\n    // Object of tranformations to make on matched elements\n    // Each key is the selector, each value is the tag to\n    // transform to.\n    // If a function is given, it should return a string\n    // to convert to or nothing (in which case it will not perform\n    // the transformation.\n    transforms: {\n      // Convert h1s to h2s\n      h1: 'h2',\n\n      // Convert lazy-loaded noscript images to figures\n      noscript: function noscript($node, $) {\n        if ($.browser) {\n          var $children = $($node.text());\n\n          if ($children.length === 1 && $children.get(0) !== undefined && $children.get(0).tagName.toLowerCase() === 'img') {\n            return 'figure';\n          }\n        } else {\n          var _$children = $node.children();\n          if (_$children.length === 1 && _$children.get(0).tagName === 'img') {\n            return 'figure';\n          }\n        }\n\n        return null;\n      }\n    }\n  },\n\n  title: {\n    selectors: ['h1.lede-feature-title', 'h1.headline-primary', 'h1']\n  },\n\n  author: {\n    selectors: ['.by-authors', '.lede-feature-author']\n  },\n\n  dek: {\n    selectors: ['.lede-feature-teaser']\n  },\n\n  date_published: {\n    selectors: [['time.article-timestamp[datetime]', 'datetime'], 'time.article-timestamp']\n  }\n};\n\nvar WikipediaExtractor = {\n  domain: 'wikipedia.org',\n  content: {\n    selectors: ['#mw-content-text'],\n\n    defaultCleaner: false,\n\n    // transform top infobox to an image with caption\n    transforms: {\n      '.infobox img': function infoboxImg($node) {\n        var $parent = $node.parents('.infobox');\n        // Only prepend the first image in .infobox\n        if ($parent.children('img').length === 0) {\n          $parent.prepend($node);\n        }\n      },\n      '.infobox caption': 'figcaption',\n      '.infobox': 'figure'\n    },\n\n    // Selectors to remove from the extracted content\n    clean: ['.mw-editsection', 'figure tr, figure td, figure tbody', '#toc', '.navbox']\n\n  },\n\n  author: 'Wikipedia Contributors',\n\n  title: {\n    selectors: ['h2.title']\n  },\n\n  date_published: {\n    selectors: ['#footer-info-lastmod']\n  }\n\n};\n\nvar TwitterExtractor = {\n  domain: 'twitter.com',\n\n  content: {\n    transforms: {\n      // We're transforming essentially the whole page here.\n      // Twitter doesn't have nice selectors, so our initial\n      // selector grabs the whole page, then we're re-writing\n      // it to fit our needs before we clean it up.\n      '.permalink[role=main]': function permalinkRoleMain($node, $) {\n        var tweets = $node.find('.tweet');\n        var $tweetContainer = $('<div id=\"TWEETS_GO_HERE\"></div>');\n        $tweetContainer.append(tweets);\n        $node.replaceWith($tweetContainer);\n      },\n\n      // Twitter wraps @ with s, which\n      // renders as a strikethrough\n      s: 'span'\n    },\n\n    selectors: ['.permalink[role=main]'],\n\n    defaultCleaner: false,\n\n    clean: ['.stream-item-footer', 'button', '.tweet-details-fixer']\n  },\n\n  author: {\n    selectors: ['.tweet.permalink-tweet .username']\n  },\n\n  date_published: {\n    selectors: [['.permalink-tweet ._timestamp[data-time-ms]', 'data-time-ms']]\n  }\n\n};\n\nvar NYTimesExtractor = {\n  domain: 'www.nytimes.com',\n\n  title: {\n    selectors: ['.g-headline', 'h1.headline']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value'], '.g-byline', '.byline']\n  },\n\n  content: {\n    selectors: ['div.g-blocks', 'article#story'],\n\n    defaultCleaner: false,\n\n    transforms: {\n      'img.g-lazy': function imgGLazy($node) {\n        var src = $node.attr('src');\n        // const widths = $node.attr('data-widths')\n        //                   .slice(1)\n        //                   .slice(0, -1)\n        //                   .split(',');\n        // if (widths.length) {\n        //   width = widths.slice(-1);\n        // } else {\n        //   width = '900';\n        // }\n        var width = 640;\n\n        src = src.replace('{{size}}', width);\n        $node.attr('src', src);\n      }\n    },\n\n    clean: ['.ad', 'header#story-header', '.story-body-1 .lede.video', '.visually-hidden', '#newsletter-promo', '.promo', '.comments-button', '.hidden']\n  },\n\n  date_published: null,\n\n  lead_image_url: null,\n\n  dek: null,\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\nvar TheAtlanticExtractor = {\n  domain: 'www.theatlantic.com',\n  title: {\n    selectors: ['h1.hed']\n  },\n\n  author: {\n    selectors: ['article#article .article-cover-extra .metadata .byline a']\n  },\n\n  content: {\n    selectors: ['.article-body'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['time[itemProp=\"datePublished\"]', 'datetime']]\n  },\n\n  lead_image_url: null,\n\n  dek: null,\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar NewYorkerExtractor = {\n  domain: 'www.newyorker.com',\n  title: {\n    selectors: ['h1.title']\n  },\n\n  author: {\n    selectors: ['.contributors']\n  },\n\n  content: {\n    selectors: ['div#articleBody', 'div.articleBody'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar WiredExtractor = {\n  domain: 'www.wired.com',\n  title: {\n    selectors: ['h1.post-title']\n  },\n\n  author: {\n    selectors: ['a[rel=\"author\"]']\n  },\n\n  content: {\n    selectors: ['article.content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.visually-hidden']\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=\"datePublished\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar MSNExtractor = {\n  domain: 'www.msn.com',\n  title: {\n    selectors: ['h1']\n  },\n\n  author: {\n    selectors: ['span.authorname-txt']\n  },\n\n  content: {\n    selectors: ['div.richtext'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['span.caption']\n  },\n\n  date_published: {\n    selectors: ['span.time']\n  },\n\n  lead_image_url: {\n    selectors: []\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar YahooExtractor = {\n  domain: 'www.yahoo.com',\n  title: {\n    selectors: ['header.canvas-header']\n  },\n\n  author: {\n    selectors: ['span.provider-name']\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.content-canvas'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.figure-caption']\n  },\n\n  date_published: {\n    selectors: [['time.date[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar BuzzfeedExtractor = {\n  domain: 'www.buzzfeed.com',\n  title: {\n    selectors: ['h1[id=\"post-title\"]']\n  },\n\n  author: {\n    selectors: ['a[data-action=\"user/username\"]', 'byline__author']\n  },\n\n  content: {\n    selectors: ['#buzz_sub_buzz'],\n\n    defaultCleaner: false,\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      h2: 'b'\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['.instapaper_ignore', '.suplist_list_hide .buzz_superlist_item .buzz_superlist_number_inline', '.share-box']\n  },\n\n  date_published: {\n    selectors: ['.buzz-datetime']\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar WikiaExtractor = {\n  domain: 'fandom.wikia.com',\n  title: {\n    selectors: ['h1.entry-title']\n  },\n\n  author: {\n    selectors: ['.author vcard', '.fn']\n  },\n\n  content: {\n    selectors: ['.grid-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[name=\"article:published_time\"]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar LittleThingsExtractor = {\n  domain: 'www.littlethings.com',\n  title: {\n    selectors: ['h1.post-title']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.mainContentIntro', '.content-wrapper'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar PoliticoExtractor = {\n  domain: 'www.politico.com',\n  title: {\n    selectors: [\n    // enter title selectors\n    ['meta[name=\"og:title\"]', 'value']]\n  },\n\n  author: {\n    selectors: ['.story-main-content .byline .vcard']\n  },\n\n  content: {\n    selectors: [\n    // enter content selectors\n    '.story-main-content', '.content-group', '.story-core', '.story-text'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: [],\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: ['figcaption']\n  },\n\n  date_published: {\n    selectors: [['.story-main-content .timestamp time[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [\n    // enter lead_image_url selectors\n    ['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"description\"]', 'value']]\n  },\n\n  next_page_url: null,\n\n  excerpt: null\n};\n\nvar DeadspinExtractor = {\n  domain: 'deadspin.com',\n\n  supportedDomains: ['jezebel.com', 'lifehacker.com', 'kotaku.com', 'gizmodo.com', 'jalopnik.com', 'kinja.com'],\n\n  title: {\n    selectors: ['h1.headline']\n  },\n\n  author: {\n    selectors: ['.author']\n  },\n\n  content: {\n    selectors: ['.post-content', '.entry-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'iframe.lazyload[data-recommend-id^=\"youtube://\"]': function iframeLazyloadDataRecommendIdYoutube($node) {\n        var youtubeId = $node.attr('id').split('youtube-')[1];\n        $node.attr('src', 'https://www.youtube.com/embed/' + youtubeId);\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['time.updated[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar BroadwayWorldExtractor = {\n  domain: 'www.broadwayworld.com',\n  title: {\n    selectors: ['h1.article-title']\n  },\n\n  author: {\n    selectors: ['span[itemprop=author]']\n  },\n\n  content: {\n    selectors: ['div[itemprop=articlebody]'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {},\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['meta[itemprop=datePublished]', 'value']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=\"og:description\"]', 'value']]\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\n// Rename CustomExtractor\n// to fit your publication\n// (e.g., NYTimesExtractor)\nvar ApartmentTherapyExtractor = {\n  domain: 'www.apartmenttherapy.com',\n  title: {\n    selectors: ['h1.headline']\n  },\n\n  author: {\n    selectors: ['.PostByline__name']\n  },\n\n  content: {\n    selectors: ['div.post__content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      'div[data-render-react-id=\"images/LazyPicture\"]': function divDataRenderReactIdImagesLazyPicture($node, $) {\n        var data = JSON.parse($node.attr('data-props'));\n        var src = data.sources[0].src;\n\n        var $img = $('<img />').attr('src', src);\n        $node.replaceWith($img);\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['.PostByline__timestamp[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [['meta[name=description]', 'value']]\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\nvar MediumExtractor = {\n  domain: 'medium.com',\n\n  supportedDomains: ['trackchanges.postlight.com'],\n\n  title: {\n    selectors: ['h1']\n  },\n\n  author: {\n    selectors: [['meta[name=\"author\"]', 'value']]\n  },\n\n  content: {\n    selectors: ['.section-content'],\n\n    // Is there anything in the content you selected that needs transformed\n    // before it's consumable content? E.g., unusual lazy loaded images\n    transforms: {\n      // Re-write lazy-loaded youtube videos\n      iframe: function iframe($node) {\n        var ytRe = /https:\\/\\/i.embed.ly\\/.+url=https:\\/\\/i\\.ytimg\\.com\\/vi\\/(\\w+)\\//;\n        var thumb = decodeURIComponent($node.attr('data-thumbnail'));\n\n        if (ytRe.test(thumb)) {\n          var _thumb$match = thumb.match(ytRe),\n              _thumb$match2 = _slicedToArray(_thumb$match, 2),\n              _ = _thumb$match2[0],\n              youtubeId = _thumb$match2[1]; // eslint-disable-line\n\n\n          $node.attr('src', 'https://www.youtube.com/embed/' + youtubeId);\n          var $parent = $node.parents('figure');\n          $parent.prepend($node.clone());\n          $node.remove();\n        }\n      }\n    },\n\n    // Is there anything that is in the result that shouldn't be?\n    // The clean selectors will remove anything that matches from\n    // the result\n    clean: []\n  },\n\n  date_published: {\n    selectors: [['time[datetime]', 'datetime']]\n  },\n\n  lead_image_url: {\n    selectors: [['meta[name=\"og:image\"]', 'value']]\n  },\n\n  dek: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  next_page_url: {\n    selectors: [\n      // enter selectors\n    ]\n  },\n\n  excerpt: {\n    selectors: [\n      // enter selectors\n    ]\n  }\n};\n\n\n\nvar CustomExtractors = Object.freeze({\n\tBloggerExtractor: BloggerExtractor,\n\tNYMagExtractor: NYMagExtractor,\n\tWikipediaExtractor: WikipediaExtractor,\n\tTwitterExtractor: TwitterExtractor,\n\tNYTimesExtractor: NYTimesExtractor,\n\tTheAtlanticExtractor: TheAtlanticExtractor,\n\tNewYorkerExtractor: NewYorkerExtractor,\n\tWiredExtractor: WiredExtractor,\n\tMSNExtractor: MSNExtractor,\n\tYahooExtractor: YahooExtractor,\n\tBuzzfeedExtractor: BuzzfeedExtractor,\n\tWikiaExtractor: WikiaExtractor,\n\tLittleThingsExtractor: LittleThingsExtractor,\n\tPoliticoExtractor: PoliticoExtractor,\n\tDeadspinExtractor: DeadspinExtractor,\n\tBroadwayWorldExtractor: BroadwayWorldExtractor,\n\tApartmentTherapyExtractor: ApartmentTherapyExtractor,\n\tMediumExtractor: MediumExtractor\n});\n\nvar Extractors = _Object$keys(CustomExtractors).reduce(function (acc, key) {\n  var extractor = CustomExtractors[key];\n  return _extends({}, acc, mergeSupportedDomains(extractor));\n}, {});\n\n// CLEAN AUTHOR CONSTANTS\nvar CLEAN_AUTHOR_RE = /^\\s*(posted |written )?by\\s*:?\\s*(.*)/i;\n//     author = re.sub(r'^\\s*(posted |written )?by\\s*:?\\s*(.*)(?i)',\n\n// CLEAN DEK CONSTANTS\nvar TEXT_LINK_RE = new RegExp('http(s)?://', 'i');\n// An ordered list of meta tag names that denote likely article deks.\n// From most distinct to least distinct.\n//\n// NOTE: There are currently no meta tags that seem to provide the right\n// content consistenty enough. Two options were:\n//  - og:description\n//  - dc.description\n// However, these tags often have SEO-specific junk in them that's not\n// header-worthy like a dek is. Excerpt material at best.\n\n\n// An ordered list of Selectors to find likely article deks. From\n// most explicit to least explicit.\n//\n// Should be more restrictive than not, as a failed dek can be pretty\n// detrimental to the aesthetics of an article.\n\n\n// CLEAN DATE PUBLISHED CONSTANTS\nvar MS_DATE_STRING = /^\\d{13}$/i;\nvar SEC_DATE_STRING = /^\\d{10}$/i;\nvar CLEAN_DATE_STRING_RE = /^\\s*published\\s*:?\\s*(.*)/i;\nvar TIME_MERIDIAN_SPACE_RE = /(.*\\d)(am|pm)(.*)/i;\nvar TIME_MERIDIAN_DOTS_RE = /\\.m\\./i;\nvar months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];\nvar allMonths = months.join('|');\nvar timestamp1 = '[0-9]{1,2}:[0-9]{2,2}( ?[ap].?m.?)?';\nvar timestamp2 = '[0-9]{1,2}[/-][0-9]{1,2}[/-][0-9]{2,4}';\nvar SPLIT_DATE_STRING = new RegExp('(' + timestamp1 + ')|(' + timestamp2 + ')|([0-9]{1,4})|(' + allMonths + ')', 'ig');\n\n// CLEAN TITLE CONSTANTS\n// A regular expression that will match separating characters on a\n// title, that usually denote breadcrumbs or something similar.\nvar TITLE_SPLITTERS_RE = /(: | - | \\| )/g;\n\nvar DOMAIN_ENDINGS_RE = new RegExp('.com$|.net$|.org$|.co.uk$', 'g');\n\n// Take an author string (like 'By David Smith ') and clean it to\n// just the name(s): 'David Smith'.\nfunction cleanAuthor(author) {\n  return author.replace(CLEAN_AUTHOR_RE, '$2').trim();\n}\n\nfunction clean$1(leadImageUrl) {\n  leadImageUrl = leadImageUrl.trim();\n  if (validUrl.isWebUri(leadImageUrl)) {\n    return leadImageUrl;\n  }\n\n  return null;\n}\n\n// Take a dek HTML fragment, and return the cleaned version of it.\n// Return None if the dek wasn't good enough.\nfunction cleanDek(dek, _ref) {\n  var $ = _ref.$,\n      excerpt = _ref.excerpt;\n\n  // Sanity check that we didn't get too short or long of a dek.\n  if (dek.length > 1000 || dek.length < 5) return null;\n\n  // Check that dek isn't the same as excerpt\n  if (excerpt && excerptContent(excerpt, 10) === excerptContent(dek, 10)) return null;\n\n  var dekText = stripTags(dek, $);\n\n  // Plain text links shouldn't exist in the dek. If we have some, it's\n  // not a good dek - bail.\n  if (TEXT_LINK_RE.test(dekText)) return null;\n\n  return dekText.trim();\n}\n\n// Is there a compelling reason to use moment here?\n// Mostly only being used for the isValid() method,\n// but could just check for 'Invalid Date' string.\n\nfunction cleanDateString(dateString) {\n  return (dateString.match(SPLIT_DATE_STRING) || []).join(' ').replace(TIME_MERIDIAN_DOTS_RE, 'm').replace(TIME_MERIDIAN_SPACE_RE, '$1 $2 $3').replace(CLEAN_DATE_STRING_RE, '$1').trim();\n}\n\n// Take a date published string, and hopefully return a date out of\n// it. Return none if we fail.\nfunction cleanDatePublished(dateString) {\n  // If string is in milliseconds or seconds, convert to int\n  if (MS_DATE_STRING.test(dateString) || SEC_DATE_STRING.test(dateString)) {\n    dateString = parseInt(dateString, 10);\n  }\n\n  var date = moment(new Date(dateString));\n\n  if (!date.isValid()) {\n    dateString = cleanDateString(dateString);\n    date = moment(new Date(dateString));\n  }\n\n  return date.isValid() ? date.toISOString() : null;\n}\n\n// Clean our article content, returning a new, cleaned node.\n\nfunction extractCleanNode(article, _ref) {\n  var $ = _ref.$,\n      _ref$cleanConditional = _ref.cleanConditionally,\n      cleanConditionally = _ref$cleanConditional === undefined ? true : _ref$cleanConditional,\n      _ref$title = _ref.title,\n      title = _ref$title === undefined ? '' : _ref$title,\n      _ref$url = _ref.url,\n      url = _ref$url === undefined ? '' : _ref$url,\n      _ref$defaultCleaner = _ref.defaultCleaner,\n      defaultCleaner = _ref$defaultCleaner === undefined ? true : _ref$defaultCleaner;\n\n  // Rewrite the tag name to div if it's a top level node like body or\n  // html to avoid later complications with multiple body tags.\n  rewriteTopLevel$$1(article, $);\n\n  // Drop small images and spacer images\n  // Only do this is defaultCleaner is set to true;\n  // this can sometimes be too aggressive.\n  if (defaultCleaner) cleanImages(article, $);\n\n  // Mark elements to keep that would normally be removed.\n  // E.g., stripJunkTags will remove iframes, so we're going to mark\n  // YouTube/Vimeo videos as elements we want to keep.\n  markToKeep(article, $, url);\n\n  // Drop certain tags like <title>, etc\n  // This is -mostly- for cleanliness, not security.\n  stripJunkTags(article, $);\n\n  // H1 tags are typically the article title, which should be extracted\n  // by the title extractor instead. If there's less than 3 of them (<3),\n  // strip them. Otherwise, turn 'em into H2s.\n  cleanHOnes$$1(article, $);\n\n  // Clean headers\n  cleanHeaders(article, $, title);\n\n  // Make links absolute\n  makeLinksAbsolute$$1(article, $, url);\n\n  // We used to clean UL's and OL's here, but it was leading to\n  // too many in-article lists being removed. Consider a better\n  // way to detect menus particularly and remove them.\n  // Also optionally running, since it can be overly aggressive.\n  if (defaultCleaner) cleanTags$$1(article, $, cleanConditionally);\n\n  // Remove empty paragraph nodes\n  removeEmpty(article, $);\n\n  // Remove unnecessary attributes\n  cleanAttributes$$1(article, $);\n\n  return article;\n}\n\nfunction cleanTitle$$1(title, _ref) {\n  var url = _ref.url,\n      $ = _ref.$;\n\n  // If title has |, :, or - in it, see if\n  // we can clean it up.\n  if (TITLE_SPLITTERS_RE.test(title)) {\n    title = resolveSplitTitle(title, url);\n  }\n\n  // Final sanity check that we didn't get a crazy title.\n  // if (title.length > 150 || title.length < 15) {\n  if (title.length > 150) {\n    // If we did, return h1 from the document if it exists\n    var h1 = $('h1');\n    if (h1.length === 1) {\n      title = h1.text();\n    }\n  }\n\n  // strip any html tags in the title text\n  return stripTags(title, $).trim();\n}\n\nfunction extractBreadcrumbTitle(splitTitle, text) {\n  // This must be a very breadcrumbed title, like:\n  // The Best Gadgets on Earth : Bits : Blogs : NYTimes.com\n  // NYTimes - Blogs - Bits - The Best Gadgets on Earth\n  if (splitTitle.length >= 6) {\n    var _ret = function () {\n      // Look to see if we can find a breadcrumb splitter that happens\n      // more than once. If we can, we'll be able to better pull out\n      // the title.\n      var termCounts = splitTitle.reduce(function (acc, titleText) {\n        acc[titleText] = acc[titleText] ? acc[titleText] + 1 : 1;\n        return acc;\n      }, {});\n\n      var _Reflect$ownKeys$redu = _Reflect$ownKeys(termCounts).reduce(function (acc, key) {\n        if (acc[1] < termCounts[key]) {\n          return [key, termCounts[key]];\n        }\n\n        return acc;\n      }, [0, 0]),\n          _Reflect$ownKeys$redu2 = _slicedToArray(_Reflect$ownKeys$redu, 2),\n          maxTerm = _Reflect$ownKeys$redu2[0],\n          termCount = _Reflect$ownKeys$redu2[1];\n\n      // We found a splitter that was used more than once, so it\n      // is probably the breadcrumber. Split our title on that instead.\n      // Note: max_term should be <= 4 characters, so that \" >> \"\n      // will match, but nothing longer than that.\n\n\n      if (termCount >= 2 && maxTerm.length <= 4) {\n        splitTitle = text.split(maxTerm);\n      }\n\n      var splitEnds = [splitTitle[0], splitTitle.slice(-1)];\n      var longestEnd = splitEnds.reduce(function (acc, end) {\n        return acc.length > end.length ? acc : end;\n      }, '');\n\n      if (longestEnd.length > 10) {\n        return {\n          v: longestEnd\n        };\n      }\n\n      return {\n        v: text\n      };\n    }();\n\n    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n  }\n\n  return null;\n}\n\nfunction cleanDomainFromTitle(splitTitle, url) {\n  // Search the ends of the title, looking for bits that fuzzy match\n  // the URL too closely. If one is found, discard it and return the\n  // rest.\n  //\n  // Strip out the big TLDs - it just makes the matching a bit more\n  // accurate. Not the end of the world if it doesn't strip right.\n  var _URL$parse = URL.parse(url),\n      host = _URL$parse.host;\n\n  var nakedDomain = host.replace(DOMAIN_ENDINGS_RE, '');\n\n  var startSlug = splitTitle[0].toLowerCase().replace(' ', '');\n  var startSlugRatio = wuzzy.levenshtein(startSlug, nakedDomain);\n\n  if (startSlugRatio > 0.4 && startSlug.length > 5) {\n    return splitTitle.slice(2).join('');\n  }\n\n  var endSlug = splitTitle.slice(-1)[0].toLowerCase().replace(' ', '');\n  var endSlugRatio = wuzzy.levenshtein(endSlug, nakedDomain);\n\n  if (endSlugRatio > 0.4 && endSlug.length >= 5) {\n    return splitTitle.slice(0, -2).join('');\n  }\n\n  return null;\n}\n\n// Given a title with separators in it (colons, dashes, etc),\n// resolve whether any of the segments should be removed.\nfunction resolveSplitTitle(title) {\n  var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  // Splits while preserving splitters, like:\n  // ['The New New York', ' - ', 'The Washington Post']\n  var splitTitle = title.split(TITLE_SPLITTERS_RE);\n  if (splitTitle.length === 1) {\n    return title;\n  }\n\n  var newTitle = extractBreadcrumbTitle(splitTitle, title);\n  if (newTitle) return newTitle;\n\n  newTitle = cleanDomainFromTitle(splitTitle, url);\n  if (newTitle) return newTitle;\n\n  // Fuzzy ratio didn't find anything, so this title is probably legit.\n  // Just return it all.\n  return title;\n}\n\nvar Cleaners = {\n  author: cleanAuthor,\n  lead_image_url: clean$1,\n  dek: cleanDek,\n  date_published: cleanDatePublished,\n  content: extractCleanNode,\n  title: cleanTitle$$1\n};\n\n// Using a variety of scoring techniques, extract the content most\n// likely to be article text.\n//\n// If strip_unlikely_candidates is True, remove any elements that\n// match certain criteria first. (Like, does this element have a\n// classname of \"comment\")\n//\n// If weight_nodes is True, use classNames and IDs to determine the\n// worthiness of nodes.\n//\n// Returns a cheerio object $\nfunction extractBestNode($, opts) {\n  // clone the node so we can get back to our\n  // initial parsed state if needed\n  // TODO Do I need this? – AP\n  // let $root = $.root().clone()\n\n  if (opts.stripUnlikelyCandidates) {\n    $ = stripUnlikelyCandidates($);\n  }\n\n  $ = convertToParagraphs$$1($);\n  $ = scoreContent$$1($, opts.weightNodes);\n  var $topCandidate = findTopCandidate$$1($);\n\n  return $topCandidate;\n}\n\nvar GenericContentExtractor = {\n  defaultOpts: {\n    stripUnlikelyCandidates: true,\n    weightNodes: true,\n    cleanConditionally: true\n  },\n\n  // Extract the content for this resource - initially, pass in our\n  // most restrictive opts which will return the highest quality\n  // content. On each failure, retry with slightly more lax opts.\n  //\n  // :param return_type: string. If \"node\", should return the content\n  // as a cheerio node rather than as an HTML string.\n  //\n  // Opts:\n  // stripUnlikelyCandidates: Remove any elements that match\n  // non-article-like criteria first.(Like, does this element\n  //   have a classname of \"comment\")\n  //\n  // weightNodes: Modify an elements score based on whether it has\n  // certain classNames or IDs. Examples: Subtract if a node has\n  // a className of 'comment', Add if a node has an ID of\n  // 'entry-content'.\n  //\n  // cleanConditionally: Clean the node to return of some\n  // superfluous content. Things like forms, ads, etc.\n  extract: function extract(_ref, opts) {\n    var $ = _ref.$,\n        html = _ref.html,\n        title = _ref.title,\n        url = _ref.url,\n        cheerio$$1 = _ref.cheerio;\n\n    opts = _extends({}, this.defaultOpts, opts);\n\n    $ = $ || cheerio$$1.load(html);\n\n    // Cascade through our extraction-specific opts in an ordered fashion,\n    // turning them off as we try to extract content.\n    var node = this.getContentNode($, title, url, opts);\n\n    if (nodeIsSufficient(node)) {\n      return this.cleanAndReturnNode(node, $);\n    }\n\n    // We didn't succeed on first pass, one by one disable our\n    // extraction opts and try again.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(_Reflect$ownKeys(opts).filter(function (k) {\n        return opts[k] === true;\n      })), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var key = _step.value;\n\n        opts[key] = false;\n        $ = cheerio$$1.load(html);\n\n        node = this.getContentNode($, title, url, opts);\n\n        if (nodeIsSufficient(node)) {\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return this.cleanAndReturnNode(node, $);\n  },\n\n\n  // Get node given current options\n  getContentNode: function getContentNode($, title, url, opts) {\n    return extractCleanNode(extractBestNode($, opts), {\n      $: $,\n      cleanConditionally: opts.cleanConditionally,\n      title: title,\n      url: url\n    });\n  },\n\n\n  // Once we got here, either we're at our last-resort node, or\n  // we broke early. Make sure we at least have -something- before we\n  // move forward.\n  cleanAndReturnNode: function cleanAndReturnNode(node, $) {\n    if (!node) {\n      return null;\n    }\n\n    return normalizeSpaces($.html(node));\n\n    // if return_type == \"html\":\n    //     return normalize_spaces(node_to_html(node))\n    // else:\n    //     return node\n  }\n};\n\n// TODO: It would be great if we could merge the meta and selector lists into\n// a list of objects, because we could then rank them better. For example,\n// .hentry .entry-title is far better suited than <meta title>.\n\n// An ordered list of meta tag names that denote likely article titles. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\nvar STRONG_TITLE_META_TAGS = ['tweetmeme-title', 'dc.title', 'rbtitle', 'headline', 'title'];\n\n// og:title is weak because it typically contains context that we don't like,\n// for example the source site's name. Gotta get that brand into facebook!\nvar WEAK_TITLE_META_TAGS = ['og:title'];\n\n// An ordered list of XPath Selectors to find likely article titles. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nvar STRONG_TITLE_SELECTORS = ['.hentry .entry-title', 'h1#articleHeader', 'h1.articleHeader', 'h1.article', '.instapaper_title', '#meebo-title'];\n\nvar WEAK_TITLE_SELECTORS = ['article h1', '#entry-title', '.entry-title', '#entryTitle', '#entrytitle', '.entryTitle', '.entrytitle', '#articleTitle', '.articleTitle', 'post post-title', 'h1.title', 'h2.article', 'h1', 'html head title', 'title'];\n\nvar GenericTitleExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        metaCache = _ref.metaCache;\n\n    // First, check to see if we have a matching meta tag that we can make\n    // use of that is strongly associated with the headline.\n    var title = void 0;\n\n    title = extractFromMeta$$1($, STRONG_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // Second, look through our content selectors for the most likely\n    // article title that is strongly associated with the headline.\n    title = extractFromSelectors$$1($, STRONG_TITLE_SELECTORS);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // Third, check for weaker meta tags that may match.\n    title = extractFromMeta$$1($, WEAK_TITLE_META_TAGS, metaCache);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // Last, look for weaker selector tags that may match.\n    title = extractFromSelectors$$1($, WEAK_TITLE_SELECTORS);\n    if (title) return cleanTitle$$1(title, { url: url, $: $ });\n\n    // If no matches, return an empty string\n    return '';\n  }\n};\n\n// An ordered list of meta tag names that denote likely article authors. All\n// attributes should be lowercase for faster case-insensitive matching. From\n// most distinct to least distinct.\n//\n// Note: \"author\" is too often the -developer- of the page, so it is not\n// added here.\nvar AUTHOR_META_TAGS = ['byl', 'clmst', 'dc.author', 'dcsext.author', 'dc.creator', 'rbauthors', 'authors'];\n\nvar AUTHOR_MAX_LENGTH = 300;\n\n// An ordered list of XPath Selectors to find likely article authors. From\n// most explicit to least explicit.\n//\n// Note - this does not use classes like CSS. This checks to see if the string\n// exists in the className, which is not as accurate as .className (which\n// splits on spaces/endlines), but for our purposes it's close enough. The\n// speed tradeoff is worth the accuracy hit.\nvar AUTHOR_SELECTORS = ['.entry .entry-author', '.author.vcard .fn', '.author .vcard .fn', '.byline.vcard .fn', '.byline .vcard .fn', '.byline .by .author', '.byline .by', '.byline .author', '.post-author.vcard', '.post-author .vcard', 'a[rel=author]', '#by_author', '.by_author', '#entryAuthor', '.entryAuthor', '.byline a[href*=author]', '#author .authorname', '.author .authorname', '#author', '.author', '.articleauthor', '.ArticleAuthor', '.byline'];\n\n// An ordered list of Selectors to find likely article authors, with\n// regular expression for content.\nvar bylineRe = /^[\\n\\s]*By/i;\nvar BYLINE_SELECTORS_RE = [['#byline', bylineRe], ['.byline', bylineRe]];\n\nvar GenericAuthorExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        metaCache = _ref.metaCache;\n\n    var author = void 0;\n\n    // First, check to see if we have a matching\n    // meta tag that we can make use of.\n    author = extractFromMeta$$1($, AUTHOR_META_TAGS, metaCache);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Second, look through our selectors looking for potential authors.\n    author = extractFromSelectors$$1($, AUTHOR_SELECTORS, 2);\n    if (author && author.length < AUTHOR_MAX_LENGTH) {\n      return cleanAuthor(author);\n    }\n\n    // Last, use our looser regular-expression based selectors for\n    // potential authors.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(BYLINE_SELECTORS_RE), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var _ref4 = _step.value;\n\n        var _ref3 = _slicedToArray(_ref4, 2);\n\n        var selector = _ref3[0];\n        var regex = _ref3[1];\n\n        var node = $(selector);\n        if (node.length === 1) {\n          var text = node.text();\n          if (regex.test(text)) {\n            return cleanAuthor(text);\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\n// An ordered list of meta tag names that denote\n// likely date published dates. All attributes\n// should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nvar DATE_PUBLISHED_META_TAGS = ['article:published_time', 'displaydate', 'dc.date', 'dc.date.issued', 'rbpubdate', 'publish_date', 'pub_date', 'pagedate', 'pubdate', 'revision_date', 'doc_date', 'date_created', 'content_create_date', 'lastmodified', 'created', 'date'];\n\n// An ordered list of XPath Selectors to find\n// likely date published dates. From most explicit\n// to least explicit.\nvar DATE_PUBLISHED_SELECTORS = ['.hentry .dtstamp.published', '.hentry .published', '.hentry .dtstamp.updated', '.hentry .updated', '.single .published', '.meta .published', '.meta .postDate', '.entry-date', '.byline .date', '.postmetadata .date', '.article_datetime', '.date-header', '.story-date', '.dateStamp', '#story .datetime', '.dateline', '.pubdate'];\n\n// An ordered list of compiled regular expressions to find likely date\n// published dates from the URL. These should always have the first\n// reference be a date string that is parseable by dateutil.parser.parse\nvar abbrevMonthsStr = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\nvar DATE_PUBLISHED_URL_RES = [\n// /2012/01/27/ but not /2012/01/293\nnew RegExp('/(20\\\\d{2}/\\\\d{2}/\\\\d{2})/', 'i'),\n// 20120127 or 20120127T but not 2012012733 or 8201201733\n// /[^0-9](20\\d{2}[01]\\d[0-3]\\d)([^0-9]|$)/i,\n// 2012-01-27\nnew RegExp('(20\\\\d{2}-[01]\\\\d-[0-3]\\\\d)', 'i'),\n// /2012/jan/27/\nnew RegExp('/(20\\\\d{2}/' + abbrevMonthsStr + '/[0-3]\\\\d)/', 'i')];\n\nvar GenericDatePublishedExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        metaCache = _ref.metaCache;\n\n    var datePublished = void 0;\n    // First, check to see if we have a matching meta tag\n    // that we can make use of.\n    // Don't try cleaning tags from this string\n    datePublished = extractFromMeta$$1($, DATE_PUBLISHED_META_TAGS, metaCache, false);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Second, look through our selectors looking for potential\n    // date_published's.\n    datePublished = extractFromSelectors$$1($, DATE_PUBLISHED_SELECTORS);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    // Lastly, look to see if a dately string exists in the URL\n    datePublished = extractFromUrl(url, DATE_PUBLISHED_URL_RES);\n    if (datePublished) return cleanDatePublished(datePublished);\n\n    return null;\n  }\n};\n\n// import {\n//   DEK_META_TAGS,\n//   DEK_SELECTORS,\n//   DEK_URL_RES,\n// } from './constants';\n\n// import { cleanDek } from 'cleaners';\n\n// import {\n//   extractFromMeta,\n//   extractFromSelectors,\n// } from 'utils/dom';\n\n// Currently there is only one selector for\n// deks. We should simply return null here\n// until we have a more robust generic option.\n// Below is the original source for this, for reference.\nvar GenericDekExtractor = {\n  // extract({ $, content, metaCache }) {\n  extract: function extract() {\n    return null;\n  }\n};\n\n\n\n// def extract_dek(self):\n//     # First, check to see if we have a matching meta tag that we can make\n//     # use of.\n//     dek = self.extract_from_meta('dek', constants.DEK_META_TAGS)\n//     if not dek:\n//         # Second, look through our CSS/XPath selectors. This may return\n//         # an HTML fragment.\n//         dek = self.extract_from_selectors('dek',\n//                                            constants.DEK_SELECTORS,\n//                                            text_only=False)\n//\n//     if dek:\n//         # Make sure our dek isn't in the first few thousand characters\n//         # of the content, otherwise it's just the start of the article\n//         # and not a true dek.\n//         content = self.extract_content()\n//         content_chunk = normalize_spaces(strip_tags(content[:2000]))\n//         dek_chunk = normalize_spaces(dek[:100]) # Already has no tags.\n//\n//         # 80% or greater similarity means the dek was very similar to some\n//         # of the starting content, so we skip it.\n//         if fuzz.partial_ratio(content_chunk, dek_chunk) < 80:\n//             return dek\n//\n//     return None\n\n// An ordered list of meta tag names that denote likely article leading images.\n// All attributes should be lowercase for faster case-insensitive matching.\n// From most distinct to least distinct.\nvar LEAD_IMAGE_URL_META_TAGS = ['og:image', 'twitter:image', 'image_src'];\n\nvar LEAD_IMAGE_URL_SELECTORS = ['link[rel=image_src]'];\n\nvar POSITIVE_LEAD_IMAGE_URL_HINTS = ['upload', 'wp-content', 'large', 'photo', 'wp-image'];\nvar POSITIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(POSITIVE_LEAD_IMAGE_URL_HINTS.join('|'), 'i');\n\nvar NEGATIVE_LEAD_IMAGE_URL_HINTS = ['spacer', 'sprite', 'blank', 'throbber', 'gradient', 'tile', 'bg', 'background', 'icon', 'social', 'header', 'hdr', 'advert', 'spinner', 'loader', 'loading', 'default', 'rating', 'share', 'facebook', 'twitter', 'theme', 'promo', 'ads', 'wp-includes'];\nvar NEGATIVE_LEAD_IMAGE_URL_HINTS_RE = new RegExp(NEGATIVE_LEAD_IMAGE_URL_HINTS.join('|'), 'i');\n\nvar GIF_RE = /\\.gif(\\?.*)?$/i;\nvar JPG_RE = /\\.jpe?g(\\?.*)?$/i;\n\nfunction getSig($node) {\n  return ($node.attr('class') || '') + ' ' + ($node.attr('id') || '');\n}\n\n// Scores image urls based on a variety of heuristics.\nfunction scoreImageUrl(url) {\n  url = url.trim();\n  var score = 0;\n\n  if (POSITIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score += 20;\n  }\n\n  if (NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.test(url)) {\n    score -= 20;\n  }\n\n  // TODO: We might want to consider removing this as\n  // gifs are much more common/popular than they once were\n  if (GIF_RE.test(url)) {\n    score -= 10;\n  }\n\n  if (JPG_RE.test(url)) {\n    score += 10;\n  }\n\n  // PNGs are neutral.\n\n  return score;\n}\n\n// Alt attribute usually means non-presentational image.\nfunction scoreAttr($img) {\n  if ($img.attr('alt')) {\n    return 5;\n  }\n\n  return 0;\n}\n\n// Look through our parent and grandparent for figure-like\n// container elements, give a bonus if we find them\nfunction scoreByParents($img) {\n  var score = 0;\n  var $figParent = $img.parents('figure').first();\n\n  if ($figParent.length === 1) {\n    score += 25;\n  }\n\n  var $parent = $img.parent();\n  var $gParent = void 0;\n  if ($parent.length === 1) {\n    $gParent = $parent.parent();\n  }\n\n  [$parent, $gParent].forEach(function ($node) {\n    if (PHOTO_HINTS_RE$1.test(getSig($node))) {\n      score += 15;\n    }\n  });\n\n  return score;\n}\n\n// Look at our immediate sibling and see if it looks like it's a\n// caption. Bonus if so.\nfunction scoreBySibling($img) {\n  var score = 0;\n  var $sibling = $img.next();\n  var sibling = $sibling.get(0);\n\n  if (sibling && sibling.tagName === 'figcaption') {\n    score += 25;\n  }\n\n  if (PHOTO_HINTS_RE$1.test(getSig($sibling))) {\n    score += 15;\n  }\n\n  return score;\n}\n\nfunction scoreByDimensions($img) {\n  var score = 0;\n\n  var width = parseFloat($img.attr('width'));\n  var height = parseFloat($img.attr('height'));\n  var src = $img.attr('src');\n\n  // Penalty for skinny images\n  if (width && width <= 50) {\n    score -= 50;\n  }\n\n  // Penalty for short images\n  if (height && height <= 50) {\n    score -= 50;\n  }\n\n  if (width && height && !src.includes('sprite')) {\n    var area = width * height;\n    if (area < 5000) {\n      // Smaller than 50 x 100\n      score -= 100;\n    } else {\n      score += Math.round(area / 1000);\n    }\n  }\n\n  return score;\n}\n\nfunction scoreByPosition($imgs, index) {\n  return $imgs.length / 2 - index;\n}\n\n// Given a resource, try to find the lead image URL from within\n// it. Like content and next page extraction, uses a scoring system\n// to determine what the most likely image may be. Short circuits\n// on really probable things like og:image meta tags.\n//\n// Potential signals to still take advantage of:\n//   * domain\n//   * weird aspect ratio\nvar GenericLeadImageUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        content = _ref.content,\n        metaCache = _ref.metaCache,\n        html = _ref.html;\n\n    var cleanUrl = void 0;\n    if (!$.browser && $('head').length === 0) {\n      $('*').first().prepend(html);\n    }\n\n    // Check to see if we have a matching meta tag that we can make use of.\n    // Moving this higher because common practice is now to use large\n    // images on things like Open Graph or Twitter cards.\n    // images usually have for things like Open Graph.\n    var imageUrl = extractFromMeta$$1($, LEAD_IMAGE_URL_META_TAGS, metaCache, false);\n\n    if (imageUrl) {\n      cleanUrl = clean$1(imageUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // Next, try to find the \"best\" image via the content.\n    // We'd rather not have to fetch each image and check dimensions,\n    // so try to do some analysis and determine them instead.\n    var $content = $(content);\n    var imgs = $('img', $content).toArray();\n    var imgScores = {};\n\n    imgs.forEach(function (img, index) {\n      var $img = $(img);\n      var src = $img.attr('src');\n\n      if (!src) return;\n\n      var score = scoreImageUrl(src);\n      score += scoreAttr($img);\n      score += scoreByParents($img);\n      score += scoreBySibling($img);\n      score += scoreByDimensions($img);\n      score += scoreByPosition(imgs, index);\n\n      imgScores[src] = score;\n    });\n\n    var _Reflect$ownKeys$redu = _Reflect$ownKeys(imgScores).reduce(function (acc, key) {\n      return imgScores[key] > acc[1] ? [key, imgScores[key]] : acc;\n    }, [null, 0]),\n        _Reflect$ownKeys$redu2 = _slicedToArray(_Reflect$ownKeys$redu, 2),\n        topUrl = _Reflect$ownKeys$redu2[0],\n        topScore = _Reflect$ownKeys$redu2[1];\n\n    if (topScore > 0) {\n      cleanUrl = clean$1(topUrl);\n\n      if (cleanUrl) return cleanUrl;\n    }\n\n    // If nothing else worked, check to see if there are any really\n    // probable nodes in the doc, like <link rel=\"image_src\" />.\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _getIterator(LEAD_IMAGE_URL_SELECTORS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var selector = _step.value;\n\n        var $node = $(selector).first();\n        var src = $node.attr('src');\n        if (src) {\n          cleanUrl = clean$1(src);\n          if (cleanUrl) return cleanUrl;\n        }\n\n        var href = $node.attr('href');\n        if (href) {\n          cleanUrl = clean$1(href);\n          if (cleanUrl) return cleanUrl;\n        }\n\n        var value = $node.attr('value');\n        if (value) {\n          cleanUrl = clean$1(value);\n          if (cleanUrl) return cleanUrl;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\n\n\n// def extract(self):\n//     \"\"\"\n//     # First, try to find the \"best\" image via the content.\n//     # We'd rather not have to fetch each image and check dimensions,\n//     # so try to do some analysis and determine them instead.\n//     content = self.extractor.extract_content(return_type=\"node\")\n//     imgs = content.xpath('.//img')\n//     img_scores = defaultdict(int)\n//     logger.debug('Scoring %d images from content', len(imgs))\n//     for (i, img) in enumerate(imgs):\n//         img_score = 0\n//\n//         if not 'src' in img.attrib:\n//             logger.debug('No src attribute found')\n//             continue\n//\n//         try:\n//             parsed_img = urlparse(img.attrib['src'])\n//             img_path = parsed_img.path.lower()\n//         except ValueError:\n//             logger.debug('ValueError getting img path.')\n//             continue\n//         logger.debug('Image path is %s', img_path)\n//\n//         if constants.POSITIVE_LEAD_IMAGE_URL_HINTS_RE.match(img_path):\n//             logger.debug('Positive URL hints match. Adding 20.')\n//             img_score += 20\n//\n//         if constants.NEGATIVE_LEAD_IMAGE_URL_HINTS_RE.match(img_path):\n//             logger.debug('Negative URL hints match. Subtracting 20.')\n//             img_score -= 20\n//\n//         # Gifs are more often structure than photos\n//         if img_path.endswith('gif'):\n//             logger.debug('gif found. Subtracting 10.')\n//             img_score -= 10\n//\n//         # JPGs are more often photographs\n//         if img_path.endswith('jpg'):\n//             logger.debug('jpg found. Adding 10.')\n//             img_score += 10\n//\n//         # PNGs are neutral.\n//\n//         # Alt attribute usually means non-presentational image.\n//         if 'alt' in img.attrib and len(img.attrib['alt']) > 5:\n//             logger.debug('alt attribute found. Adding 5.')\n//             img_score += 5\n//\n//         # Look through our parent and grandparent for figure-like\n//         # container elements, give a bonus if we find them\n//         parents = [img.getparent()]\n//         if parents[0] is not None and parents[0].getparent() is not None:\n//             parents.append(parents[0].getparent())\n//         for p in parents:\n//             if p.tag == 'figure':\n//                 logger.debug('Parent with <figure> tag found. Adding 25.')\n//                 img_score += 25\n//\n//             p_sig = ' '.join([p.get('id', ''), p.get('class', '')])\n//             if constants.PHOTO_HINTS_RE.search(p_sig):\n//                 logger.debug('Photo hints regex match. Adding 15.')\n//                 img_score += 15\n//\n//         # Look at our immediate sibling and see if it looks like it's a\n//         # caption. Bonus if so.\n//         sibling = img.getnext()\n//         if sibling is not None:\n//             if sibling.tag == 'figcaption':\n//                 img_score += 25\n//\n//             sib_sig = ' '.join([sibling.get('id', ''),\n//                                 sibling.get('class', '')]).lower()\n//             if 'caption' in sib_sig:\n//                 img_score += 15\n//\n//         # Pull out width/height if they were set.\n//         img_width = None\n//         img_height = None\n//         if 'width' in img.attrib:\n//             try:\n//                 img_width = float(img.get('width'))\n//             except ValueError:\n//                 pass\n//         if 'height' in img.attrib:\n//             try:\n//                 img_height = float(img.get('height'))\n//             except ValueError:\n//                 pass\n//\n//         # Penalty for skinny images\n//         if img_width and img_width <= 50:\n//             logger.debug('Skinny image found. Subtracting 50.')\n//             img_score -= 50\n//\n//         # Penalty for short images\n//         if img_height and img_height <= 50:\n//             # Wide, short images are more common than narrow, tall ones\n//             logger.debug('Short image found. Subtracting 25.')\n//             img_score -= 25\n//\n//         if img_width and img_height and not 'sprite' in img_path:\n//             area = img_width * img_height\n//\n//             if area < 5000: # Smaller than 50x100\n//                 logger.debug('Image with small area found. Subtracting 100.')\n//                 img_score -= 100\n//             else:\n//                 img_score += round(area/1000.0)\n//\n//         # If the image is higher on the page than other images,\n//         # it gets a bonus. Penalty if lower.\n//         logger.debug('Adding page placement bonus of %d.', len(imgs)/2 - i)\n//         img_score += len(imgs)/2 - i\n//\n//         # Use the raw src here because we munged img_path for case\n//         # insensitivity\n//         logger.debug('Final score is %d.', img_score)\n//         img_scores[img.attrib['src']] += img_score\n//\n//     top_score = 0\n//     top_url = None\n//     for (url, score) in img_scores.items():\n//         if score > top_score:\n//             top_url = url\n//             top_score = score\n//\n//     if top_score > 0:\n//         logger.debug('Using top score image from content. Score was %d', top_score)\n//         return top_url\n//\n//\n//     # If nothing else worked, check to see if there are any really\n//     # probable nodes in the doc, like <link rel=\"image_src\" />.\n//     logger.debug('Trying to find lead image in probable nodes')\n//     for selector in constants.LEAD_IMAGE_URL_SELECTORS:\n//         nodes = self.resource.extract_by_selector(selector)\n//         for node in nodes:\n//             clean_value = None\n//             if node.attrib.get('src'):\n//                 clean_value = self.clean(node.attrib['src'])\n//\n//             if not clean_value and node.attrib.get('href'):\n//                 clean_value = self.clean(node.attrib['href'])\n//\n//             if not clean_value and node.attrib.get('value'):\n//                 clean_value = self.clean(node.attrib['value'])\n//\n//             if clean_value:\n//                 logger.debug('Found lead image in probable nodes.')\n//                 logger.debug('Node was: %s', node)\n//                 return clean_value\n//\n//     return None\n\nfunction scoreSimilarity(score, articleUrl, href) {\n  // Do this last and only if we have a real candidate, because it's\n  // potentially expensive computationally. Compare the link to this\n  // URL using difflib to get the % similarity of these URLs. On a\n  // sliding scale, subtract points from this link based on\n  // similarity.\n  if (score > 0) {\n    var similarity = new difflib.SequenceMatcher(null, articleUrl, href).ratio();\n    // Subtract .1 from diff_percent when calculating modifier,\n    // which means that if it's less than 10% different, we give a\n    // bonus instead. Ex:\n    //  3% different = +17.5 points\n    // 10% different = 0 points\n    // 20% different = -25 points\n    var diffPercent = 1.0 - similarity;\n    var diffModifier = -(250 * (diffPercent - 0.2));\n    return score + diffModifier;\n  }\n\n  return 0;\n}\n\nfunction scoreLinkText(linkText, pageNum) {\n  // If the link text can be parsed as a number, give it a minor\n  // bonus, with a slight bias towards lower numbered pages. This is\n  // so that pages that might not have 'next' in their text can still\n  // get scored, and sorted properly by score.\n  var score = 0;\n\n  if (IS_DIGIT_RE.test(linkText.trim())) {\n    var linkTextAsNum = parseInt(linkText, 10);\n    // If it's the first page, we already got it on the first call.\n    // Give it a negative score. Otherwise, up to page 10, give a\n    // small bonus.\n    if (linkTextAsNum < 2) {\n      score = -30;\n    } else {\n      score = Math.max(0, 10 - linkTextAsNum);\n    }\n\n    // If it appears that the current page number is greater than\n    // this links page number, it's a very bad sign. Give it a big\n    // penalty.\n    if (pageNum && pageNum >= linkTextAsNum) {\n      score -= 50;\n    }\n  }\n\n  return score;\n}\n\nfunction scorePageInLink(pageNum, isWp) {\n  // page in the link = bonus. Intentionally ignore wordpress because\n  // their ?p=123 link style gets caught by this even though it means\n  // separate documents entirely.\n  if (pageNum && !isWp) {\n    return 50;\n  }\n\n  return 0;\n}\n\nvar DIGIT_RE$2 = /\\d/;\n\n// A list of words that, if found in link text or URLs, likely mean that\n// this link is not a next page link.\nvar EXTRANEOUS_LINK_HINTS$1 = ['print', 'archive', 'comment', 'discuss', 'e-mail', 'email', 'share', 'reply', 'all', 'login', 'sign', 'single', 'adx', 'entry-unrelated'];\nvar EXTRANEOUS_LINK_HINTS_RE$1 = new RegExp(EXTRANEOUS_LINK_HINTS$1.join('|'), 'i');\n\n// Match any link text/classname/id that looks like it could mean the next\n// page. Things like: next, continue, >, >>, » but not >|, »| as those can\n// mean last page.\nvar NEXT_LINK_TEXT_RE$1 = new RegExp('(next|weiter|continue|>([^|]|$)|»([^|]|$))', 'i');\n\n// Match any link text/classname/id that looks like it is an end link: things\n// like \"first\", \"last\", \"end\", etc.\nvar CAP_LINK_TEXT_RE$1 = new RegExp('(first|last|end)', 'i');\n\n// Match any link text/classname/id that looks like it means the previous\n// page.\nvar PREV_LINK_TEXT_RE$1 = new RegExp('(prev|earl|old|new|<|«)', 'i');\n\n// Match any phrase that looks like it could be page, or paging, or pagination\n\nfunction scoreExtraneousLinks(href) {\n  // If the URL itself contains extraneous values, give a penalty.\n  if (EXTRANEOUS_LINK_HINTS_RE$1.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n\nfunction makeSig$1($link) {\n  return ($link.attr('class') || '') + ' ' + ($link.attr('id') || '');\n}\n\nfunction scoreByParents$1($link) {\n  // If a parent node contains paging-like classname or id, give a\n  // bonus. Additionally, if a parent_node contains bad content\n  // (like 'sponsor'), give a penalty.\n  var $parent = $link.parent();\n  var positiveMatch = false;\n  var negativeMatch = false;\n  var score = 0;\n\n  _Array$from(range(0, 4)).forEach(function () {\n    if ($parent.length === 0) {\n      return;\n    }\n\n    var parentData = makeSig$1($parent, ' ');\n\n    // If we have 'page' or 'paging' in our data, that's a good\n    // sign. Add a bonus.\n    if (!positiveMatch && PAGE_RE.test(parentData)) {\n      positiveMatch = true;\n      score += 25;\n    }\n\n    // If we have 'comment' or something in our data, and\n    // we don't have something like 'content' as well, that's\n    // a bad sign. Give a penalty.\n    if (!negativeMatch && NEGATIVE_SCORE_RE.test(parentData) && EXTRANEOUS_LINK_HINTS_RE$1.test(parentData)) {\n      if (!POSITIVE_SCORE_RE.test(parentData)) {\n        negativeMatch = true;\n        score -= 25;\n      }\n    }\n\n    $parent = $parent.parent();\n  });\n\n  return score;\n}\n\nfunction scorePrevLink(linkData) {\n  // If the link has something like \"previous\", its definitely\n  // an old link, skip it.\n  if (PREV_LINK_TEXT_RE$1.test(linkData)) {\n    return -200;\n  }\n\n  return 0;\n}\n\nfunction shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls) {\n  // skip if we've already fetched this url\n  if (previousUrls.find(function (url) {\n    return href === url;\n  }) !== undefined) {\n    return false;\n  }\n\n  // If we've already parsed this URL, or the URL matches the base\n  // URL, or is empty, skip it.\n  if (!href || href === articleUrl || href === baseUrl) {\n    return false;\n  }\n\n  var hostname = parsedUrl.hostname;\n\n  var _URL$parse = URL.parse(href),\n      linkHost = _URL$parse.hostname;\n\n  // Domain mismatch.\n\n\n  if (linkHost !== hostname) {\n    return false;\n  }\n\n  // If href doesn't contain a digit after removing the base URL,\n  // it's certainly not the next page.\n  var fragment = href.replace(baseUrl, '');\n  if (!DIGIT_RE$2.test(fragment)) {\n    return false;\n  }\n\n  // This link has extraneous content (like \"comment\") in its link\n  // text, so we skip it.\n  if (EXTRANEOUS_LINK_HINTS_RE$1.test(linkText)) {\n    return false;\n  }\n\n  // Next page link text is never long, skip if it is too long.\n  if (linkText.length > 25) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction scoreBaseUrl(href, baseRegex) {\n  // If the baseUrl isn't part of this URL, penalize this\n  // link. It could still be the link, but the odds are lower.\n  // Example:\n  // http://www.actionscript.org/resources/articles/745/1/JavaScript-and-VBScript-Injection-in-ActionScript-3/Page1.html\n  if (!baseRegex.test(href)) {\n    return -25;\n  }\n\n  return 0;\n}\n\nfunction scoreNextLinkText(linkData) {\n  // Things like \"next\", \">>\", etc.\n  if (NEXT_LINK_TEXT_RE$1.test(linkData)) {\n    return 50;\n  }\n\n  return 0;\n}\n\nfunction scoreCapLinks(linkData) {\n  // Cap links are links like \"last\", etc.\n  if (CAP_LINK_TEXT_RE$1.test(linkData)) {\n    // If we found a link like \"last\", but we've already seen that\n    // this link is also \"next\", it's fine. If it's not been\n    // previously marked as \"next\", then it's probably bad.\n    // Penalize.\n    if (NEXT_LINK_TEXT_RE$1.test(linkData)) {\n      return -65;\n    }\n  }\n\n  return 0;\n}\n\nfunction makeBaseRegex(baseUrl) {\n  return new RegExp('^' + baseUrl, 'i');\n}\n\nfunction makeSig($link, linkText) {\n  return (linkText || $link.text()) + ' ' + ($link.attr('class') || '') + ' ' + ($link.attr('id') || '');\n}\n\nfunction scoreLinks(_ref) {\n  var links = _ref.links,\n      articleUrl = _ref.articleUrl,\n      baseUrl = _ref.baseUrl,\n      parsedUrl = _ref.parsedUrl,\n      $ = _ref.$,\n      _ref$previousUrls = _ref.previousUrls,\n      previousUrls = _ref$previousUrls === undefined ? [] : _ref$previousUrls;\n\n  parsedUrl = parsedUrl || URL.parse(articleUrl);\n  var baseRegex = makeBaseRegex(baseUrl);\n  var isWp = isWordpress($);\n\n  // Loop through all links, looking for hints that they may be next-page\n  // links. Things like having \"page\" in their textContent, className or\n  // id, or being a child of a node with a page-y className or id.\n  //\n  // After we do that, assign each page a score, and pick the one that\n  // looks most like the next page link, as long as its score is strong\n  // enough to have decent confidence.\n  var scoredPages = links.reduce(function (possiblePages, link) {\n    // Remove any anchor data since we don't do a good job\n    // standardizing URLs (it's hard), we're going to do\n    // some checking with and without a trailing slash\n    var attrs = getAttrs(link);\n    var href = removeAnchor(attrs.href);\n    var $link = $(link);\n    var linkText = $link.text();\n\n    if (!shouldScore(href, articleUrl, baseUrl, parsedUrl, linkText, previousUrls)) {\n      return possiblePages;\n    }\n\n    // ## PASSED THE FIRST-PASS TESTS. Start scoring. ##\n    if (!possiblePages[href]) {\n      possiblePages[href] = {\n        score: 0,\n        linkText: linkText,\n        href: href\n      };\n    } else {\n      possiblePages[href].linkText = possiblePages[href].linkText + '|' + linkText;\n    }\n\n    var possiblePage = possiblePages[href];\n    var linkData = makeSig($link, linkText);\n    var pageNum = pageNumFromUrl(href);\n\n    var score = scoreBaseUrl(href, baseRegex);\n    score += scoreNextLinkText(linkData);\n    score += scoreCapLinks(linkData);\n    score += scorePrevLink(linkData);\n    score += scoreByParents$1($link);\n    score += scoreExtraneousLinks(href);\n    score += scorePageInLink(pageNum, isWp);\n    score += scoreLinkText(linkText, pageNum);\n    score += scoreSimilarity(score, articleUrl, href);\n\n    possiblePage.score = score;\n\n    return possiblePages;\n  }, {});\n\n  return _Reflect$ownKeys(scoredPages).length === 0 ? null : scoredPages;\n}\n\n/* eslint-disable */\n// Looks for and returns next page url\n// for multi-page articles\nvar GenericNextPageUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        parsedUrl = _ref.parsedUrl,\n        _ref$previousUrls = _ref.previousUrls,\n        previousUrls = _ref$previousUrls === undefined ? [] : _ref$previousUrls;\n\n    parsedUrl = parsedUrl || URL.parse(url);\n\n    var articleUrl = removeAnchor(url);\n    var baseUrl = articleBaseUrl(url, parsedUrl);\n\n    var links = $('a[href]').toArray();\n\n    var scoredLinks = scoreLinks({\n      links: links,\n      articleUrl: articleUrl,\n      baseUrl: baseUrl,\n      parsedUrl: parsedUrl,\n      $: $,\n      previousUrls: previousUrls\n    });\n\n    // If no links were scored, return null\n    if (!scoredLinks) return null;\n\n    // now that we've scored all possible pages,\n    // find the biggest one.\n    var topPage = _Reflect$ownKeys(scoredLinks).reduce(function (acc, link) {\n      var scoredLink = scoredLinks[link];\n      return scoredLink.score > acc.score ? scoredLink : acc;\n    }, { score: -100 });\n\n    // If the score is less than 50, we're not confident enough to use it,\n    // so we fail.\n    if (topPage.score >= 50) {\n      return topPage.href;\n    }\n\n    return null;\n  }\n};\n\nvar CANONICAL_META_SELECTORS = ['og:url'];\n\nfunction parseDomain(url) {\n  var parsedUrl = URL.parse(url);\n  var hostname = parsedUrl.hostname;\n\n  return hostname;\n}\n\nfunction result(url) {\n  return {\n    url: url,\n    domain: parseDomain(url)\n  };\n}\n\nvar GenericUrlExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        url = _ref.url,\n        metaCache = _ref.metaCache;\n\n    var $canonical = $('link[rel=canonical]');\n    if ($canonical.length !== 0) {\n      var href = $canonical.attr('href');\n      if (href) {\n        return result(href);\n      }\n    }\n\n    var metaUrl = extractFromMeta$$1($, CANONICAL_META_SELECTORS, metaCache);\n    if (metaUrl) {\n      return result(metaUrl);\n    }\n\n    return result(url);\n  }\n};\n\nvar EXCERPT_META_SELECTORS = ['og:description', 'twitter:description'];\n\nfunction clean$2(content, $) {\n  var maxLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n\n  content = content.replace(/[\\s\\n]+/g, ' ').trim();\n  return ellipsize(content, maxLength, { ellipse: '&hellip;' });\n}\n\nvar GenericExcerptExtractor = {\n  extract: function extract(_ref) {\n    var $ = _ref.$,\n        content = _ref.content,\n        metaCache = _ref.metaCache;\n\n    var excerpt = extractFromMeta$$1($, EXCERPT_META_SELECTORS, metaCache);\n    if (excerpt) {\n      return clean$2(stripTags(excerpt, $));\n    }\n    // Fall back to excerpting from the extracted content\n    var maxLength = 200;\n    var shortContent = content.slice(0, maxLength * 5);\n    return clean$2($(shortContent).text(), $, maxLength);\n  }\n};\n\nvar GenericWordCountExtractor = {\n  extract: function extract(_ref) {\n    var content = _ref.content;\n\n    var $ = cheerio.load(content);\n    var $content = $('div').first();\n\n    var text = normalizeSpaces($content.text());\n    return text.split(/\\s/).length;\n  }\n};\n\nvar GenericExtractor = {\n  // This extractor is the default for all domains\n  domain: '*',\n  title: GenericTitleExtractor.extract,\n  date_published: GenericDatePublishedExtractor.extract,\n  author: GenericAuthorExtractor.extract,\n  content: GenericContentExtractor.extract.bind(GenericContentExtractor),\n  lead_image_url: GenericLeadImageUrlExtractor.extract,\n  dek: GenericDekExtractor.extract,\n  next_page_url: GenericNextPageUrlExtractor.extract,\n  url_and_domain: GenericUrlExtractor.extract,\n  excerpt: GenericExcerptExtractor.extract,\n  word_count: GenericWordCountExtractor.extract,\n  direction: function direction(_ref) {\n    var title = _ref.title;\n    return stringDirection.getDirection(title);\n  },\n\n  extract: function extract(options) {\n    var html = options.html,\n        cheerio$$1 = options.cheerio,\n        $ = options.$;\n\n\n    if (html && !$) {\n      var loaded = cheerio$$1.load(html);\n      options.$ = loaded;\n    }\n\n    var title = this.title(options);\n    var date_published = this.date_published(options);\n    var author = this.author(options);\n    var content = this.content(_extends({}, options, { title: title }));\n    var lead_image_url = this.lead_image_url(_extends({}, options, { content: content }));\n    var dek = this.dek(_extends({}, options, { content: content }));\n    var next_page_url = this.next_page_url(options);\n    var excerpt = this.excerpt(_extends({}, options, { content: content }));\n    var word_count = this.word_count(_extends({}, options, { content: content }));\n    var direction = this.direction({ title: title });\n\n    var _url_and_domain = this.url_and_domain(options),\n        url = _url_and_domain.url,\n        domain = _url_and_domain.domain;\n\n    return {\n      title: title,\n      author: author,\n      date_published: date_published || null,\n      dek: dek,\n      lead_image_url: lead_image_url,\n      content: content,\n      next_page_url: next_page_url,\n      url: url,\n      domain: domain,\n      excerpt: excerpt,\n      word_count: word_count,\n      direction: direction\n    };\n  }\n};\n\nfunction getExtractor(url, parsedUrl) {\n  parsedUrl = parsedUrl || URL.parse(url);\n  var _parsedUrl = parsedUrl,\n      hostname = _parsedUrl.hostname;\n\n  var baseDomain = hostname.split('.').slice(-2).join('.');\n\n  return Extractors[hostname] || Extractors[baseDomain] || GenericExtractor;\n}\n\n/* eslint-disable */\n// Remove elements by an array of selectors\nfunction cleanBySelectors($content, $, _ref) {\n  var clean = _ref.clean;\n\n  if (!clean) return $content;\n\n  $(clean.join(','), $content).remove();\n\n  return $content;\n}\n\n// Transform matching elements\nfunction transformElements($content, $, _ref2) {\n  var transforms = _ref2.transforms;\n\n  if (!transforms) return $content;\n\n  _Reflect$ownKeys(transforms).forEach(function (key) {\n    var $matches = $(key, $content);\n    var value = transforms[key];\n\n    // If value is a string, convert directly\n    if (typeof value === 'string') {\n      $matches.each(function (index, node) {\n        convertNodeTo$$1($(node), $, transforms[key]);\n      });\n    } else if (typeof value === 'function') {\n      // If value is function, apply function to node\n      $matches.each(function (index, node) {\n        var result = value($(node), $);\n        // If function returns a string, convert node to that value\n        if (typeof result === 'string') {\n          convertNodeTo$$1($(node), $, result);\n        }\n      });\n    }\n  });\n\n  return $content;\n}\n\nfunction findMatchingSelector($, selectors) {\n  return selectors.find(function (selector) {\n    if (Array.isArray(selector)) {\n      var _selector = _slicedToArray(selector, 2),\n          s = _selector[0],\n          attr = _selector[1];\n\n      return $(s).length === 1 && $(s).attr(attr) && $(s).attr(attr).trim() !== '';\n    }\n    // debugger\n\n    return $(selector).length === 1 && $(selector).text().trim() !== '';\n  });\n}\n\nfunction select(opts) {\n  var $ = opts.$,\n      type = opts.type,\n      extractionOpts = opts.extractionOpts,\n      _opts$extractHtml = opts.extractHtml,\n      extractHtml = _opts$extractHtml === undefined ? false : _opts$extractHtml;\n  // Skip if there's not extraction for this type\n\n  if (!extractionOpts) return null;\n\n  // If a string is hardcoded for a type (e.g., Wikipedia\n  // contributors), return the string\n  if (typeof extractionOpts === 'string') return extractionOpts;\n\n  var selectors = extractionOpts.selectors,\n      _extractionOpts$defau = extractionOpts.defaultCleaner,\n      defaultCleaner = _extractionOpts$defau === undefined ? true : _extractionOpts$defau;\n\n\n  var matchingSelector = findMatchingSelector($, selectors);\n\n  if (!matchingSelector) return null;\n\n  // Declaring result; will contain either\n  // text or html, which will be cleaned\n  // by the appropriate cleaner type\n\n  // If the selector type requests html as its return type\n  // transform and clean the element with provided selectors\n  if (extractHtml) {\n    var $content = $(matchingSelector);\n\n    // Wrap in div so transformation can take place on root element\n    $content.wrap($('<div></div>'));\n    $content = $content.parent();\n\n    $content = transformElements($content, $, extractionOpts);\n    $content = cleanBySelectors($content, $, extractionOpts);\n\n    $content = Cleaners[type]($content, _extends({}, opts, { defaultCleaner: defaultCleaner }));\n\n    return $.html($content);\n  }\n\n  var result = void 0;\n\n  // if selector is an array (e.g., ['img', 'src']),\n  // extract the attr\n  if (Array.isArray(matchingSelector)) {\n    var _matchingSelector = _slicedToArray(matchingSelector, 2),\n        selector = _matchingSelector[0],\n        attr = _matchingSelector[1];\n\n    result = $(selector).attr(attr).trim();\n  } else {\n    result = $(matchingSelector).text().trim();\n  }\n\n  // Allow custom extractor to skip default cleaner\n  // for this type; defaults to true\n  if (defaultCleaner) {\n    return Cleaners[type](result, opts);\n  }\n\n  return result;\n}\n\nfunction extractResult(opts) {\n  var type = opts.type,\n      extractor = opts.extractor,\n      _opts$fallback = opts.fallback,\n      fallback = _opts$fallback === undefined ? true : _opts$fallback;\n\n\n  var result = select(_extends({}, opts, { extractionOpts: extractor[type] }));\n\n  // If custom parser succeeds, return the result\n  if (result) {\n    return result;\n  }\n\n  // If nothing matches the selector, and fallback is enabled,\n  // run the Generic extraction\n  if (fallback) return GenericExtractor[type](opts);\n\n  return null;\n}\n\nvar RootExtractor = {\n  extract: function extract() {\n    var extractor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : GenericExtractor;\n    var opts = arguments[1];\n    var _opts = opts,\n        contentOnly = _opts.contentOnly,\n        extractedTitle = _opts.extractedTitle;\n    // This is the generic extractor. Run its extract method\n\n    if (extractor.domain === '*') return extractor.extract(opts);\n\n    opts = _extends({}, opts, {\n      extractor: extractor\n    });\n\n    if (contentOnly) {\n      var _content = extractResult(_extends({}, opts, { type: 'content', extractHtml: true, title: extractedTitle\n      }));\n      return {\n        content: _content\n      };\n    }\n    var title = extractResult(_extends({}, opts, { type: 'title' }));\n    var date_published = extractResult(_extends({}, opts, { type: 'date_published' }));\n    var author = extractResult(_extends({}, opts, { type: 'author' }));\n    var next_page_url = extractResult(_extends({}, opts, { type: 'next_page_url' }));\n    var content = extractResult(_extends({}, opts, { type: 'content', extractHtml: true, title: title\n    }));\n    var lead_image_url = extractResult(_extends({}, opts, { type: 'lead_image_url', content: content }));\n    var excerpt = extractResult(_extends({}, opts, { type: 'excerpt', content: content }));\n    var dek = extractResult(_extends({}, opts, { type: 'dek', content: content, excerpt: excerpt }));\n    var word_count = extractResult(_extends({}, opts, { type: 'word_count', content: content }));\n    var direction = extractResult(_extends({}, opts, { type: 'direction', title: title }));\n\n    var _ref3 = extractResult(_extends({}, opts, { type: 'url_and_domain' })) || { url: null, domain: null },\n        url = _ref3.url,\n        domain = _ref3.domain;\n\n    return {\n      title: title,\n      content: content,\n      author: author,\n      date_published: date_published,\n      lead_image_url: lead_image_url,\n      dek: dek,\n      next_page_url: next_page_url,\n      url: url,\n      domain: domain,\n      excerpt: excerpt,\n      word_count: word_count,\n      direction: direction\n    };\n  }\n};\n\nvar collectAllPages = (function () {\n  var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref2) {\n    var next_page_url = _ref2.next_page_url,\n        html = _ref2.html,\n        $ = _ref2.$,\n        metaCache = _ref2.metaCache,\n        result = _ref2.result,\n        Extractor = _ref2.Extractor,\n        title = _ref2.title,\n        url = _ref2.url,\n        cheerio$$1 = _ref2.cheerio;\n    var pages, previousUrls, extractorOpts, nextPageResult, word_count;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // At this point, we've fetched just the first page\n            pages = 1;\n            previousUrls = [removeAnchor(url)];\n\n            // If we've gone over 26 pages, something has\n            // likely gone wrong.\n\n          case 2:\n            if (!(next_page_url && pages < 26)) {\n              _context.next = 15;\n              break;\n            }\n\n            pages += 1;\n            _context.next = 6;\n            return Resource.create(next_page_url);\n\n          case 6:\n            $ = _context.sent;\n\n            html = $.html();\n\n            extractorOpts = {\n              url: next_page_url,\n              html: html,\n              $: $,\n              metaCache: metaCache,\n              contentOnly: true,\n              extractedTitle: title,\n              previousUrls: previousUrls,\n              cheerio: cheerio$$1\n            };\n            nextPageResult = RootExtractor.extract(Extractor, extractorOpts);\n\n\n            previousUrls.push(next_page_url);\n            result = _extends({}, result, {\n              content: '\\n        ' + result.content + '\\n        <hr>\\n        <h4>Page ' + pages + '</h4>\\n        ' + nextPageResult.content + '\\n        '\n            });\n\n            next_page_url = nextPageResult.next_page_url;\n            _context.next = 2;\n            break;\n\n          case 15:\n            word_count = GenericExtractor.word_count({ content: '<div>' + result.content + '</div>' });\n            return _context.abrupt('return', _extends({}, result, {\n              total_pages: pages,\n              pages_rendered: pages,\n              word_count: word_count\n            }));\n\n          case 17:\n          case 'end':\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  function collectAllPages(_x) {\n    return _ref.apply(this, arguments);\n  }\n\n  return collectAllPages;\n})();\n\nvar Mercury = {\n  parse: function parse(url, html) {\n    var _this = this;\n\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n      var _opts$fetchAllPages, fetchAllPages, _opts$fallback, fallback, parsedUrl, Extractor, $, metaCache, result, _result, title, next_page_url;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _opts$fetchAllPages = opts.fetchAllPages, fetchAllPages = _opts$fetchAllPages === undefined ? true : _opts$fetchAllPages, _opts$fallback = opts.fallback, fallback = _opts$fallback === undefined ? true : _opts$fallback;\n              parsedUrl = URL.parse(url);\n\n              if (validateUrl(parsedUrl)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt('return', Errors.badUrl);\n\n            case 4:\n              Extractor = getExtractor(url, parsedUrl);\n              // console.log(`Using extractor for ${Extractor.domain}`);\n\n              _context.next = 7;\n              return Resource.create(url, html, parsedUrl);\n\n            case 7:\n              $ = _context.sent;\n\n              if (!$.error) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt('return', $);\n\n            case 10:\n\n              html = $.html();\n\n              // Cached value of every meta name in our document.\n              // Used when extracting title/author/date_published/dek\n              metaCache = $('meta').map(function (_, node) {\n                return $(node).attr('name');\n              }).toArray();\n              result = RootExtractor.extract(Extractor, {\n                url: url,\n                html: html,\n                $: $,\n                metaCache: metaCache,\n                parsedUrl: parsedUrl,\n                fallback: fallback,\n                cheerio: cheerio\n              });\n              _result = result, title = _result.title, next_page_url = _result.next_page_url;\n\n              // Fetch more pages if next_page_url found\n\n              if (!(fetchAllPages && next_page_url)) {\n                _context.next = 20;\n                break;\n              }\n\n              _context.next = 17;\n              return collectAllPages({\n                Extractor: Extractor,\n                next_page_url: next_page_url,\n                html: html,\n                $: $,\n                metaCache: metaCache,\n                result: result,\n                title: title,\n                url: url,\n                cheerio: cheerio\n              });\n\n            case 17:\n              result = _context.sent;\n              _context.next = 21;\n              break;\n\n            case 20:\n              result = _extends({}, result, {\n                total_pages: 1,\n                rendered_pages: 1\n              });\n\n            case 21:\n              return _context.abrupt('return', result);\n\n            case 22:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, _this);\n    }))();\n  },\n\n\n  // A convenience method for getting a resource\n  // to work with, e.g., for custom extractor generator\n  fetchResource: function fetchResource(url) {\n    var _this2 = this;\n\n    return _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Resource.create(url);\n\n            case 2:\n              return _context2.abrupt('return', _context2.sent);\n\n            case 3:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, _this2);\n    }))();\n  }\n};\n\nmodule.exports = Mercury;\n//# sourceMappingURL=mercury.js.map\n","export default function insertValues(strings, ...values) {\n  if (values.length) {\n    return strings.reduce((result, part, idx) => {\n      let value = values[idx];\n\n      if (value && typeof value.toString === 'function') {\n        value = value.toString();\n      } else {\n        value = '';\n      }\n\n      return result + part + value;\n    }, '');\n  }\n\n  return strings.join('');\n}\n","import insertValues from './insert-values';\n\nconst bodyPattern = /^\\n([\\s\\S]+)\\s{2}$/gm;\nconst trailingWhitespace = /\\s+$/;\n\nexport default function template(strings, ...values) {\n  const compiled = insertValues(strings, ...values);\n  let [body] = compiled.match(bodyPattern) || [];\n  let indentLevel = /^\\s{0,4}(.+)$/g;\n\n  if (!body) {\n    body = compiled;\n    indentLevel = /^\\s{0,2}(.+)$/g;\n  }\n\n  return body.split('\\n')\n    .slice(1)\n    .map((line) => {\n      line = line.replace(indentLevel, '$1');\n\n      if (trailingWhitespace.test(line)) {\n        line = line.replace(trailingWhitespace, '');\n      }\n\n      return line;\n    })\n    .join('\\n');\n}\n","import template from './index';\n\nexport default function (hostname, name) {\n  return template`\n    export const ${name} = {\n      domain: '${hostname}',\n\n      title: {\n        selectors: [\n          // enter title selectors\n        ],\n      },\n\n      author: {\n        selectors: [\n          // enter author selectors\n        ],\n      },\n\n      date_published: {\n        selectors: [\n          // enter selectors\n        ],\n      },\n\n      dek: {\n        selectors: [\n          // enter selectors\n        ],\n      },\n\n      lead_image_url: {\n        selectors: [\n          // enter selectors\n        ],\n      },\n\n      content: {\n        selectors: [\n          // enter content selectors\n        ],\n\n        // Is there anything in the content you selected that needs transformed\n        // before it's consumable content? E.g., unusual lazy loaded images\n        transforms: {\n        },\n\n        // Is there anything that is in the result that shouldn't be?\n        // The clean selectors will remove anything that matches from\n        // the result\n        clean: [\n\n        ]\n      },\n    }\n  `;\n}\n","import template from './index';\n\nconst IGNORE = [\n  'url',\n  'domain',\n  'content',\n  'word_count',\n  'next_page_url',\n  'excerpt',\n  'direction',\n  'total_pages',\n  'rendered_pages',\n];\n\nfunction testFor(key, value, dir, file, url) {\n  if (IGNORE.find(k => k === key)) return '';\n\n  return template`\n  it('returns the ${key}', async () => {\n            // To pass this test, fill out the ${key} selector\n            // in ${dir}/index.js.\n            const html =\n              fs.readFileSync('${file}');\n            const articleUrl =\n              '${url}';\n\n            const { ${key} } =\n              await Mercury.parse(articleUrl, html, { fallback: false });\n\n            // Update these values with the expected values from\n            // the article.\n            assert.equal(${key}, ${value ? `\\`${value}\\`` : \"''\"})\n          });\n    `;\n}\n\nexport default function (file, url, dir, result, name) {\n  return template`\n    import assert from 'assert';\n    import fs from 'fs';\n    import URL from 'url';\n    import cheerio from 'cheerio';\n\n    import Mercury from 'mercury';\n    import getExtractor from 'extractors/get-extractor';\n    import { excerptContent } from 'utils/text';\n\n    describe('${name}', () => {\n      it('is selected properly', () => {\n        // This test should be passing by default.\n        // It sanity checks that the correct parser\n        // is being selected for URLs from this domain\n        const url =\n          '${url}';\n        const extractor = getExtractor(url);\n        assert.equal(extractor.domain, URL.parse(url).hostname)\n      })\n\n        ${Reflect.ownKeys(result).map(k => testFor(k, result[k], dir, file, url)).join('\\n\\n')}\n\n      it('returns the content', async () => {\n        // To pass this test, fill out the content selector\n        // in ${dir}/index.js.\n        // You may also want to make use of the clean and transform\n        // options.\n        const html =\n          fs.readFileSync('${file}');\n        const url =\n          '${url}';\n\n        const { content } =\n          await Mercury.parse(url, html, { fallback: false });\n\n        const $ = cheerio.load(content || '');\n\n        const first13 = excerptContent($('*').first().text(), 13)\n\n        // Update these values with the expected values from\n        // the article.\n        assert.equal(first13, 'Add the first 13 words of the article here');\n      });\n    });\n  `;\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n/* eslint-disable no-use-before-define */\n/* eslint-disable no-console */\nimport fs from 'fs';\nimport URL from 'url';\nimport inquirer from 'inquirer';\nimport ora from 'ora';\nimport { exec } from 'child_process';\n\nimport {\n  stripJunkTags,\n  makeLinksAbsolute,\n} from 'utils/dom';\nimport Mercury from '../dist/mercury';\nimport extractorTemplate from './templates/custom-extractor';\nimport extractorTestTemplate from './templates/custom-extractor-test';\n\nconst questions = [\n  {\n    type: 'input',\n    name: 'website',\n    message: 'Paste a url to an article you\\'d like to create or extend a parser for:',\n    validate(value) {\n      const { hostname } = URL.parse(value);\n      if (hostname) return true;\n\n      return false;\n    },\n  },\n];\nlet spinner;\n\nfunction confirm(fn, args, msg, newParser) {\n  spinner = ora({ text: msg });\n  spinner.start();\n  const result = fn(...args);\n\n  if (result && result.then) {\n    result.then(r => savePage(r, args, newParser));\n  } else {\n    spinner.succeed();\n  }\n\n  return result;\n}\n\nfunction confirmCreateDir(dir, msg) {\n  if (!fs.existsSync(dir)) {\n    confirm(fs.mkdirSync, [dir], msg);\n  }\n}\n\nfunction getDir(url) {\n  const { hostname } = URL.parse(url);\n  return `./src/extractors/custom/${hostname}`;\n}\n\nfunction scaffoldCustomParser(url) {\n  const dir = getDir(url);\n  const { hostname } = URL.parse(url);\n  let newParser = false;\n\n  if (!fs.existsSync(dir)) {\n    newParser = true;\n    confirmCreateDir(dir, `Creating ${hostname} directory`);\n    confirmCreateDir(`./fixtures/${hostname}`, 'Creating fixtures directory');\n  }\n\n  confirm(Mercury.fetchResource, [url], 'Fetching fixture', newParser);\n}\n\ninquirer.prompt(questions).then((answers) => {\n  scaffoldCustomParser(answers.website);\n});\n\nfunction generateScaffold(url, file, result) {\n  const { hostname } = URL.parse(url);\n  const extractor = extractorTemplate(hostname, extractorName(hostname));\n  const extractorTest =\n    extractorTestTemplate(\n      file, url, getDir(url), result, extractorName(hostname)\n    );\n\n  fs.writeFileSync(`${getDir(url)}/index.js`, extractor);\n  fs.writeFileSync(`${getDir(url)}/index.test.js`, extractorTest);\n  fs.appendFileSync(\n    './src/extractors/custom/index.js',\n    exportString(url),\n  );\n  exec(`npm run lint-fix-quiet -- ${getDir(url)}/*.js`);\n}\n\nfunction savePage($, [url], newParser) {\n  const { hostname } = URL.parse(url);\n\n  spinner.succeed();\n\n  const filename = new Date().getTime();\n  const file = `./fixtures/${hostname}/${filename}.html`;\n  // fix http(s) relative links:\n  makeLinksAbsolute($('*').first(), $, url);\n  $('[src], [href]').each((index, node) => {\n    const $node = $(node);\n    const link = $node.attr('src');\n    if (link && link.slice(0, 2) === '//') {\n      $node.attr('src', `http:${link}`);\n    }\n  });\n  const html = stripJunkTags($('*').first(), $, ['script']).html();\n\n  fs.writeFileSync(file, html);\n\n  Mercury.parse(url, html).then((result) => {\n    if (newParser) {\n      confirm(generateScaffold, [url, file, result], 'Generating parser and tests');\n      console.log(`Your custom site extractor has been set up. To get started building it, run\n      yarn watch:test -- ${hostname}\n        -- OR --\n      npm run watch:test -- ${hostname}`);\n    } else {\n      console.log(`\n  It looks like you already have a custom parser for this url.\n  The page you linked to has been added to ${file}. Copy and paste\n  the following code to use that page in your tests:\n  const html = fs.readFileSync('${file}');`);\n    }\n  });\n}\n\nfunction exportString(url) {\n  const { hostname } = URL.parse(url);\n  return `export * from './${hostname}';`;\n}\n\nfunction extractorName(hostname) {\n  const name = hostname\n    .split('.')\n    .map(w => `${w.charAt(0).toUpperCase()}${w.slice(1)}`)\n    .join('');\n  return `${name}Extractor`;\n}\n"],"names":["SPACER_RE","RegExp","KEEP_CLASS","KEEP_SELECTORS","STRIP_OUTPUT_TAGS","REMOVE_ATTRS","REMOVE_ATTR_SELECTORS","map","selector","REMOVE_ATTR_LIST","join","WHITELIST_ATTRS","WHITELIST_ATTRS_RE","REMOVE_EMPTY_TAGS","REMOVE_EMPTY_SELECTORS","tag","CLEAN_CONDITIONALLY_TAGS","HEADER_TAGS","HEADER_TAG_LIST","UNLIKELY_CANDIDATES_BLACKLIST","UNLIKELY_CANDIDATES_WHITELIST","DIV_TO_P_BLOCK_TAGS","IS_WP_SELECTOR","BLOCK_LEVEL_TAGS","BLOCK_LEVEL_TAGS_RE","candidatesBlacklist","CANDIDATES_BLACKLIST","candidatesWhitelist","CANDIDATES_WHITELIST","brsToPs","$","collapsing","each","index","element","$element","nextElement","next","get","tagName","toLowerCase","remove","paragraphize","node","br","$node","sibling","nextSibling","p","test","appendTo","replaceWith","convertDivs","div","$div","convertable","children","length","convertSpans","span","$span","parents","convertNodeTo","attrs","getAttrs","attribString","key","html","browser","text","contents","cleanForHeight","$img","height","parseInt","attr","width","removeAttr","removeSpacers","stripJunkTags","article","tags","not","removeClass","removeAllButWhitelist","$article","find","reduce","acc","NON_TOP_CANDIDATE_TAGS","NON_TOP_CANDIDATE_TAGS_RE","HNEWS_CONTENT_SELECTORS","PHOTO_HINTS","PHOTO_HINTS_RE","POSITIVE_SCORE_HINTS","POSITIVE_SCORE_RE","READABILITY_ASSET","NEGATIVE_SCORE_HINTS","NEGATIVE_SCORE_RE","DIGIT_RE","BR_TAGS_RE","BR_TAG_RE","UNLIKELY_RE","PARAGRAPH_SCORE_TAGS","CHILD_CONTENT_TAGS","BAD_TAGS","HTML_OR_BODY_RE","getWeight","classes","id","score","getScore","parseFloat","scoreCommas","match","idkRe","scoreLength","textLength","chunks","lengthBonus","Math","min","max","scoreParagraph","trim","slice","setScore","addScore","amount","getOrInitScore","e","addToParent","parent","weightNodes","scoreNode","addScoreTo","scorePs","$parent","rawScore","NORMALIZE_RE","normalizeSpaces","replace","PAGE_IN_HREF_RE","HAS_ALPHA_RE","IS_ALPHA_RE","IS_DIGIT_RE","isGoodSegment","segment","firstSegmentHasLetters","goodSegment","SENTENCE_END_RE","hasSentenceEnd","mergeSiblings","$candidate","topScore","siblingScoreThreshold","wrappingDiv","$sibling","siblingScore","append","contentBonus","density","linkDensity","newScore","siblingContent","siblingContentLength","first","removeUnlessContent","weight","hasClass","content","pCount","inputCount","contentLength","imgCount","nodeIsList","previousNode","prev","scriptCount","absolutize","rootUrl","$content","_","url","absoluteUrl","URL","resolve","makeLinksAbsolute","forEach","totalTextLength","linkText","linkLength","isGoodNode","maxChildren","withinComment","stripTags","cleanText","toArray","commentParent","nodeClass","class","classAndId","includes","undefined","attribs","attributes","name","value","setAttr","val","setAttribute","setAttrs","removeAttribute","ex","_interopDefault","require$$20","require$$19","require$$18","require$$17","require$$16","require$$15","require$$14","require$$13","require$$12","require$$11","require$$10","require$$9","require$$8","require$$7","require$$6","require$$5","require$$4","require$$3","require$$2","require$$1","require$$0","range","_regeneratorRuntime","mark","arguments","wrap","_context","start","end","stop","_marked","_ref","hostname","badUrl","error","messages","BAD_CONTENT_TYPES","options","reject","request","err","response","body","statusMessage","statusCode","parseNon2xx","headers","contentType","_response$headers","BAD_CONTENT_TYPES_RE","MAX_CONTENT_LENGTH","_asyncToGenerator","parsedUrl","_ref3","parse","encodeURI","_extends","REQUEST_HEADERS","timeout","FETCH_TIMEOUT","encoding","jar","gzip","followAllRedirects","sent","validateResponse","abrupt","t0","Errors","_callee","_x2","_x3","apply","from","to","convertMetaProp","convertNodeTo$$1","brsToPs$$1","_Reflect$ownKeys","img","protocol","_URL$parse","concat","_toConsumableArray","addClass","$hOnes","_defineProperty","$p","NON_TOP_CANDIDATE_TAGS$1","PHOTO_HINTS$1","POSITIVE_SCORE_HINTS$1","NEGATIVE_SCORE_HINTS$1","UNLIKELY_CANDIDATES_BLACKLIST$1","UNLIKELY_CANDIDATES_WHITELIST$1","POSITIVE_SCORE_RE$1","NEGATIVE_SCORE_RE$1","PHOTO_HINTS_RE$1","READABILITY_ASSET$1","getOrInitScore$$1","addScore$$1","scoreNode$$1","addToParent$$1","_$node$get","PARAGRAPH_SCORE_TAGS$1","CHILD_CONTENT_TAGS$1","BAD_TAGS$1","convertSpans$1","HNEWS_CONTENT_SELECTORS$1","_slicedToArray","parentSelector","_ref2","childSelector","regexList","re","matchRe","exec","matches","pageNum","split","parsed","host","path","reverse","rawSegment","_segment$split2","_segment$split","possibleSegment","fileExt","push","cleanedSegments","words","NON_TOP_CANDIDATE_TAGS_RE$1","header","$header","prevAll","title","metaNames","cachedNames","filter","indexOf","_step","type","nodes","values","cleanTags$$1","metaValue","v","_getIterator","foundNames","_iteratorNormalCompletion","_iterator","done","_loop","_typeof","_ret","_didIteratorError","_iteratorError","return","withinComment$$1","selectors","textOnly","IS_LINK","IS_IMAGE","isComment","TAGS_TO_REMOVE","cleanComments","create","preparedResponse","validResponse","result","_this","generateDoc","cheerio","load","normalizeWhitespace","normalizeMetaTags","convertLazyLoadedImages","clean","extractor","domains","domain","supportedDomains","merge","transforms","noscript","author","date_published","h1","$children","_$children","dek","defaultCleaner","prepend","$tweetContainer","tweets","s","src","lead_image_url","next_page_url","excerpt","h2","youtubeId","JSON","data","sources","iframe","decodeURIComponent","ytRe","thumb","_thumb$match2","_thumb$match","clone","BloggerExtractor","NYMagExtractor","WikipediaExtractor","TwitterExtractor","NYTimesExtractor","TheAtlanticExtractor","NewYorkerExtractor","WiredExtractor","MSNExtractor","YahooExtractor","BuzzfeedExtractor","WikiaExtractor","LittleThingsExtractor","PoliticoExtractor","DeadspinExtractor","BroadwayWorldExtractor","ApartmentTherapyExtractor","MediumExtractor","_Object$keys","CustomExtractors","mergeSupportedDomains","months","timestamp1","timestamp2","allMonths","CLEAN_AUTHOR_RE","leadImageUrl","validUrl","isWebUri","excerptContent","TEXT_LINK_RE","dekText","dateString","SPLIT_DATE_STRING","TIME_MERIDIAN_DOTS_RE","TIME_MERIDIAN_SPACE_RE","CLEAN_DATE_STRING_RE","MS_DATE_STRING","SEC_DATE_STRING","moment","date","isValid","cleanDateString","toISOString","_ref$cleanConditional","cleanConditionally","_ref$title","_ref$url","_ref$defaultCleaner","rewriteTopLevel$$1","cleanImages","markToKeep","cleanHOnes$$1","cleanHeaders","makeLinksAbsolute$$1","removeEmpty","cleanAttributes$$1","TITLE_SPLITTERS_RE","resolveSplitTitle","splitTitle","titleText","termCounts","_Reflect$ownKeys$redu2","_Reflect$ownKeys$redu","maxTerm","termCount","splitEnds","longestEnd","DOMAIN_ENDINGS_RE","wuzzy","levenshtein","startSlug","nakedDomain","startSlugRatio","endSlug","endSlugRatio","extractBreadcrumbTitle","newTitle","cleanDomainFromTitle","cleanAuthor","clean$1","cleanDek","cleanDatePublished","extractCleanNode","cleanTitle$$1","opts","stripUnlikelyCandidates","convertToParagraphs$$1","scoreContent$$1","findTopCandidate$$1","defaultOpts","extract","cheerio$$1","getContentNode","nodeIsSufficient","cleanAndReturnNode","k","extractBestNode","metaCache","extractFromMeta$$1","STRONG_TITLE_META_TAGS","extractFromSelectors$$1","STRONG_TITLE_SELECTORS","WEAK_TITLE_META_TAGS","WEAK_TITLE_SELECTORS","bylineRe","AUTHOR_META_TAGS","AUTHOR_MAX_LENGTH","AUTHOR_SELECTORS","BYLINE_SELECTORS_RE","_ref4","regex","abbrevMonthsStr","datePublished","DATE_PUBLISHED_META_TAGS","DATE_PUBLISHED_SELECTORS","extractFromUrl","DATE_PUBLISHED_URL_RES","POSITIVE_LEAD_IMAGE_URL_HINTS","NEGATIVE_LEAD_IMAGE_URL_HINTS","POSITIVE_LEAD_IMAGE_URL_HINTS_RE","NEGATIVE_LEAD_IMAGE_URL_HINTS_RE","GIF_RE","JPG_RE","$figParent","$gParent","getSig","area","round","$imgs","LEAD_IMAGE_URL_META_TAGS","imageUrl","cleanUrl","imgs","scoreImageUrl","scoreAttr","scoreByParents","scoreBySibling","scoreByDimensions","scoreByPosition","imgScores","topUrl","LEAD_IMAGE_URL_SELECTORS","href","articleUrl","SequenceMatcher","ratio","similarity","diffPercent","diffModifier","linkTextAsNum","isWp","EXTRANEOUS_LINK_HINTS$1","EXTRANEOUS_LINK_HINTS_RE$1","$link","_Array$from","makeSig$1","positiveMatch","PAGE_RE","parentData","negativeMatch","linkData","PREV_LINK_TEXT_RE$1","baseUrl","previousUrls","linkHost","DIGIT_RE$2","fragment","baseRegex","NEXT_LINK_TEXT_RE$1","CAP_LINK_TEXT_RE$1","links","_ref$previousUrls","makeBaseRegex","isWordpress","possiblePages","link","removeAnchor","shouldScore","makeSig","pageNumFromUrl","scoreBaseUrl","scoreNextLinkText","scoreCapLinks","scorePrevLink","scoreByParents$1","scoreExtraneousLinks","scorePageInLink","scoreLinkText","scoreSimilarity","possiblePage","scoredPages","articleBaseUrl","scoreLinks","scoredLinks","scoredLink","topPage","parseDomain","$canonical","CANONICAL_META_SELECTORS","metaUrl","maxLength","ellipse","EXCERPT_META_SELECTORS","shortContent","GenericTitleExtractor","GenericDatePublishedExtractor","GenericAuthorExtractor","GenericContentExtractor","bind","GenericLeadImageUrlExtractor","GenericDekExtractor","GenericNextPageUrlExtractor","url_and_domain","GenericUrlExtractor","GenericExcerptExtractor","word_count","GenericWordCountExtractor","direction","getDirection","loaded","_url_and_domain","_parsedUrl","Extractors","baseDomain","GenericExtractor","$matches","Array","isArray","_selector","extractionOpts","_opts$extractHtml","extractHtml","_extractionOpts$defau","findMatchingSelector","matchingSelector","transformElements","cleanBySelectors","Cleaners","_matchingSelector","_opts$fallback","fallback","select","contentOnly","_opts","extractedTitle","extractResult","_content","Extractor","extractorOpts","nextPageResult","pages","RootExtractor","total_pages","pages_rendered","_x","fetchAllPages","_result","_opts$fetchAllPages","validateUrl","getExtractor","rendered_pages","fetchResource","_context2","_callee2","_this2","Mercury","insertValues","strings","part","idx","toString","bodyPattern","trailingWhitespace","template","compiled","indentLevel","line","IGNORE","testFor","dir","file","questions","spinner","confirm","fn","args","msg","newParser","ora","then","savePage","r","succeed","confirmCreateDir","fs","existsSync","mkdirSync","getDir","scaffoldCustomParser","inquirer","prompt","answers","website","generateScaffold","extractorTemplate","extractorName","extractorTest","extractorTestTemplate","writeFileSync","appendFileSync","exportString","filename","Date","getTime","log","w","charAt","toUpperCase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,AAAO,IAAMA,YAAY,IAAIC,MAAJ,CAAW,gCAAX,EAA6C,GAA7C,CAAlB;;;;AAIP,AAAO,IAAMC,aAAa,qBAAnB;;AAEP,AAAO,IAAMC,iBAAiB,CAC5B,wCAD4B,EAE5B,uCAF4B,EAG5B,qCAH4B,EAI5B,oCAJ4B,CAAvB;;;AAQP,AAAO,IAAMC,oBAAoB,CAC/B,OAD+B,EAE/B,QAF+B,EAG/B,UAH+B,EAI/B,MAJ+B,EAK/B,OAL+B,EAM/B,IAN+B,EAO/B,OAP+B,EAQ/B,QAR+B,EAS/B,QAT+B,CAA1B;;;AAaP,AAAO,IAAMC,eAAe,CAAC,OAAD,EAAU,OAAV,CAArB;AACP,AAAO,IAAMC,wBAAwBD,aAAaE,GAAb,CAAiB;eAAgBC,QAAhB;CAAjB,CAA9B;AACP,AAAO,IAAMC,mBAAmBJ,aAAaK,IAAb,CAAkB,GAAlB,CAAzB;AACP,AAAO,IAAMC,kBAAkB,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,EAA0B,OAA1B,EAAmC,IAAnC,EAAyC,KAAzC,CAAxB;AACP,AAAO,IAAMC,qBAAqB,IAAIX,MAAJ,QAAgBU,gBAAgBD,IAAhB,CAAqB,GAArB,CAAhB,SAA+C,GAA/C,CAA3B;;;AAGP,AAAO,IAAMG,oBAAoB,CAAC,GAAD,CAA1B;AACP,AAAO,IAAMC,yBAAyBD,kBAAkBN,GAAlB,CAAsB;SAAUQ,GAAV;CAAtB,EAA6CL,IAA7C,CAAkD,GAAlD,CAA/B;;;AAGP,AAAO,IAAMM,2BAA2B,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb,EAAsB,KAAtB,EAA6B,QAA7B,EAAuC,MAAvC,EAA+CN,IAA/C,CAAoD,GAApD,CAAjC;;;AAGP,IAAMO,cAAc,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAApB;AACA,AAAO,IAAMC,kBAAkBD,YAAYP,IAAZ,CAAiB,GAAjB,CAAxB;;;;;;;;AAQP,AAAO,IAAMS,gCAAgC,CAC3C,UAD2C,EAE3C,OAF2C,EAG3C,QAH2C,EAI3C,SAJ2C,EAK3C,SAL2C,EAM3C,KAN2C,EAO3C,gBAP2C,EAQ3C,OAR2C,EAS3C,SAT2C,EAU3C,cAV2C,EAW3C,QAX2C,EAY3C,iBAZ2C,EAa3C,OAb2C,EAc3C,MAd2C;;AAgB3C,QAhB2C,EAiB3C,QAjB2C,EAkB3C,QAlB2C,EAmB3C,OAnB2C;AAoB3C,MApB2C,EAqB3C,MArB2C,EAsB3C,KAtB2C,EAuB3C,UAvB2C,EAwB3C,OAxB2C,EAyB3C,YAzB2C,EA0B3C,UA1B2C;AA2B3C,2BA3B2C;AA4B3C,OA5B2C,EA6B3C,eA7B2C,EA8B3C,SA9B2C,EA+B3C,QA/B2C,EAgC3C,QAhC2C,EAiC3C,KAjC2C,EAkC3C,OAlC2C,EAmC3C,UAnC2C,EAoC3C,SApC2C,EAqC3C,UArC2C,EAsC3C,SAtC2C,EAuC3C,SAvC2C,EAwC3C,OAxC2C,CAAtC;;;;;;;;;;;;;AAsDP,AAAO,IAAMC,gCAAgC,CAC3C,KAD2C,EAE3C,SAF2C,EAG3C,MAH2C,EAI3C,WAJ2C,EAK3C,QAL2C,EAM3C,SAN2C,EAO3C,qBAP2C,EAQ3C,QAR2C;AAS3C,OAT2C,EAU3C,QAV2C,EAW3C,OAX2C,EAY3C,MAZ2C,EAa3C,MAb2C,EAc3C,OAd2C,EAe3C,QAf2C,CAAtC;;;;;AAqBP,AAAO,IAAMC,sBAAsB,CACjC,GADiC,EAEjC,YAFiC,EAGjC,IAHiC,EAIjC,KAJiC,EAKjC,KALiC,EAMjC,GANiC,EAOjC,KAPiC,EAQjC,OARiC,EASjCX,IATiC,CAS5B,GAT4B,CAA5B;;;;AAaP,AAAO;;AAeP,AAAO;;;;;AAMP,AAAO;;AASP,AAAO;AAMP,AAAO;;;;;;AAMP,AAAO;;;AAuBP,AAAO;;;AAGP,AAAO;;;;;;AAMP,AAAO;;AA0DP,AAAO;;;AAGP,AAAO,IAAMY,iBAAiB,wCAAvB;;;AAGP,AAAO;;;;AAIP,AAAO;AAgBP,AAAO;;;AAGP,AAAO;;;;;;AAMP,AAAO;;;;AAIP,AAAO;;;;AAIP,AAAO;;;AAGP,AAAO;;;AAGP,AAAO;;;;AAIP,AAAO,IAAMC,mBAAmB,CAC9B,SAD8B,EAE9B,OAF8B,EAG9B,YAH8B,EAI9B,MAJ8B,EAK9B,IAL8B,EAM9B,QAN8B,EAO9B,QAP8B,EAQ9B,SAR8B,EAS9B,KAT8B,EAU9B,UAV8B,EAW9B,IAX8B,EAY9B,KAZ8B,EAa9B,IAb8B,EAc9B,IAd8B,EAe9B,OAf8B,EAgB9B,UAhB8B,EAiB9B,YAjB8B,EAkB9B,QAlB8B,EAmB9B,QAnB8B,EAoB9B,MApB8B,EAqB9B,IArB8B,EAsB9B,IAtB8B,EAuB9B,IAvB8B,EAwB9B,IAxB8B,EAyB9B,IAzB8B,EA0B9B,IA1B8B,EA2B9B,QA3B8B,EA4B9B,QA5B8B,EA6B9B,IA7B8B,EA8B9B,IA9B8B,EA+B9B,KA/B8B,EAgC9B,QAhC8B,EAiC9B,IAjC8B,EAkC9B,QAlC8B,EAmC9B,GAnC8B,EAoC9B,KApC8B,EAqC9B,UArC8B,EAsC9B,SAtC8B,EAuC9B,OAvC8B,EAwC9B,OAxC8B,EAyC9B,UAzC8B,EA0C9B,OA1C8B,EA2C9B,IA3C8B,EA4C9B,OA5C8B,EA6C9B,IA7C8B,EA8C9B,IA9C8B,EA+C9B,OA/C8B,CAAzB;AAiDP,AAAO,IAAMC,sBAAsB,IAAIvB,MAAJ,QAAgBsB,iBAAiBb,IAAjB,CAAsB,GAAtB,CAAhB,SAAgD,GAAhD,CAA5B;;;;;;AAMP,IAAMe,sBAAsBN,8BAA8BT,IAA9B,CAAmC,GAAnC,CAA5B;AACA,AAAO,IAAMgB,uBAAuB,IAAIzB,MAAJ,CAAWwB,mBAAX,EAAgC,GAAhC,CAA7B;;AAEP,IAAME,sBAAsBP,8BAA8BV,IAA9B,CAAmC,GAAnC,CAA5B;AACA,AAAO,IAAMkB,uBAAuB,IAAI3B,MAAJ,CAAW0B,mBAAX,EAAgC,GAAhC,CAA7B,CAEP,AAAO,AAEP,AAAO,AACP,AAAO,AACP,AAAO,AAEP,AAAO;;ACrYP;;;;;;;;;AASA,AAAe,SAASE,UAAT,CAAiBC,CAAjB,EAAoB;MAC7BC,aAAa,KAAjB;IACE,IAAF,EAAQC,IAAR,CAAa,UAACC,KAAD,EAAQC,OAAR,EAAoB;QACzBC,WAAWL,EAAEI,OAAF,CAAjB;QACME,cAAcD,SAASE,IAAT,GAAgBC,GAAhB,CAAoB,CAApB,CAApB;;QAEIF,eAAeA,YAAYG,OAAZ,CAAoBC,WAApB,OAAsC,IAAzD,EAA+D;mBAChD,IAAb;eACSC,MAAT;KAFF,MAGO,IAAIV,UAAJ,EAAgB;mBACR,KAAb;;mBAEaG,OAAb,EAAsBJ,CAAtB,EAAyB,IAAzB;;GAVJ;;SAcOA,CAAP;;;ACzBF;;;;;;;;;;;AAWA,AAAe,SAASY,YAAT,CAAsBC,IAAtB,EAA4Bb,CAA5B,EAA2C;MAAZc,EAAY,uEAAP,KAAO;;MAClDC,QAAQf,EAAEa,IAAF,CAAd;;MAEIC,EAAJ,EAAQ;QACFE,UAAUH,KAAKI,WAAnB;QACMC,IAAIlB,EAAE,SAAF,CAAV;;;;WAIOgB,WAAW,EAAEA,QAAQP,OAAR,IAAmBf,oBAAoByB,IAApB,CAAyBH,QAAQP,OAAjC,CAArB,CAAlB,EAAmF;UAC3EQ,cAAcD,QAAQC,WAA5B;QACED,OAAF,EAAWI,QAAX,CAAoBF,CAApB;gBACUD,WAAV;;;UAGII,WAAN,CAAkBH,CAAlB;UACMP,MAAN;WACOX,CAAP;;;SAGKA,CAAP;;;AC7BF,SAASsB,WAAT,CAAqBtB,CAArB,EAAwB;IACpB,KAAF,EAASE,IAAT,CAAc,UAACC,KAAD,EAAQoB,GAAR,EAAgB;QACtBC,OAAOxB,EAAEuB,GAAF,CAAb;QACME,cAAcD,KAAKE,QAAL,CAAcnC,mBAAd,EAAmCoC,MAAnC,KAA8C,CAAlE;;QAEIF,WAAJ,EAAiB;uBACDD,IAAd,EAAoBxB,CAApB,EAAuB,GAAvB;;GALJ;;SASOA,CAAP;;;AAGF,SAAS4B,YAAT,CAAsB5B,CAAtB,EAAyB;IACrB,MAAF,EAAUE,IAAV,CAAe,UAACC,KAAD,EAAQ0B,IAAR,EAAiB;QACxBC,QAAQ9B,EAAE6B,IAAF,CAAd;QACMJ,cAAcK,MAAMC,OAAN,CAAc,QAAd,EAAwBJ,MAAxB,KAAmC,CAAvD;QACIF,WAAJ,EAAiB;uBACDK,KAAd,EAAqB9B,CAArB,EAAwB,GAAxB;;GAJJ;;SAQOA,CAAP;CAGF;;AC3Be,SAASgC,gBAAT,CAAuBjB,KAAvB,EAA8Bf,CAA9B,EAA4C;MAAXf,GAAW,uEAAL,GAAK;;MACnD4B,OAAOE,MAAMP,GAAN,CAAU,CAAV,CAAb;MACI,CAACK,IAAL,EAAW;WACFb,CAAP;;MAEIiC,QAAQC,SAASrB,IAAT,KAAkB,EAAhC;;;MAGMsB,eAAe,iBAAgBF,KAAhB,EACQxD,GADR,CACY;WAAU2D,GAAV,SAAiBH,MAAMG,GAAN,CAAjB;GADZ,EAEQxD,IAFR,CAEa,GAFb,CAArB;MAGIyD,aAAJ;;MAEIrC,EAAEsC,OAAN,EAAe;;;;WAINzB,KAAKJ,OAAL,CAAaC,WAAb,OAA+B,UAA/B,GAA4CK,MAAMwB,IAAN,EAA5C,GAA2DxB,MAAMsB,IAAN,EAAlE;GAJF,MAKO;WACEtB,MAAMyB,QAAN,EAAP;;QAEInB,WAAN,OACMpC,GADN,SACakD,YADb,SAC6BE,IAD7B,UACsCpD,GADtC;SAGOe,CAAP;;;ACxBF,SAASyC,cAAT,CAAwBC,IAAxB,EAA8B1C,CAA9B,EAAiC;MACzB2C,SAASC,SAASF,KAAKG,IAAL,CAAU,QAAV,CAAT,EAA8B,EAA9B,CAAf;MACMC,QAAQF,SAASF,KAAKG,IAAL,CAAU,OAAV,CAAT,EAA6B,EAA7B,KAAoC,EAAlD;;;;;MAKI,CAACF,UAAU,EAAX,IAAiB,EAAjB,IAAuBG,QAAQ,EAAnC,EAAuC;SAChCnC,MAAL;GADF,MAEO,IAAIgC,MAAJ,EAAY;;;;SAIZI,UAAL,CAAgB,QAAhB;;;SAGK/C,CAAP;;;;;AAKF,SAASgD,aAAT,CAAuBN,IAAvB,EAA6B1C,CAA7B,EAAgC;MAC1B9B,UAAUiD,IAAV,CAAeuB,KAAKG,IAAL,CAAU,KAAV,CAAf,CAAJ,EAAsC;SAC/BlC,MAAL;;;SAGKX,CAAP;CAGF;;AC1Be,SAASiD,aAAT,CAAuBC,OAAvB,EAAgClD,CAAhC,EAA8C;MAAXmD,IAAW,uEAAJ,EAAI;;MACvDA,KAAKxB,MAAL,KAAgB,CAApB,EAAuB;WACdrD,iBAAP;;;;;IAKA6E,KAAKvE,IAAL,CAAU,GAAV,CAAF,EAAkBsE,OAAlB,EAA2BE,GAA3B,OAAmChF,UAAnC,EAAiDuC,MAAjD;;;UAGMvC,UAAN,EAAoB8E,OAApB,EAA6BG,WAA7B,CAAyCjF,UAAzC;;SAEO4B,CAAP;;;ACVF,SAASsD,qBAAT,CAA+BC,QAA/B,EAAyC;WAC9BC,IAAT,CAAc,GAAd,EAAmBtD,IAAnB,CAAwB,UAACC,KAAD,EAAQU,IAAR,EAAiB;QACjCoB,QAAQC,SAASrB,IAAT,CAAd;;aAESA,IAAT,EAAe,iBAAgBoB,KAAhB,EAAuBwB,MAAvB,CAA8B,UAACC,GAAD,EAAMb,IAAN,EAAe;UACtD/D,mBAAmBqC,IAAnB,CAAwB0B,IAAxB,CAAJ,EAAmC;4BACrBa,GAAZ,sBAAkBb,IAAlB,EAAyBZ,MAAMY,IAAN,CAAzB;;;aAGKa,GAAP;KALa,EAMZ,EANY,CAAf;GAHF;;SAYOH,QAAP;CAGF;;ACvBA;;;;;;AAMA,AAAO,IAAMlE,kCAAgC,CAC3C,UAD2C,EAE3C,OAF2C,EAG3C,QAH2C,EAI3C,SAJ2C,EAK3C,SAL2C,EAM3C,KAN2C,EAO3C,gBAP2C,EAQ3C,OAR2C,EAS3C,SAT2C,EAU3C,cAV2C,EAW3C,QAX2C,EAY3C,iBAZ2C,EAa3C,OAb2C,EAc3C,MAd2C,EAe3C,MAf2C,EAgB3C,QAhB2C,EAiB3C,QAjB2C,EAkB3C,QAlB2C,EAmB3C,OAnB2C;AAoB3C,MApB2C,EAqB3C,MArB2C,EAsB3C,KAtB2C,EAuB3C,OAvB2C,EAwB3C,YAxB2C,EAyB3C,UAzB2C;AA0B3C,2BA1B2C;AA2B3C,OA3B2C,EA4B3C,eA5B2C,EA6B3C,SA7B2C,EA8B3C,QA9B2C,EA+B3C,QA/B2C,EAgC3C,KAhC2C,EAiC3C,OAjC2C,EAkC3C,UAlC2C,EAmC3C,SAnC2C,EAoC3C,UApC2C,EAqC3C,SArC2C,EAsC3C,OAtC2C,CAAtC;;;;;;;;;;;;;AAoDP,AAAO,IAAMC,kCAAgC,CAC3C,KAD2C,EAE3C,SAF2C,EAG3C,MAH2C,EAI3C,WAJ2C,EAK3C,QAL2C,EAM3C,SAN2C,EAO3C,qBAP2C,EAQ3C,QAR2C;AAS3C,OAT2C,EAU3C,QAV2C,EAW3C,OAX2C,EAY3C,MAZ2C,EAa3C,MAb2C,EAc3C,OAd2C,EAe3C,QAf2C,CAAtC;;;;;AAqBP,AAAO,IAAMC,wBAAsB,CACjC,GADiC,EAEjC,YAFiC,EAGjC,IAHiC,EAIjC,KAJiC,EAKjC,KALiC,EAMjC,GANiC,EAOjC,KAPiC,EAQjC,OARiC,EASjCX,IATiC,CAS5B,GAT4B,CAA5B;;;;AAaP,AAAO,IAAM+E,2BAAyB,CACpC,IADoC,EAEpC,GAFoC,EAGpC,GAHoC,EAIpC,OAJoC,EAKpC,IALoC,EAMpC,MANoC,EAOpC,MAPoC,EAQpC,UARoC,EASpC,OAToC,EAUpC,KAVoC,EAWpC,MAXoC,EAYpC,MAZoC,CAA/B;;AAeP,AAAO,IAAMC,8BACX,IAAIzF,MAAJ,QAAgBwF,yBAAuB/E,IAAvB,CAA4B,GAA5B,CAAhB,SAAsD,GAAtD,CADK;;;;;AAMP,AAAO,IAAMiF,4BAA0B,CACrC,CAAC,SAAD,EAAY,gBAAZ,CADqC,EAErC,CAAC,OAAD,EAAU,gBAAV,CAFqC,EAGrC,CAAC,QAAD,EAAW,gBAAX,CAHqC,EAIrC,CAAC,OAAD,EAAU,WAAV,CAJqC,EAKrC,CAAC,OAAD,EAAU,YAAV,CALqC,EAMrC,CAAC,OAAD,EAAU,YAAV,CANqC,CAAhC;;AASP,AAAO,IAAMC,gBAAc,CACzB,QADyB,EAEzB,OAFyB,EAGzB,OAHyB,EAIzB,SAJyB,CAApB;AAMP,AAAO,IAAMC,mBAAiB,IAAI5F,MAAJ,CAAW2F,cAAYlF,IAAZ,CAAiB,GAAjB,CAAX,EAAkC,GAAlC,CAAvB;;;;;;AAMP,AAAO,IAAMoF,yBAAuB,CAClC,SADkC,EAElC,gBAFkC,EAGlC,iBAHkC,EAIlC,MAJkC,EAKlC,MALkC,EAMlC,SANkC,EAOlC,qBAPkC,EAQlC,OARkC,EASlC,QATkC,EAUlC,MAVkC,EAWlC,QAXkC,EAYlC,MAZkC,EAalC,YAbkC,EAclC,WAdkC,EAelC,MAfkC,EAgBlC,OAhBkC,EAiBlC,MAjBkC,EAkBlC,UAlBkC;AAmBlC,SAnBkC,CAA7B;;;AAuBP,AAAO,IAAMC,sBAAoB,IAAI9F,MAAJ,CAAW6F,uBAAqBpF,IAArB,CAA0B,GAA1B,CAAX,EAA2C,GAA3C,CAA1B;;;AAGP,AAAO,IAAMsF,sBAAoB,IAAI/F,MAAJ,CAAW,qBAAX,EAAkC,GAAlC,CAA1B;;;;;;AAMP,AAAO,IAAMgG,yBAAuB,CAClC,OADkC,EAElC,QAFkC,EAGlC,QAHkC,EAIlC,KAJkC,EAKlC,UALkC,EAMlC,QANkC,EAOlC,QAPkC,EAQlC,OARkC,EASlC,MATkC,EAUlC,OAVkC,EAWlC,SAXkC,EAYlC,YAZkC,EAalC,SAbkC,EAclC,MAdkC,EAelC,QAfkC,EAgBlC,OAhBkC,EAiBlC,MAjBkC,EAkBlC,MAlBkC,EAmBlC,SAnBkC,EAoBlC,UApBkC;AAqBlC,MArBkC,EAsBlC,QAtBkC,EAuBlC,UAvBkC,EAwBlC,MAxBkC,EAyBlC,MAzBkC,EA0BlC,MA1BkC,EA2BlC,UA3BkC;AA4BlC,mBA5BkC,EA6BlC,MA7BkC,EA8BlC,WA9BkC,EA+BlC,MA/BkC,EAgClC,UAhCkC,EAiClC,OAjCkC,EAkClC,MAlCkC,EAmClC,OAnCkC,EAoClC,UApCkC;AAqClC,OArCkC,EAsClC,KAtCkC;AAuClC,SAvCkC,EAwClC,SAxCkC,EAyClC,cAzCkC;AA0ClC,QA1CkC,EA2ClC,WA3CkC,EA4ClC,OA5CkC,EA6ClC,UA7CkC,EA8ClC,UA9CkC,EA+ClC,MA/CkC,EAgDlC,SAhDkC,EAiDlC,SAjDkC,EAkDlC,OAlDkC,EAmDlC,KAnDkC,EAoDlC,SApDkC,EAqDlC,MArDkC,EAsDlC,OAtDkC,EAuDlC,QAvDkC,CAA7B;;AA0DP,AAAO,IAAMC,sBAAoB,IAAIjG,MAAJ,CAAWgG,uBAAqBvF,IAArB,CAA0B,GAA1B,CAAX,EAA2C,GAA3C,CAA1B;;;AAGP,AAAO,AAAMyF;;;AAGb,AAAO,AAAMC;;;AAGb,AAAO,AAAMC;;;;AAIb,AAAO,AAAM9E;AAiDb,AAAO,AAAMC,AAAsCD;;;;;;AAMnD,IAAME,wBAAsBN,gCAA8BT,IAA9B,CAAmC,GAAnC,CAA5B;AACA,AAAO,AAAMgB,AAAkCD,AAAX;;AAEpC,IAAME,wBAAsBP,gCAA8BV,IAA9B,CAAmC,GAAnC,CAA5B;AACA,AAAO,AAAMkB,AAAkCD,AAAX;;AAEpC,AAAO,AAAM2E,AAA8B3E,AAAhB,AAAyCF,AAAzC;;AAE3B,AAAO,IAAM8E,yBAAuB,IAAItG,MAAJ,CAAW,mBAAX,EAAgC,GAAhC,CAA7B;AACP,AAAO,IAAMuG,uBAAqB,IAAIvG,MAAJ,CAAW,4BAAX,EAAyC,GAAzC,CAA3B;AACP,AAAO,IAAMwG,aAAW,IAAIxG,MAAJ,CAAW,kBAAX,EAA+B,GAA/B,CAAjB,CAEP,AAAO,AAAMyG;;ACzSb;AACA,AAAe,SAASC,SAAT,CAAmBhE,IAAnB,EAAyB;MAChCiE,UAAUjE,KAAKgC,IAAL,CAAU,OAAV,CAAhB;MACMkC,KAAKlE,KAAKgC,IAAL,CAAU,IAAV,CAAX;MACImC,QAAQ,CAAZ;;MAEID,EAAJ,EAAQ;;QAEFd,oBAAkB9C,IAAlB,CAAuB4D,EAAvB,CAAJ,EAAgC;eACrB,EAAT;;QAEEX,oBAAkBjD,IAAlB,CAAuB4D,EAAvB,CAAJ,EAAgC;eACrB,EAAT;;;;MAIAD,OAAJ,EAAa;QACPE,UAAU,CAAd,EAAiB;;;UAGXf,oBAAkB9C,IAAlB,CAAuB2D,OAAvB,CAAJ,EAAqC;iBAC1B,EAAT;;UAEEV,oBAAkBjD,IAAlB,CAAuB2D,OAAvB,CAAJ,EAAqC;iBAC1B,EAAT;;;;;;;QAOAf,iBAAe5C,IAAf,CAAoB2D,OAApB,CAAJ,EAAkC;eACvB,EAAT;;;;;;;QAOEZ,oBAAkB/C,IAAlB,CAAuB2D,OAAvB,CAAJ,EAAqC;eAC1B,EAAT;;;;SAIGE,KAAP;;;ACnDF;;;AAGA,AAAe,SAASC,QAAT,CAAkBlE,KAAlB,EAAyB;;SAE/BmE,WAAWnE,MAAM8B,IAAN,CAAW,OAAX,CAAX,KAAmC,IAA1C;;;ACLF;AACA,AAAe,SAASsC,WAAT,CAAqB5C,IAArB,EAA2B;SACjC,CAACA,KAAK6C,KAAL,CAAW,IAAX,KAAoB,EAArB,EAAyBzD,MAAhC;;;ACFF,IAAM0D,QAAQ,IAAIlH,MAAJ,CAAW,WAAX,EAAwB,GAAxB,CAAd;;AAEA,AAAe,SAASmH,WAAT,CAAqBC,UAArB,EAAgD;MAAf9E,OAAe,uEAAL,GAAK;;MACvD+E,SAASD,aAAa,EAA5B;;MAEIC,SAAS,CAAb,EAAgB;QACVC,oBAAJ;;;;;;;QAOIJ,MAAMlE,IAAN,CAAWV,OAAX,CAAJ,EAAyB;oBACT+E,SAAS,CAAvB;KADF,MAEO;oBACSA,SAAS,IAAvB;;;WAGKE,KAAKC,GAAL,CAASD,KAAKE,GAAL,CAASH,WAAT,EAAsB,CAAtB,CAAT,EAAmC,CAAnC,CAAP;;;SAGK,CAAP;;;ACjBF;;AAEA,AAAe,SAASI,iBAAT,CAAwBhF,IAAxB,EAA8B;MACvCmE,QAAQ,CAAZ;MACMzC,OAAO1B,KAAK0B,IAAL,GAAYuD,IAAZ,EAAb;MACMP,aAAahD,KAAKZ,MAAxB;;;MAGI4D,aAAa,EAAjB,EAAqB;WACZ,CAAP;;;;WAIOJ,YAAY5C,IAAZ,CAAT;;;;WAIS+C,YAAYC,UAAZ,CAAT;;;;;;MAMIhD,KAAKwD,KAAL,CAAW,CAAC,CAAZ,MAAmB,GAAvB,EAA4B;aACjB,CAAT;;;SAGKf,KAAP;;;AChCa,SAASgB,QAAT,CAAkBjF,KAAlB,EAAyBf,CAAzB,EAA4BgF,KAA5B,EAAmC;QAC1CnC,IAAN,CAAW,OAAX,EAAoBmC,KAApB;SACOjE,KAAP;;;ACGa,SAASkF,WAAT,CAAkBlF,KAAlB,EAAyBf,CAAzB,EAA4BkG,MAA5B,EAAoC;MAC7C;QACIlB,QAAQmB,kBAAepF,KAAf,EAAsBf,CAAtB,IAA2BkG,MAAzC;aACSnF,KAAT,EAAgBf,CAAhB,EAAmBgF,KAAnB;GAFF,CAGE,OAAOoB,CAAP,EAAU;;;;SAILrF,KAAP;;;ACXF;AACA,AAAe,SAASsF,cAAT,CAAqBxF,IAArB,EAA2Bb,CAA3B,EAA8BgF,KAA9B,EAAqC;MAC5CsB,SAASzF,KAAKyF,MAAL,EAAf;MACIA,MAAJ,EAAY;gBACDA,MAAT,EAAiBtG,CAAjB,EAAoBgF,QAAQ,IAA5B;;;SAGKnE,IAAP;;;ACFF;;;AAGA,AAAe,SAASsF,iBAAT,CAAwBpF,KAAxB,EAA+Bf,CAA/B,EAAsD;MAApBuG,WAAoB,uEAAN,IAAM;;MAC/DvB,QAAQC,SAASlE,KAAT,CAAZ;;MAEIiE,KAAJ,EAAW;WACFA,KAAP;;;UAGMwB,aAAUzF,KAAV,CAAR;;MAEIwF,WAAJ,EAAiB;aACN1B,UAAU9D,KAAV,CAAT;;;iBAGUA,KAAZ,EAAmBf,CAAnB,EAAsBgF,KAAtB;;SAEOA,KAAP;;;AClBF;;AAEA,AAAe,SAASwB,YAAT,CAAmBzF,KAAnB,EAA0B;mBACnBA,MAAMP,GAAN,CAAU,CAAV,CADmB;MAC/BC,OAD+B,cAC/BA,OAD+B;;;;;;;MAMnCgE,uBAAqBtD,IAArB,CAA0BV,OAA1B,CAAJ,EAAwC;WAC/BoF,kBAAe9E,KAAf,CAAP;GADF,MAEO,IAAIN,QAAQC,WAAR,OAA0B,KAA9B,EAAqC;WACnC,CAAP;GADK,MAEA,IAAIgE,qBAAmBvD,IAAnB,CAAwBV,OAAxB,CAAJ,EAAsC;WACpC,CAAP;GADK,MAEA,IAAIkE,WAASxD,IAAT,CAAcV,OAAd,CAAJ,EAA4B;WAC1B,CAAC,CAAR;GADK,MAEA,IAAIA,QAAQC,WAAR,OAA0B,IAA9B,EAAoC;WAClC,CAAC,CAAR;;;SAGK,CAAP;;;ACjBF,SAASkB,cAAT,CAAsBb,KAAtB,EAA6Bf,CAA7B,EAAgC;MAC1Be,MAAMP,GAAN,CAAU,CAAV,CAAJ,EAAkB;qBACIO,MAAMP,GAAN,CAAU,CAAV,CADJ;QACRC,OADQ,cACRA,OADQ;;QAGZA,YAAY,MAAhB,EAAwB;;uBAERM,KAAd,EAAqBf,CAArB,EAAwB,KAAxB;;;;;AAKN,SAASyG,UAAT,CAAoB1F,KAApB,EAA2Bf,CAA3B,EAA8BgF,KAA9B,EAAqC;MAC/BjE,KAAJ,EAAW;mBACIA,KAAb,EAAoBf,CAApB;gBACSe,KAAT,EAAgBf,CAAhB,EAAmBgF,KAAnB;;;;AAIJ,SAAS0B,OAAT,CAAiB1G,CAAjB,EAAoBuG,WAApB,EAAiC;IAC7B,QAAF,EAAYnD,GAAZ,CAAgB,SAAhB,EAA2BlD,IAA3B,CAAgC,UAACC,KAAD,EAAQU,IAAR,EAAiB;;;QAG3CE,QAAQf,EAAEa,IAAF,CAAZ;YACQmF,SAASjF,KAAT,EAAgBf,CAAhB,EAAmBmG,kBAAepF,KAAf,EAAsBf,CAAtB,EAAyBuG,WAAzB,CAAnB,CAAR;;QAEMI,UAAU5F,MAAMuF,MAAN,EAAhB;QACMM,WAAWJ,aAAUzF,KAAV,CAAjB;;eAEW4F,OAAX,EAAoB3G,CAApB,EAAuB4G,QAAvB,EAAiCL,WAAjC;QACII,OAAJ,EAAa;;;iBAGAA,QAAQL,MAAR,EAAX,EAA6BtG,CAA7B,EAAgC4G,WAAW,CAA3C,EAA8CL,WAA9C;;GAbJ;;SAiBOvG,CAAP;CAGF;;ACjDA,IAAM6G,eAAe,SAArB;;AAEA,AAAe,SAASC,eAAT,CAAyBvE,IAAzB,EAA+B;SACrCA,KAAKwE,OAAL,CAAaF,YAAb,EAA2B,GAA3B,EAAgCf,IAAhC,EAAP;;;ACHF;;;;0CAKA;;ACLA;;;;;;;;;;;;;;;;AAgBA,AAAO,IAAMkB,kBAAkB,IAAI7I,MAAJ,CAAW,0EAAX,EAAuF,GAAvF,CAAxB;;AAEP,AAAO,IAAM8I,eAAe,QAArB;;AAEP,AAAO,IAAMC,cAAc,WAApB;AACP,AAAO,IAAMC,cAAc,WAApB;;ACZP,SAASC,aAAT,CAAuBC,OAAvB,EAAgClH,KAAhC,EAAuCmH,sBAAvC,EAA+D;MACzDC,cAAc,IAAlB;;;;MAIIpH,QAAQ,CAAR,IAAagH,YAAYhG,IAAZ,CAAiBkG,OAAjB,CAAb,IAA0CA,QAAQ1F,MAAR,GAAiB,CAA/D,EAAkE;kBAClD,IAAd;;;;;MAKExB,UAAU,CAAV,IAAekH,QAAQ3G,WAAR,OAA0B,OAA7C,EAAsD;kBACtC,KAAd;;;;;MAKEP,QAAQ,CAAR,IAAakH,QAAQ1F,MAAR,GAAiB,CAA9B,IAAmC,CAAC2F,sBAAxC,EAAgE;kBAChD,KAAd;;;SAGKC,WAAP;CAGF;;ACjCA;;AAEA,IAAMC,kBAAkB,IAAIrJ,MAAJ,CAAW,QAAX,CAAxB;AACA,AAAe,SAASsJ,cAAT,CAAwBlF,IAAxB,EAA8B;SACpCiF,gBAAgBrG,IAAhB,CAAqBoB,IAArB,CAAP;;;ACKF;;;;;AAKA,AAAe,SAASmF,aAAT,CAAuBC,UAAvB,EAAmCC,QAAnC,EAA6C5H,CAA7C,EAAgD;MACzD,CAAC2H,WAAWrB,MAAX,GAAoB3E,MAAzB,EAAiC;WACxBgG,UAAP;;;MAGIE,wBAAwBnC,KAAKE,GAAL,CAAS,EAAT,EAAagC,WAAW,IAAxB,CAA9B;MACME,cAAc9H,EAAE,aAAF,CAApB;;aAEWsG,MAAX,GAAoB5E,QAApB,GAA+BxB,IAA/B,CAAoC,UAACC,KAAD,EAAQa,OAAR,EAAoB;QAChD+G,WAAW/H,EAAEgB,OAAF,CAAjB;;QAEI4C,4BAA0BzC,IAA1B,CAA+BH,QAAQP,OAAvC,CAAJ,EAAqD;aAC5C,IAAP;;;QAGIuH,eAAe/C,SAAS8C,QAAT,CAArB;QACIC,YAAJ,EAAkB;UACZD,SAASvH,GAAT,CAAa,CAAb,MAAoBmH,WAAWnH,GAAX,CAAe,CAAf,CAAxB,EAA2C;oBAC7ByH,MAAZ,CAAmBF,QAAnB;OADF,MAEO;YACDG,eAAe,CAAnB;YACMC,UAAUC,YAAYL,QAAZ,CAAhB;;;;YAIII,UAAU,IAAd,EAAoB;0BACF,EAAhB;;;;;YAKEA,WAAW,GAAf,EAAoB;0BACF,EAAhB;;;;;YAKEJ,SAASlF,IAAT,CAAc,OAAd,MAA2B8E,WAAW9E,IAAX,CAAgB,OAAhB,CAA/B,EAAyD;0BACvC+E,WAAW,GAA3B;;;YAGIS,WAAWL,eAAeE,YAAhC;;YAEIG,YAAYR,qBAAhB,EAAuC;iBAC9BC,YAAYG,MAAZ,CAAmBF,QAAnB,CAAP;SADF,MAEO,IAAI/G,QAAQP,OAAR,KAAoB,GAAxB,EAA6B;cAC5B6H,iBAAiBP,SAASxF,IAAT,EAAvB;cACMgG,uBAAuBhD,WAAW+C,cAAX,CAA7B;;cAEIC,uBAAuB,EAAvB,IAA6BJ,UAAU,IAA3C,EAAiD;mBACxCL,YAAYG,MAAZ,CAAmBF,QAAnB,CAAP;WADF,MAEO,IAAIQ,wBAAwB,EAAxB,IAA8BJ,YAAY,CAA1C,IACDV,eAAea,cAAf,CADH,EACmC;mBACjCR,YAAYG,MAAZ,CAAmBF,QAAnB,CAAP;;;;;;WAMD,IAAP;GAnDF;;MAsDID,YAAYpG,QAAZ,GAAuBC,MAAvB,KAAkC,CAAlC,IACFmG,YAAYpG,QAAZ,GAAuB8G,KAAvB,GAA+BhI,GAA/B,CAAmC,CAAnC,MAA0CmH,WAAWnH,GAAX,CAAe,CAAf,CAD5C,EAC+D;WACtDmH,UAAP;;;SAGKG,WAAP;;;ACjFF,UACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA;;ACDA,SAASW,mBAAT,CAA6B1H,KAA7B,EAAoCf,CAApC,EAAuC0I,MAAvC,EAA+C;;;;;MAKzC3H,MAAM4H,QAAN,CAAe,qBAAf,CAAJ,EAA2C;;;;MAIrCC,UAAU9B,gBAAgB/F,MAAMwB,IAAN,EAAhB,CAAhB;;MAEI4C,YAAYyD,OAAZ,IAAuB,EAA3B,EAA+B;QACvBC,SAAS7I,EAAE,GAAF,EAAOe,KAAP,EAAcY,MAA7B;QACMmH,aAAa9I,EAAE,OAAF,EAAWe,KAAX,EAAkBY,MAArC;;;QAGImH,aAAcD,SAAS,CAA3B,EAA+B;YACvBlI,MAAN;;;;QAIIoI,gBAAgBH,QAAQjH,MAA9B;QACMqH,WAAWhJ,EAAE,KAAF,EAASe,KAAT,EAAgBY,MAAjC;;;;QAIIoH,gBAAgB,EAAhB,IAAsBC,aAAa,CAAvC,EAA0C;YAClCrI,MAAN;;;;QAIIwH,UAAUC,YAAYrH,KAAZ,CAAhB;;;;;QAKI2H,SAAS,EAAT,IAAeP,UAAU,GAAzB,IAAgCY,gBAAgB,EAApD,EAAwD;YAChDpI,MAAN;;;;;;QAME+H,UAAU,EAAV,IAAgBP,UAAU,GAA9B,EAAmC;;;;UAI3B1H,UAAUM,MAAMP,GAAN,CAAU,CAAV,EAAaC,OAAb,CAAqBC,WAArB,EAAhB;UACMuI,aAAaxI,YAAY,IAAZ,IAAoBA,YAAY,IAAnD;UACIwI,UAAJ,EAAgB;YACRC,eAAenI,MAAMoI,IAAN,EAArB;YACID,gBAAgBpC,gBAAgBoC,aAAa3G,IAAb,EAAhB,EAAqCwD,KAArC,CAA2C,CAAC,CAA5C,MAAmD,GAAvE,EAA4E;;;;;YAKxEpF,MAAN;;;;QAIIyI,cAAcpJ,EAAE,QAAF,EAAYe,KAAZ,EAAmBY,MAAvC;;;QAGIyH,cAAc,CAAd,IAAmBL,gBAAgB,GAAvC,EAA4C;YACpCpI,MAAN;;;;CAMN;;ACjFA;AACA,AAOA,SAAS0I,UAAT,CAAoBrJ,CAApB,EAAuBsJ,OAAvB,EAAgCzG,IAAhC,EAAsC0G,QAAtC,EAAgD;UACxC1G,IAAN,QAAe0G,QAAf,EAAyBrJ,IAAzB,CAA8B,UAACsJ,CAAD,EAAI3I,IAAJ,EAAa;QACnCoB,QAAQC,SAASrB,IAAT,CAAd;QACM4I,MAAMxH,MAAMY,IAAN,CAAZ;;QAEI4G,GAAJ,EAAS;UACDC,cAAcC,IAAIC,OAAJ,CAAYN,OAAZ,EAAqBG,GAArB,CAApB;cACQ5I,IAAR,EAAcgC,IAAd,EAAoB6G,WAApB;;GANJ;;;AAWF,AAAe,SAASG,oBAAT,CAA2BN,QAA3B,EAAqCvJ,CAArC,EAAwCyJ,GAAxC,EAA6C;GACzD,MAAD,EAAS,KAAT,EAAgBK,OAAhB,CAAwB;WAAQT,WAAWrJ,CAAX,EAAcyJ,GAAd,EAAmB5G,IAAnB,EAAyB0G,QAAzB,CAAR;GAAxB;;SAEOA,QAAP;;;ACvBK,SAAShE,UAAT,CAAoBhD,IAApB,EAA0B;SACxBA,KAAKuD,IAAL,GACKiB,OADL,CACa,MADb,EACqB,GADrB,EAEKpF,MAFZ;;;;;;AAQF,AAAO,SAASyG,WAAT,CAAqBrH,KAArB,EAA4B;MAC3BgJ,kBAAkBxE,WAAWxE,MAAMwB,IAAN,EAAX,CAAxB;;MAEMyH,WAAWjJ,MAAMyC,IAAN,CAAW,GAAX,EAAgBjB,IAAhB,EAAjB;MACM0H,aAAa1E,WAAWyE,QAAX,CAAnB;;MAEID,kBAAkB,CAAtB,EAAyB;WAChBE,aAAaF,eAApB;GADF,MAEO,IAAIA,oBAAoB,CAApB,IAAyBE,aAAa,CAA1C,EAA6C;WAC3C,CAAP;;;SAGK,CAAP;;;ACnBF,SAASC,UAAT,CAAoBnJ,KAApB,EAA2BoJ,WAA3B,EAAwC;;;MAGlCpJ,MAAMW,QAAN,GAAiBC,MAAjB,GAA0BwI,WAA9B,EAA2C;WAClC,KAAP;;;MAGEC,iBAAcrJ,KAAd,CAAJ,EAA0B;WACjB,KAAP;;;SAGK,IAAP;CAGF;;AChBA;AACA,AAAe,SAASsJ,SAAT,CAAmB9H,IAAnB,EAAyBvC,CAAzB,EAA4B;;;MAGnCsK,YAAYtK,aAAWuC,IAAX,cAA0BA,IAA1B,EAAlB;SACO+H,cAAc,EAAd,GAAmB/H,IAAnB,GAA0B+H,SAAjC;;;ACHa,SAASF,gBAAT,CAAuBrJ,KAAvB,EAA8B;MACrCgB,UAAUhB,MAAMgB,OAAN,GAAgBwI,OAAhB,EAAhB;MACMC,gBAAgBzI,QAAQyB,IAAR,CAAa,UAAC8C,MAAD,EAAY;QACvCrE,QAAQC,SAASoE,MAAT,CAAd;QACemE,SAF8B,GAEZxI,KAFY,CAErCyI,KAFqC;QAEnB3F,EAFmB,GAEZ9C,KAFY,CAEnB8C,EAFmB;;QAGvC4F,aAAgBF,SAAhB,SAA6B1F,EAAnC;WACO4F,WAAWC,QAAX,CAAoB,SAApB,CAAP;GAJoB,CAAtB;;SAOOJ,kBAAkBK,SAAzB;;;ACXF;;kBAIA;;ACJe,SAAS3I,QAAT,CAAkBrB,IAAlB,EAAwB;MAC7BiK,OAD6B,GACLjK,IADK,CAC7BiK,OAD6B;MACpBC,UADoB,GACLlK,IADK,CACpBkK,UADoB;;;MAGjC,CAACD,OAAD,IAAYC,UAAhB,EAA4B;QACpB9I,QAAQ,iBAAgB8I,UAAhB,EAA4BtH,MAA5B,CAAmC,UAACC,GAAD,EAAMvD,KAAN,EAAgB;UACzD0C,OAAOkI,WAAW5K,KAAX,CAAb;;UAEI,CAAC0C,KAAKmI,IAAN,IAAc,CAACnI,KAAKoI,KAAxB,EAA+B,OAAOvH,GAAP;;UAE3Bb,KAAKmI,IAAT,IAAiBnI,KAAKoI,KAAtB;aACOvH,GAAP;KANY,EAOX,EAPW,CAAd;WAQOzB,KAAP;;;SAGK6I,OAAP;;;ACfa,SAASI,OAAT,CAAiBrK,IAAjB,EAAuBgC,IAAvB,EAA6BsI,GAA7B,EAAkC;MAC3CtK,KAAKiK,OAAT,EAAkB;SACXA,OAAL,CAAajI,IAAb,IAAqBsI,GAArB;GADF,MAEO,IAAItK,KAAKkK,UAAT,EAAqB;SACrBK,YAAL,CAAkBvI,IAAlB,EAAwBsI,GAAxB;;;SAGKtK,IAAP;;;ACPF;AACA,AAAe,SAASwK,QAAT,CAAkBxK,IAAlB,EAAwBoB,KAAxB,EAA+B;MACxCpB,KAAKiK,OAAT,EAAkB;SACXA,OAAL,GAAe7I,KAAf;GADF,MAEO,IAAIpB,KAAKkK,UAAT,EAAqB;WACpBlK,KAAKkK,UAAL,CAAgBpJ,MAAhB,GAAyB,CAA/B;WACO2J,eAAL,CAAqBzK,KAAKkK,UAAL,CAAgB,CAAhB,EAAmBC,IAAxC;KAEF,iBAAgB/I,KAAhB,EAAuB6H,OAAvB,CAA+B,eAAO;WAC/BsB,YAAL,CAAkBhJ,GAAlB,EAAuBH,MAAMG,GAAN,CAAvB;KADF;;;SAKKvB,IAAP;;;ACbF,mBACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA,AACA;;ACvBA,0BAAA,CAA0B0K,EAA1B,CAA8B,CAAE,WAAe,UAAA,mCAAOA,EAAP,KAAc,QAArB,EAAkC,cAAnC,CAAsDA,GAAG,SAAH,CAAtD,CAAsEA,EAA7E,CAAkF,CAElH,wBAA0BC,kBAAgBC,WAAhB,CAA1B,CACA,eAAeD,kBAAgBE,QAAhB,CAAf,CACA,sBAAwBF,kBAAgBG,gBAAhB,CAAxB,CACA,UAAUH,kBAAgBI,GAAhB,CAAV,CACA,cAAcJ,kBAAgBK,OAAhB,CAAd,CACA,aAAeL,kBAAgBM,OAAhB,CAAf,CACA,cAAcN,kBAAgBO,OAAhB,CAAd,CACA,uBAAuBP,kBAAgBQ,gBAAhB,CAAvB,CACA,yBAAyBR,kBAAgBS,kBAAhB,CAAzB,CACA,sBAAsBT,kBAAgBU,eAAhB,CAAtB,CACA,qBAAqBV,kBAAgBW,cAAhB,CAArB,CACA,cAAcX,kBAAgBY,OAAhB,CAAd,CACA,mBAAmBZ,kBAAgBa,YAAhB,CAAnB,CACA,iBAAmBb,kBAAgBc,IAAhB,CAAnB,CACA,sBAAsBd,kBAAgBe,eAAhB,CAAtB,CACA,eAAef,kBAAgBgB,QAAhB,CAAf,CACA,aAAahB,kBAAgBiB,MAAhB,CAAb,CACA,YAAYjB,kBAAgBkB,KAAhB,CAAZ,CACA,cAAclB,kBAAgBmB,OAAhB,CAAd,CACA,gBAAkBnB,kBAAgBoB,IAAhB,CAAlB,CACA,gBAAgBpB,kBAAgBqB,SAAhB,CAAhB,CAEA,YAAc,CAACC,KAAD,EAAQrO,GAAR,CAAYsO,oBAAoBC,IAAhC,CAAd,CAEA,cAAA,EAAiB,CACf,UAAYC,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,CAAhF,CACA,QAAUA,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,CAA9E,CACA,2BAA2BC,IAApB,CAAyB,eAAA,CAAgBC,QAAhB,CAA0B,CACxD,MAAO,CAAP,CAAU,CACR,OAAQA,SAAShE,IAAT,CAAgBgE,SAAS5M,IAAjC,EACE,MAAA,CACE,GAAI,EAAE6M,OAASC,GAAX,CAAJ,CAAqB,CACnBF,SAAS5M,IAAT,CAAgB,CAAhB,CACA,MACD,CAED4M,SAAS5M,IAAT,CAAgB,CAAhB,CACA,cAAgB,CAAhB,CAEF,MAAA,CACE4M,SAAS5M,IAAT,CAAgB,CAAhB,CACA,MAEF,MAAA,CACA,IAAK,KAAL,CACE,gBAAgB+M,IAAT,EAAP,CAhBJ,CAkBD,CACF,CArBM,CAqBJC,QAAQ,CAAR,CArBI,CAqBQ,IArBR,CAAP,CAsBD;AAGD,oBAAA,CAAqBC,IAArB,CAA2B,CACzB,aAAeA,KAAKC,QAApB;AAGA,MAAO,CAAC,CAACA,QAAT,CACD,CAED,WAAa,CACXC,OAAQ,CACNC,MAAO,IADD,CAENC,SAAU,gGAFJ,CADG,CAAb,CAOA,oBAAsB,CACpB,aAAc,6CADM,CAAtB;AAKA,kBAAoB,KAApB;AAGA,sBAAwB,CAAC,YAAD,CAAe,WAAf,CAA4B,YAA5B,CAA0C,WAA1C,CAAxB,CAEA,yBAA2B,UAAA,CAAW,KAAOC,kBAAkBjP,IAAlB,CAAuB,GAAvB,CAAP,CAAqC,IAAhD,CAAsD,GAAtD,CAA3B;;AAIA,uBAAyB,OAAzB;;;AAMA,YAAA,CAAakP,OAAb,CAAsB;AAEpB,mBAAO,CAAa,SAAUlE,OAAV,CAAmBmE,MAAnB,CAA2B,CAC7CC,UAAQF,OAAR,CAAiB,SAAUG,GAAV,CAAeC,QAAf,CAAyBC,IAAzB,CAA+B,CAC9C,GAAIF,GAAJ,CAAS,CACPF,OAAOE,GAAP,EACD,CAFD,IAEO,CACLrE,QAAQ,CAAEuE,KAAMA,IAAR,CAAcD,SAAUA,QAAxB,CAAR,EACD,CACF,CAND,EAOD,CARM,CAAP,CASD;;;;AAOD,yBAAA,CAA0BA,QAA1B,CAAoC,CAClC,gBAAkBjB,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,KAAtF;;;;;;AAQA,GAAIiB,SAASE,aAAT,EAA0BF,SAASE,aAAT,GAA2B,IAArD,EAA6DF,SAASG,UAAT,GAAwB,GAAzF,CAA8F,CAC5F,GAAI,CAACH,SAASG,UAAd,CAA0B,CACxB,eAAM,CAAU,mDAAqDH,SAASP,KAAxE,CAAN,CACD,CAFD,QAEW,CAACW,WAAL,CAAkB,CACvB,eAAM,CAAU,+CAAiDJ,SAASG,UAA1D,CAAuE,oEAAjF,CAAN,CACD,CACF,CAED,sBAAwBH,SAASK,OAAjC,CACIC,YAAcC,kBAAkB,cAAlB,CADlB,CAEI1F,cAAgB0F,kBAAkB,gBAAlB,CAFpB;AAMA,GAAIC,qBAAqBvN,IAArB,CAA0BqN,WAA1B,CAAJ,CAA4C,CAC1C,eAAM,CAAU,sCAAwCA,WAAxC,CAAsD,sBAAhE,CAAN,CACD;AAGD,GAAIzF,cAAgB4F,kBAApB,CAAwC,CACtC,eAAM,CAAU,sEAAwEA,kBAAxE,CAA6F,GAAvG,CAAN,CACD,CAED,WAAA,CACD;;;;;;;AAYD,oBAAuB,UAAY,CACjC,UAAYC,kBAAkB7B,oBAAoBC,IAApB,CAAyB,gBAAA,CAAiBvD,GAAjB,CAAsBoF,SAAtB,CAAiC,CACtF,WAAA,CAAaC,KAAb,CAAoBZ,QAApB,CAA8BC,IAA9B,CAEA,2BAA2BjB,IAApB,CAAyB,iBAAA,CAAkBC,QAAlB,CAA4B,CAC1D,MAAO,CAAP,CAAU,CACR,OAAQA,SAAShE,IAAT,CAAgBgE,SAAS5M,IAAjC,EACE,MAAA,CACEsO,UAAYA,WAAalF,MAAIoF,KAAJ,CAAUC,UAAUvF,GAAV,CAAV,CAAzB,CAEAqE,QAAU,CACRrE,IAAKoF,SADG,CAERN,QAASU,WAAS,EAAT,CAAaC,eAAb,CAFD,CAGRC,QAASC,aAHD;;AAMRC,SAAU,IANF;AAQRC,IAAK,IARG;AAURC,KAAM,IAVE;AAYRC,mBAAoB,IAZZ,CAAV,CAcArC,SAAS5M,IAAT,CAAgB,CAAhB,CACA,WAAWuN,OAAJ,CAAP,CAEF,MAAA,CACEgB,MAAQ3B,SAASsC,IAAjB,CACAvB,SAAWY,MAAMZ,QAAjB,CACAC,KAAOW,MAAMX,IAAb,CACAhB,SAAShE,IAAT,CAAgB,CAAhB,CAEAuG,iBAAiBxB,QAAjB,EACA,gBAAgByB,MAAT,CAAgB,QAAhB,CAA0B,CAC/BxB,KAAMA,IADyB,CAE/BD,SAAUA,QAFqB,CAA1B,CAAP,CAKF,OAAA,CACEf,SAAShE,IAAT,CAAgB,EAAhB,CACAgE,SAASyC,EAAT,CAAczC,SAAS,OAAT,EAAkB,CAAlB,CAAd,CACA,gBAAgBwC,MAAT,CAAgB,QAAhB,CAA0BE,OAAOnC,MAAjC,CAAP,CAEF,OAAA,CACA,IAAK,KAAL,CACE,gBAAgBJ,IAAT,EAAP,CAxCJ,CA0CD,CACF,CA7CM,CA6CJwC,OA7CI,CA6CK,IA7CL,CA6CW,CAAC,CAAC,CAAD,CAAI,EAAJ,CAAD,CA7CX,CAAP,CA8CD,CAjD6B,CAAlB,CAAZ,CAmDA,sBAAA,CAAuBC,GAAvB,CAA4BC,GAA5B,CAAiC,CAC/B,aAAaC,KAAN,CAAY,IAAZ,CAAkBhD,SAAlB,CAAP,CACD,CAED,oBAAA,CACD,CAzDqB,EAAtB,CA2DA,wBAAA,CAAyBjN,CAAzB,CAA4BkQ,OAA5B,CAAkCC,EAAlC,CAAsC,CACpCnQ,EAAE,QAAUkQ,OAAV,CAAiB,GAAnB,EAAwBhQ,IAAxB,CAA6B,SAAUsJ,CAAV,CAAa3I,IAAb,CAAmB,CAC9C,UAAYb,EAAEa,IAAF,CAAZ,CAEA,UAAYE,MAAM8B,IAAN,CAAWqN,OAAX,CAAZ,CACAnP,MAAM8B,IAAN,CAAWsN,EAAX,CAAelF,KAAf,EACAlK,MAAMgC,UAAN,CAAiBmN,OAAjB,EACD,CAND,EAQA,QAAA,CACD;;;;;;AASD,0BAAA,CAA2BlQ,CAA3B,CAA8B,CAC5BA,EAAIoQ,gBAAgBpQ,CAAhB,CAAmB,SAAnB,CAA8B,OAA9B,CAAJ,CACAA,EAAIoQ,gBAAgBpQ,CAAhB,CAAmB,UAAnB,CAA+B,MAA/B,CAAJ,CACA,QAAA,CACD;AAGD,gBAAgB,UAAA,CAAW,gCAAX,CAA6C,GAA7C,CAAhB;;AAIA,iBAAiB,qBAAjB,CAEA,qBAAqB,CAAC,wCAAD,CAA2C,uCAA3C,CAAoF,qCAApF,CAA2H,oCAA3H,CAArB;AAGA,wBAAwB,CAAC,OAAD,CAAU,QAAV,CAAoB,UAApB,CAAgC,MAAhC,CAAwC,OAAxC,CAAiD,IAAjD,CAAuD,OAAvD,CAAgE,QAAhE,CAA0E,QAA1E,CAAxB;AAGA,mBAAmB,CAAC,OAAD,CAAU,OAAV,CAAnB,CACA,4BAA4BzB,eAAaE,GAAb,CAAiB,SAAUC,QAAV,CAAoB,CAC/D,MAAO,IAAMA,QAAN,CAAiB,GAAxB,CACD,CAF2B,CAA5B,CAGA,uBAAuBH,eAAaK,IAAb,CAAkB,GAAlB,CAAvB,CACA,sBAAsB,CAAC,KAAD,CAAQ,QAAR,CAAkB,MAAlB,CAA0B,OAA1B,CAAmC,IAAnC,CAAyC,KAAzC,CAAtB,CACA,yBAAyB,UAAA,CAAW,KAAOC,kBAAgBD,IAAhB,CAAqB,GAArB,CAAP,CAAmC,IAA9C,CAAoD,GAApD,CAAzB;AAGA,wBAAwB,CAAC,GAAD,CAAxB,CACA,6BAA6BG,oBAAkBN,GAAlB,CAAsB,SAAUQ,GAAV,CAAe,CAChE,WAAa,QAAb,CACD,CAF4B,EAE1BL,IAF0B,CAErB,GAFqB,CAA7B;AAKA,+BAA+B,CAAC,IAAD,CAAO,IAAP,CAAa,OAAb,CAAsB,KAAtB,CAA6B,QAA7B,CAAuC,MAAvC,EAA+CA,IAA/C,CAAoD,GAApD,CAA/B;AAGA,kBAAkB,CAAC,IAAD,CAAO,IAAP,CAAa,IAAb,CAAmB,IAAnB,CAAyB,IAAzB,CAAlB,CACA,sBAAsBO,cAAYP,IAAZ,CAAiB,GAAjB,CAAtB;;;;;AAQA,oCAAoC,CAAC,UAAD,CAAa,OAAb,CAAsB,QAAtB,CAAgC,SAAhC,CAA2C,SAA3C,CAAsD,KAAtD,CAA6D,gBAA7D,CAA+E,OAA/E,CAAwF,SAAxF,CAAmG,cAAnG,CAAmH,QAAnH,CAA6H,iBAA7H,CAAgJ,OAAhJ,CAAyJ,MAAzJ;AAEpC,QAFoC,CAE1B,QAF0B,CAEhB,QAFgB,CAEN,OAFM;AAGpC,MAHoC,CAG5B,MAH4B,CAGpB,KAHoB,CAGb,UAHa,CAGD,OAHC,CAGQ,YAHR,CAGsB,UAHtB;AAIpC,2BAJoC;AAKpC,OALoC,CAK3B,eAL2B,CAKV,SALU,CAKC,QALD,CAKW,QALX,CAKqB,KALrB,CAK4B,OAL5B,CAKqC,UALrC,CAKiD,SALjD,CAK4D,UAL5D,CAKwE,SALxE,CAKmF,SALnF,CAK8F,OAL9F,CAApC;;;;;;;;;;;AAkBA,oCAAoC,CAAC,KAAD,CAAQ,SAAR,CAAmB,MAAnB,CAA2B,WAA3B,CAAwC,QAAxC,CAAkD,SAAlD,CAA6D,qBAA7D,CAAoF,QAApF;AACpC,OADoC,CAC3B,QAD2B,CACjB,OADiB,CACR,MADQ,CACA,MADA,CACQ,OADR,CACiB,QADjB,CAApC;;;AAMA,0BAA0B,CAAC,GAAD,CAAM,YAAN,CAAoB,IAApB,CAA0B,KAA1B,CAAiC,KAAjC,CAAwC,GAAxC,CAA6C,KAA7C,CAAoD,OAApD,EAA6DA,IAA7D,CAAkE,GAAlE,CAA1B;;;;;;;;;AAoBA,2BAA2B,CAAC,SAAD,CAAY,gBAAZ,CAA8B,iBAA9B,CAAiD,MAAjD,CAAyD,MAAzD,CAAiE,SAAjE,CAA4E,qBAA5E,CAAmG,OAAnG,CAA4G,QAA5G,CAAsH,MAAtH,CAA8H,QAA9H,CAAwI,MAAxI,CAAgJ,YAAhJ,CAA8J,WAA9J,CAA2K,MAA3K,CAAmL,OAAnL,CAA4L,MAA5L,CAAoM,UAApM;AAC3B,SAD2B,CAA3B;AAIA,wBAAwB,UAAA,CAAWoF,uBAAqBpF,IAArB,CAA0B,GAA1B,CAAX,CAA2C,GAA3C,CAAxB;;;;;AASA,2BAA2B,CAAC,OAAD,CAAU,QAAV,CAAoB,QAApB,CAA8B,KAA9B,CAAqC,UAArC,CAAiD,QAAjD,CAA2D,QAA3D,CAAqE,OAArE,CAA8E,MAA9E,CAAsF,OAAtF,CAA+F,SAA/F,CAA0G,YAA1G,CAAwH,SAAxH,CAAmI,MAAnI,CAA2I,QAA3I,CAAqJ,OAArJ,CAA8J,MAA9J,CAAsK,MAAtK,CAA8K,SAA9K,CAAyL,UAAzL;AAC3B,MAD2B,CACnB,QADmB,CACT,UADS,CACG,MADH,CACW,MADX,CACmB,MADnB,CAC2B,UAD3B;AAE3B,mBAF2B,CAEN,MAFM,CAEE,WAFF,CAEe,MAFf,CAEuB,UAFvB,CAEmC,OAFnC,CAE4C,MAF5C,CAEoD,OAFpD,CAE6D,UAF7D;AAG3B,OAH2B,CAGlB,KAHkB;AAI3B,SAJ2B,CAIhB,SAJgB,CAIL,cAJK;AAK3B,QAL2B,CAKjB,WALiB,CAKJ,OALI,CAKK,UALL,CAKiB,UALjB,CAK6B,MAL7B,CAKqC,SALrC,CAKgD,SALhD,CAK2D,OAL3D,CAKoE,KALpE,CAK2E,SAL3E,CAKsF,MALtF,CAK8F,OAL9F,CAKuG,QALvG,CAA3B;AAOA,wBAAwB,UAAA,CAAWuF,uBAAqBvF,IAArB,CAA0B,GAA1B,CAAX,CAA2C,GAA3C,CAAxB;AAGA,qBAAqB,wCAArB;;;;AAWA,cAAc,UAAA,CAAW,iBAAX,CAA8B,GAA9B,CAAd;;;;;;;;;;;;AAwBA,uBAAuB,CAAC,SAAD,CAAY,OAAZ,CAAqB,YAArB,CAAmC,MAAnC,CAA2C,IAA3C,CAAiD,QAAjD,CAA2D,QAA3D,CAAqE,SAArE,CAAgF,KAAhF,CAAuF,UAAvF,CAAmG,IAAnG,CAAyG,KAAzG,CAAgH,IAAhH,CAAsH,IAAtH,CAA4H,OAA5H,CAAqI,UAArI,CAAiJ,YAAjJ,CAA+J,QAA/J,CAAyK,QAAzK,CAAmL,MAAnL,CAA2L,IAA3L,CAAiM,IAAjM,CAAuM,IAAvM,CAA6M,IAA7M,CAAmN,IAAnN,CAAyN,IAAzN,CAA+N,QAA/N,CAAyO,QAAzO,CAAmP,IAAnP,CAAyP,IAAzP,CAA+P,KAA/P,CAAsQ,QAAtQ,CAAgR,IAAhR,CAAsR,QAAtR,CAAgS,GAAhS,CAAqS,KAArS,CAA4S,UAA5S,CAAwT,SAAxT,CAAmU,OAAnU,CAA4U,OAA5U,CAAqV,UAArV,CAAiW,OAAjW,CAA0W,IAA1W,CAAgX,OAAhX,CAAyX,IAAzX,CAA+X,IAA/X,CAAqY,OAArY,CAAvB,CACA,0BAA0B,UAAA,CAAW,KAAOa,mBAAiBb,IAAjB,CAAsB,GAAtB,CAAP,CAAoC,IAA/C,CAAqD,GAArD,CAA1B;;;;AAMA,0BAA0BS,gCAA8BT,IAA9B,CAAmC,GAAnC,CAA1B,CACA,2BAA2B,UAAA,CAAWe,qBAAX,CAAgC,GAAhC,CAA3B,CAEA,0BAA0BL,gCAA8BV,IAA9B,CAAmC,GAAnC,CAA1B,CACA,2BAA2B,UAAA,CAAWiB,qBAAX,CAAgC,GAAhC,CAA3B,CAEA,kCAAA,CAAiCG,CAAjC,CAAoC;;;;;;;;;AAUlCA,EAAE,GAAF,EAAOoD,GAAP,CAAW,GAAX,EAAgBlD,IAAhB,CAAqB,SAAUC,KAAV,CAAiBU,IAAjB,CAAuB,CAC1C,UAAYb,EAAEa,IAAF,CAAZ,CACA,YAAcE,MAAM8B,IAAN,CAAW,OAAX,CAAd,CACA,OAAS9B,MAAM8B,IAAN,CAAW,IAAX,CAAT,CACA,GAAI,CAACkC,EAAD,EAAO,CAACD,OAAZ,CAAqB,OAErB,eAAiB,CAACA,SAAW,EAAZ,EAAkB,GAAlB,EAAyBC,IAAM,EAA/B,CAAjB,CACA,GAAIjF,uBAAqBqB,IAArB,CAA0BwJ,UAA1B,CAAJ,CAA2C,CACzC,OACD,CAFD,QAEW/K,uBAAqBuB,IAArB,CAA0BwJ,UAA1B,CAAJ,CAA2C,CAChD5J,MAAMJ,MAAN,GACD,CACF,CAZD,EAcA,QAAA,CACD;;;;;;;AAWD,mBAAA,CAAoBX,CAApB,CAAuB,CACrB,eAAiB,KAAjB,CACAA,EAAE,IAAF,EAAQE,IAAR,CAAa,SAAUC,KAAV,CAAiBC,OAAjB,CAA0B,CACrC,aAAeJ,EAAEI,OAAF,CAAf,CACA,gBAAkBC,SAASE,IAAT,GAAgBC,GAAhB,CAAoB,CAApB,CAAlB,CAEA,GAAIF,aAAeA,YAAYG,OAAZ,CAAoBC,WAApB,KAAsC,IAAzD,CAA+D,CAC7DT,WAAa,IAAb,CACAI,SAASM,MAAT,GACD,CAHD,QAGWV,UAAJ,CAAgB,CACrBA,WAAa,KAAb;AAEAW,eAAaR,OAAb,CAAsBJ,CAAtB,CAAyB,IAAzB,EACD,CACF,CAZD,EAcA,QAAA,CACD;;;;;;;;;;AAaD,uBAAA,CAAsBa,IAAtB,CAA4Bb,CAA5B,CAA+B,CAC7B,OAASiN,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,KAA7E,CAEA,UAAYjN,EAAEa,IAAF,CAAZ,CAEA,GAAIC,EAAJ,CAAQ,CACN,YAAcD,KAAKI,WAAnB,CACA,MAAQjB,EAAE,SAAF,CAAR;;AAIA,MAAOgB,SAAW,EAAEA,QAAQP,OAAR,EAAmBf,sBAAoByB,IAApB,CAAyBH,QAAQP,OAAjC,CAArB,CAAlB,CAAmF,CACjF,gBAAkBO,QAAQC,WAA1B,CACAjB,EAAEgB,OAAF,EAAWI,QAAX,CAAoBF,CAApB,EACAF,QAAUC,WAAV,CACD,CAEDF,MAAMM,WAAN,CAAkBH,CAAlB,EACAH,MAAMJ,MAAN,GACA,QAAA,CACD,CAED,QAAA,CACD,CAED,sBAAA,CAAqBX,CAArB,CAAwB,CACtBA,EAAE,KAAF,EAASE,IAAT,CAAc,SAAUC,KAAV,CAAiBoB,GAAjB,CAAsB,CAClC,SAAWvB,EAAEuB,GAAF,CAAX,CACA,gBAAkBC,KAAKE,QAAL,CAAcnC,qBAAd,EAAmCoC,MAAnC,GAA8C,CAAhE,CAEA,GAAIF,WAAJ,CAAiB,CACf4O,iBAAiB7O,IAAjB,CAAuBxB,CAAvB,CAA0B,GAA1B,EACD,CACF,CAPD,EASA,QAAA,CACD,CAED,uBAAA,CAAsBA,CAAtB,CAAyB,CACvBA,EAAE,MAAF,EAAUE,IAAV,CAAe,SAAUC,KAAV,CAAiB0B,IAAjB,CAAuB,CACpC,UAAY7B,EAAE6B,IAAF,CAAZ,CACA,gBAAkBC,MAAMC,OAAN,CAAc,QAAd,EAAwBJ,MAAxB,GAAmC,CAArD,CACA,GAAIF,WAAJ,CAAiB,CACf4O,iBAAiBvO,KAAjB,CAAwB9B,CAAxB,CAA2B,GAA3B,EACD,CACF,CAND,EAQA,QAAA,CACD;;;;;;;;;;;AAcD,+BAAA,CAAgCA,CAAhC,CAAmC,CACjCA,EAAIsQ,WAAWtQ,CAAX,CAAJ,CACAA,EAAIsB,cAAYtB,CAAZ,CAAJ,CACAA,EAAI4B,eAAa5B,CAAb,CAAJ,CAEA,QAAA,CACD,CAED,yBAAA,CAA0Be,KAA1B,CAAiCf,CAAjC,CAAoC,CAClC,QAAUiN,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,GAA9E,CAEA,SAAWlM,MAAMP,GAAN,CAAU,CAAV,CAAX,CACA,GAAI,CAACK,IAAL,CAAW,CACT,QAAA,CACD,CACD,UAAYqB,WAASrB,IAAT,GAAkB,EAA9B,CAEA,iBAAmB0P,mBAAiBtO,KAAjB,EAAwBxD,GAAxB,CAA4B,SAAU2D,GAAV,CAAe,CAC5D,WAAa,GAAN,CAAYH,MAAMG,GAAN,CAAnB,CACD,CAFkB,EAEhBxD,IAFgB,CAEX,GAFW,CAAnB,CAGA,SAAW,MAAX,CAEA,GAAIoB,EAAEsC,OAAN,CAAe;;;AAIbD,KAAOxB,KAAKJ,OAAL,CAAaC,WAAb,KAA+B,UAA/B,CAA4CK,MAAMwB,IAAN,EAA5C,CAA2DxB,MAAMsB,IAAN,EAAlE,CACD,CALD,IAKO,CACLA,KAAOtB,MAAMyB,QAAN,EAAP,CACD,CACDzB,MAAMM,WAAN,CAAkB,IAAMpC,GAAN,CAAY,GAAZ,CAAkBkD,YAAlB,CAAiC,GAAjC,CAAuCE,IAAvC,CAA8C,IAA9C,CAAqDpD,GAArD,CAA2D,GAA7E,EACA,QAAA,CACD,CAED,yBAAA,CAAwByD,IAAxB,CAA8B1C,CAA9B,CAAiC,CAC/B,WAAa4C,SAASF,KAAKG,IAAL,CAAU,QAAV,CAAT,CAA8B,EAA9B,CAAb,CACA,UAAYD,SAASF,KAAKG,IAAL,CAAU,OAAV,CAAT,CAA6B,EAA7B,GAAoC,EAAhD;;;AAKA,GAAI,CAACF,QAAU,EAAX,EAAiB,EAAjB,EAAuBG,MAAQ,EAAnC,CAAuC,CACrCJ,KAAK/B,MAAL,GACD,CAFD,QAEWgC,MAAJ,CAAY;;;AAIjBD,KAAKK,UAAL,CAAgB,QAAhB,EACD,CAED,QAAA,CACD;;AAID,wBAAA,CAAuBL,IAAvB,CAA6B1C,CAA7B,CAAgC,CAC9B,GAAI9B,YAAUiD,IAAV,CAAeuB,KAAKG,IAAL,CAAU,KAAV,CAAf,CAAJ,CAAsC,CACpCH,KAAK/B,MAAL,GACD,CAED,QAAA,CACD,CAED,sBAAA,CAAqB4C,QAArB,CAA+BvD,CAA/B,CAAkC,CAChCuD,SAASC,IAAT,CAAc,KAAd,EAAqBtD,IAArB,CAA0B,SAAUC,KAAV,CAAiBqQ,GAAjB,CAAsB,CAC9C,SAAWxQ,EAAEwQ,GAAF,CAAX,CAEA/N,iBAAeC,IAAf,CAAqB1C,CAArB,EACAgD,gBAAcN,IAAd,CAAoB1C,CAApB,EACD,CALD,EAOA,QAAA,CACD,CAED,qBAAA,CAAoBkD,OAApB,CAA6BlD,CAA7B,CAAgCyJ,GAAhC,CAAqC,CACnC,SAAWwD,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,EAA/E,CAEA,GAAI9J,KAAKxB,MAAL,GAAgB,CAApB,CAAuB,CACrBwB,KAAO9E,gBAAP,CACD,CAED,GAAIoL,GAAJ,CAAS,CACP,eAAiBE,MAAIoF,KAAJ,CAAUtF,GAAV,CAAjB,CACIgH,SAAWC,WAAWD,QAD1B,CAEIhD,SAAWiD,WAAWjD,QAF1B,CAIAtK,KAAO,GAAGwN,MAAH,CAAUC,qBAAmBzN,IAAnB,CAAV,CAAoC,CAAC,gBAAkBsN,QAAlB,CAA6B,IAA7B,CAAoChD,QAApC,CAA+C,IAAhD,CAApC,CAAP,CACD,CAEDzN,EAAEmD,KAAKvE,IAAL,CAAU,GAAV,CAAF,CAAkBsE,OAAlB,EAA2B2N,QAA3B,CAAoCzS,YAApC,EAEA,QAAA,CACD,CAED,wBAAA,CAAuB8E,OAAvB,CAAgClD,CAAhC,CAAmC,CACjC,SAAWiN,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,EAA/E,CAEA,GAAI9J,KAAKxB,MAAL,GAAgB,CAApB,CAAuB,CACrBwB,KAAO7E,mBAAP,CACD;;AAID0B,EAAEmD,KAAKvE,IAAL,CAAU,GAAV,CAAF,CAAkBsE,OAAlB,EAA2BE,GAA3B,CAA+B,IAAMhF,YAArC,EAAiDuC,MAAjD;AAGAX,EAAE,IAAM5B,YAAR,CAAoB8E,OAApB,EAA6BG,WAA7B,CAAyCjF,YAAzC,EAEA,QAAA,CACD;;;AAMD,sBAAA,CAAuB8E,OAAvB,CAAgClD,CAAhC,CAAmC,CACjC,WAAaA,EAAE,IAAF,CAAQkD,OAAR,CAAb,CAEA,GAAI4N,OAAOnP,MAAP,CAAgB,CAApB,CAAuB,CACrBmP,OAAO5Q,IAAP,CAAY,SAAUC,KAAV,CAAiBU,IAAjB,CAAuB,CACjC,SAASA,IAAF,EAAQF,MAAR,EAAP,CACD,CAFD,EAGD,CAJD,IAIO,CACLmQ,OAAO5Q,IAAP,CAAY,SAAUC,KAAV,CAAiBU,IAAjB,CAAuB,CACjCwP,iBAAiBrQ,EAAEa,IAAF,CAAjB,CAA0Bb,CAA1B,CAA6B,IAA7B,EACD,CAFD,EAGD,CAED,QAAA,CACD,CAED,gCAAA,CAA+BuD,QAA/B,CAAyC,CACvCA,SAASC,IAAT,CAAc,GAAd,EAAmBtD,IAAnB,CAAwB,SAAUC,KAAV,CAAiBU,IAAjB,CAAuB,CAC7C,UAAYqB,WAASrB,IAAT,CAAZ,CAEAwK,WAASxK,IAAT,CAAe0P,mBAAiBtO,KAAjB,EAAwBwB,MAAxB,CAA+B,SAAUC,GAAV,CAAeb,IAAf,CAAqB,CACjE,GAAI/D,qBAAmBqC,IAAnB,CAAwB0B,IAAxB,CAAJ,CAAmC,CACjC,kBAAgB,EAAT,CAAaa,GAAb,CAAkBqN,kBAAgB,EAAhB,CAAoBlO,IAApB,CAA0BZ,MAAMY,IAAN,CAA1B,CAAlB,CAAP,CACD,CAED,UAAA,CACD,CANc,CAMZ,EANY,CAAf,EAOD,CAVD,EAYA,eAAA,CACD;;;;;;AASD,2BAAA,CAA4BU,QAA5B,CAAsC;;;AAIpC,+BAA6BA,SAAS+C,MAAT,GAAkB3E,MAAlB,CAA2B4B,SAAS+C,MAAT,EAA3B,CAA+C/C,QAArE,CAAP,CACD,CAED,sBAAA,CAAqBA,QAArB,CAA+BvD,CAA/B,CAAkC,CAChCuD,SAASC,IAAT,CAAc,GAAd,EAAmBtD,IAAnB,CAAwB,SAAUC,KAAV,CAAiBe,CAAjB,CAAoB,CAC1C,OAASlB,EAAEkB,CAAF,CAAT,CACA,GAAI8P,GAAGxN,IAAH,CAAQ,aAAR,EAAuB7B,MAAvB,GAAkC,CAAlC,EAAuCqP,GAAGzO,IAAH,GAAUuD,IAAV,KAAqB,EAAhE,CAAoEkL,GAAGrQ,MAAH,GACrE,CAHD,EAKA,QAAA,CACD;;;;;AAQD,sCAAsC,CAAC,UAAD,CAAa,OAAb,CAAsB,QAAtB,CAAgC,SAAhC,CAA2C,SAA3C,CAAsD,KAAtD,CAA6D,gBAA7D,CAA+E,OAA/E,CAAwF,SAAxF,CAAmG,cAAnG,CAAmH,QAAnH,CAA6H,iBAA7H,CAAgJ,OAAhJ,CAAyJ,MAAzJ,CAAiK,MAAjK,CAAyK,QAAzK,CAAmL,QAAnL,CAA6L,QAA7L,CAAuM,OAAvM;AACtC,MADsC,CAC9B,MAD8B,CACtB,KADsB,CACf,OADe,CACN,YADM,CACQ,UADR;AAEtC,2BAFsC;AAGtC,OAHsC,CAG7B,eAH6B,CAGZ,SAHY,CAGD,QAHC,CAGS,QAHT,CAGmB,KAHnB,CAG0B,OAH1B,CAGmC,UAHnC,CAG+C,SAH/C,CAG0D,UAH1D,CAGsE,SAHtE,CAGiF,OAHjF,CAAtC;;;;;;;;;;;AAgBA,sCAAsC,CAAC,KAAD,CAAQ,SAAR,CAAmB,MAAnB,CAA2B,WAA3B,CAAwC,QAAxC,CAAkD,SAAlD,CAA6D,qBAA7D,CAAoF,QAApF;AACtC,OADsC,CAC7B,QAD6B,CACnB,OADmB,CACV,MADU,CACF,MADE,CACM,OADN,CACe,QADf,CAAtC;;;AAMA,4BAA4B,CAAC,GAAD,CAAM,YAAN,CAAoB,IAApB,CAA0B,KAA1B,CAAiC,KAAjC,CAAwC,GAAxC,CAA6C,KAA7C,CAAoD,OAApD,EAA6D/B,IAA7D,CAAkE,GAAlE,CAA5B;;AAIA,+BAA+B,CAAC,IAAD,CAAO,GAAP,CAAY,GAAZ,CAAiB,OAAjB,CAA0B,IAA1B,CAAgC,MAAhC,CAAwC,MAAxC,CAAgD,UAAhD,CAA4D,OAA5D,CAAqE,KAArE,CAA4E,MAA5E,CAAoF,MAApF,CAA/B,CAEA,kCAAkC,UAAA,CAAW,KAAOqS,2BAAyBrS,IAAzB,CAA8B,GAA9B,CAAP,CAA4C,IAAvD,CAA6D,GAA7D,CAAlC;;;AAKA,gCAAgC,CAAC,CAAC,SAAD,CAAY,gBAAZ,CAAD,CAAgC,CAAC,OAAD,CAAU,gBAAV,CAAhC,CAA6D,CAAC,QAAD,CAAW,gBAAX,CAA7D,CAA2F,CAAC,OAAD,CAAU,WAAV,CAA3F,CAAmH,CAAC,OAAD,CAAU,YAAV,CAAnH,CAA4I,CAAC,OAAD,CAAU,YAAV,CAA5I,CAAhC,CAEA,oBAAoB,CAAC,QAAD,CAAW,OAAX,CAAoB,OAApB,CAA6B,SAA7B,CAApB,CACA,uBAAuB,UAAA,CAAWsS,gBAActS,IAAd,CAAmB,GAAnB,CAAX,CAAoC,GAApC,CAAvB;;;;AAMA,6BAA6B,CAAC,SAAD,CAAY,gBAAZ,CAA8B,iBAA9B,CAAiD,MAAjD,CAAyD,MAAzD,CAAiE,SAAjE,CAA4E,qBAA5E,CAAmG,OAAnG,CAA4G,QAA5G,CAAsH,MAAtH,CAA8H,QAA9H,CAAwI,MAAxI,CAAgJ,YAAhJ,CAA8J,WAA9J,CAA2K,MAA3K,CAAmL,OAAnL,CAA4L,MAA5L,CAAoM,UAApM;AAC7B,SAD6B,CAA7B;AAIA,0BAA0B,UAAA,CAAWuS,yBAAuBvS,IAAvB,CAA4B,GAA5B,CAAX,CAA6C,GAA7C,CAA1B;AAGA,0BAA0B,UAAA,CAAW,qBAAX,CAAkC,GAAlC,CAA1B;;;;AAMA,6BAA6B,CAAC,OAAD,CAAU,QAAV,CAAoB,QAApB,CAA8B,KAA9B,CAAqC,UAArC,CAAiD,QAAjD,CAA2D,QAA3D,CAAqE,OAArE,CAA8E,MAA9E,CAAsF,OAAtF,CAA+F,SAA/F,CAA0G,YAA1G,CAAwH,SAAxH,CAAmI,MAAnI,CAA2I,QAA3I,CAAqJ,OAArJ,CAA8J,MAA9J,CAAsK,MAAtK,CAA8K,SAA9K,CAAyL,UAAzL;AAC7B,MAD6B,CACrB,QADqB,CACX,UADW,CACC,MADD,CACS,MADT,CACiB,MADjB,CACyB,UADzB;AAE7B,mBAF6B,CAER,MAFQ,CAEA,WAFA,CAEa,MAFb,CAEqB,UAFrB,CAEiC,OAFjC,CAE0C,MAF1C,CAEkD,OAFlD,CAE2D,UAF3D;AAG7B,OAH6B,CAGpB,KAHoB;AAI7B,SAJ6B,CAIlB,SAJkB,CAIP,cAJO;AAK7B,QAL6B,CAKnB,WALmB,CAKN,OALM,CAKG,UALH,CAKe,UALf,CAK2B,MAL3B,CAKmC,SALnC,CAK8C,SAL9C,CAKyD,OALzD,CAKkE,KALlE,CAKyE,SALzE,CAKoF,MALpF,CAK4F,OAL5F,CAKqG,QALrG,CAA7B;AAOA,0BAA0B,UAAA,CAAWwS,yBAAuBxS,IAAvB,CAA4B,GAA5B,CAAX,CAA6C,GAA7C,CAA1B;;;;;;;;;AAoBA,4BAA4ByS,kCAAgCzS,IAAhC,CAAqC,GAArC,CAA5B,CAGA,4BAA4B0S,kCAAgC1S,IAAhC,CAAqC,GAArC,CAA5B,CAKA,6BAA6B,UAAA,CAAW,mBAAX,CAAgC,GAAhC,CAA7B,CACA,2BAA2B,UAAA,CAAW,4BAAX,CAAyC,GAAzC,CAA3B,CACA,iBAAiB,UAAA,CAAW,kBAAX,CAA+B,GAA/B,CAAjB;AAGA,oBAAA,CAAmBiC,IAAnB,CAAyB,CACvB,YAAcA,KAAKgC,IAAL,CAAU,OAAV,CAAd,CACA,OAAShC,KAAKgC,IAAL,CAAU,IAAV,CAAT,CACA,UAAY,CAAZ,CAEA,GAAIkC,EAAJ,CAAQ;AAEN,GAAIwM,sBAAoBpQ,IAApB,CAAyB4D,EAAzB,CAAJ,CAAkC,CAChCC,OAAS,EAAT,CACD,CACD,GAAIwM,sBAAoBrQ,IAApB,CAAyB4D,EAAzB,CAAJ,CAAkC,CAChCC,OAAS,EAAT,CACD,CACF,CAED,GAAIF,OAAJ,CAAa,CACX,GAAIE,QAAU,CAAd,CAAiB;;AAGf,GAAIuM,sBAAoBpQ,IAApB,CAAyB2D,OAAzB,CAAJ,CAAuC,CACrCE,OAAS,EAAT,CACD,CACD,GAAIwM,sBAAoBrQ,IAApB,CAAyB2D,OAAzB,CAAJ,CAAuC,CACrCE,OAAS,EAAT,CACD,CACF;;;AAKD,GAAIyM,mBAAiBtQ,IAAjB,CAAsB2D,OAAtB,CAAJ,CAAoC,CAClCE,OAAS,EAAT,CACD;;;;AAMD,GAAI0M,sBAAoBvQ,IAApB,CAAyB2D,OAAzB,CAAJ,CAAuC,CACrCE,OAAS,EAAT,CACD,CACF,CAED,YAAA,CACD;;;AAKD,mBAAA,CAAkBjE,KAAlB,CAAyB;AAEvB,kBAAkBA,MAAM8B,IAAN,CAAW,OAAX,CAAX,GAAmC,IAA1C,CACD;AAGD,sBAAA,CAAqBN,IAArB,CAA2B,CACzB,MAAO,CAACA,KAAK6C,KAAL,CAAW,IAAX,GAAoB,EAArB,EAAyBzD,MAAhC,CACD,CAED,YAAY,UAAA,CAAW,WAAX,CAAwB,GAAxB,CAAZ,CAEA,sBAAA,CAAqB4D,UAArB,CAAiC,CAC/B,YAAc0H,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,GAAlF,CAEA,WAAa1H,WAAa,EAA1B,CAEA,GAAIC,OAAS,CAAb,CAAgB,CACd,gBAAkB,MAAlB;;;;;AAOA,GAAIH,QAAMlE,IAAN,CAAWV,OAAX,CAAJ,CAAyB,CACvBgF,YAAcD,OAAS,CAAvB,CACD,CAFD,IAEO,CACLC,YAAcD,OAAS,IAAvB,CACD,CAED,YAAYG,GAAL,CAASD,KAAKE,GAAL,CAASH,WAAT,CAAsB,CAAtB,CAAT,CAAmC,CAAnC,CAAP,CACD,CAED,QAAA,CACD;;AAID,0BAAA,CAA2B5E,IAA3B,CAAiC,CAC/B,UAAY,CAAZ,CACA,SAAWA,KAAK0B,IAAL,GAAYuD,IAAZ,EAAX,CACA,eAAiBvD,KAAKZ,MAAtB;AAGA,GAAI4D,WAAa,EAAjB,CAAqB,CACnB,QAAA,CACD;AAGDP,OAASG,cAAY5C,IAAZ,CAAT;;AAIAyC,OAASM,cAAYC,UAAZ,CAAT;;;;AAMA,GAAIhD,KAAKwD,KAAL,CAAW,CAAC,CAAZ,IAAmB,GAAvB,CAA4B,CAC1Bf,OAAS,CAAT,CACD,CAED,YAAA,CACD,CAED,mBAAA,CAAkBjE,KAAlB,CAAyBf,CAAzB,CAA4BgF,KAA5B,CAAmC,CACjCjE,MAAM8B,IAAN,CAAW,OAAX,CAAoBmC,KAApB,EACA,YAAA,CACD,CAED,oBAAA,CAAqBjE,KAArB,CAA4Bf,CAA5B,CAA+BkG,MAA/B,CAAuC,CACrC,GAAI,CACF,UAAYyL,kBAAkB5Q,KAAlB,CAAyBf,CAAzB,EAA8BkG,MAA1C,CACAF,WAASjF,KAAT,CAAgBf,CAAhB,CAAmBgF,KAAnB,EACD,CAAC,MAAOoB,CAAP,CAAU;CAIZ,YAAA,CACD;AAGD,uBAAA,CAAwBvF,IAAxB,CAA8Bb,CAA9B,CAAiCgF,KAAjC,CAAwC,CACtC,WAAanE,KAAKyF,MAAL,EAAb,CACA,GAAIA,MAAJ,CAAY,CACVsL,YAAYtL,MAAZ,CAAoBtG,CAApB,CAAuBgF,MAAQ,IAA/B,EACD,CAED,WAAA,CACD;;;AAKD,0BAAA,CAA2BjE,KAA3B,CAAkCf,CAAlC,CAAqC,CACnC,gBAAkBiN,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,IAAtF,CAEA,UAAYhI,WAASlE,KAAT,CAAZ,CAEA,GAAIiE,KAAJ,CAAW,CACT,YAAA,CACD,CAEDA,MAAQ6M,aAAa9Q,KAAb,CAAR,CAEA,GAAIwF,WAAJ,CAAiB,CACfvB,OAASH,YAAU9D,KAAV,CAAT,CACD,CAED+Q,eAAe/Q,KAAf,CAAsBf,CAAtB,CAAyBgF,KAAzB,EAEA,YAAA,CACD;;AAID,qBAAA,CAAsBjE,KAAtB,CAA6B,CAC3B,eAAiBA,MAAMP,GAAN,CAAU,CAAV,CAAjB,CACIC,QAAUsR,WAAWtR,OADzB;;;AAQA,GAAIuR,yBAAuB7Q,IAAvB,CAA4BV,OAA5B,CAAJ,CAA0C,CACxC,yBAAyBM,KAAlB,CAAP,CACD,CAFD,QAEWN,QAAQC,WAAR,KAA0B,KAA9B,CAAqC,CAC1C,QAAA,CACD,CAFM,QAEIuR,uBAAqB9Q,IAArB,CAA0BV,OAA1B,CAAJ,CAAwC,CAC7C,QAAA,CACD,CAFM,QAEIyR,aAAW/Q,IAAX,CAAgBV,OAAhB,CAAJ,CAA8B,CACnC,MAAO,CAAC,CAAR,CACD,CAFM,QAEIA,QAAQC,WAAR,KAA0B,IAA9B,CAAoC,CACzC,MAAO,CAAC,CAAR,CACD,CAED,QAAA,CACD,CAED,yBAAA,CAAwBK,KAAxB,CAA+Bf,CAA/B,CAAkC,CAChC,GAAIe,MAAMP,GAAN,CAAU,CAAV,CAAJ,CAAkB,CAChB,eAAiBO,MAAMP,GAAN,CAAU,CAAV,CAAjB,CACIC,QAAUsR,WAAWtR,OADzB,CAGA,GAAIA,UAAY,MAAhB,CAAwB;AAEtB4P,iBAAiBtP,KAAjB,CAAwBf,CAAxB,CAA2B,KAA3B,EACD,CACF,CACF,CAED,qBAAA,CAAoBe,KAApB,CAA2Bf,CAA3B,CAA8BgF,KAA9B,CAAqC,CACnC,GAAIjE,KAAJ,CAAW,CACToR,iBAAepR,KAAf,CAAsBf,CAAtB,EACA4R,YAAY7Q,KAAZ,CAAmBf,CAAnB,CAAsBgF,KAAtB,EACD,CACF,CAED,kBAAA,CAAiBhF,CAAjB,CAAoBuG,WAApB,CAAiC,CAC/BvG,EAAE,QAAF,EAAYoD,GAAZ,CAAgB,SAAhB,EAA2BlD,IAA3B,CAAgC,SAAUC,KAAV,CAAiBU,IAAjB,CAAuB;;AAGrD,UAAYb,EAAEa,IAAF,CAAZ,CACAE,MAAQiF,WAASjF,KAAT,CAAgBf,CAAhB,CAAmB2R,kBAAkB5Q,KAAlB,CAAyBf,CAAzB,CAA4BuG,WAA5B,CAAnB,CAAR,CAEA,YAAcxF,MAAMuF,MAAN,EAAd,CACA,aAAeuL,aAAa9Q,KAAb,CAAf,CAEA0F,aAAWE,OAAX,CAAoB3G,CAApB,CAAuB4G,QAAvB,CAAiCL,WAAjC,EACA,GAAII,OAAJ,CAAa;;AAGXF,aAAWE,QAAQL,MAAR,EAAX,CAA6BtG,CAA7B,CAAgC4G,SAAW,CAA3C,CAA8CL,WAA9C,EACD,CACF,CAfD,EAiBA,QAAA,CACD;;AAID,wBAAA,CAAyBvG,CAAzB,CAA4B,CAC1B,gBAAkBiN,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,IAAtF;;AAIAmF,4BAA0BtI,OAA1B,CAAkC,SAAU0D,IAAV,CAAgB,CAChD,UAAY6E,iBAAe7E,IAAf,CAAqB,CAArB,CAAZ,CACI8E,eAAiBC,MAAM,CAAN,CADrB,CAEIC,cAAgBD,MAAM,CAAN,CAFpB,CAIAvS,EAAEsS,eAAiB,GAAjB,CAAuBE,aAAzB,EAAwCtS,IAAxC,CAA6C,SAAUC,KAAV,CAAiBU,IAAjB,CAAuB,CAClE+Q,YAAY5R,EAAEa,IAAF,EAAQyF,MAAR,CAAegM,cAAf,CAAZ,CAA4CtS,CAA5C,CAA+C,EAA/C,EACD,CAFD,EAGD,CARD;;;;;AAeA0G,UAAQ1G,CAAR,CAAWuG,WAAX,EACAG,UAAQ1G,CAAR,CAAWuG,WAAX,EAEA,QAAA,CACD,CAED,mBAAmB,SAAnB,CAEA,0BAAA,CAAyBhE,IAAzB,CAA+B,CAC7B,YAAYwE,OAAL,CAAaF,cAAb,CAA2B,GAA3B,EAAgCf,IAAhC,EAAP,CACD;;;;;AAOD,yBAAA,CAAwB2D,GAAxB,CAA6BgJ,SAA7B,CAAwC,CACtC,YAAcA,UAAUjP,IAAV,CAAe,SAAUkP,EAAV,CAAc,CACzC,UAAUvR,IAAH,CAAQsI,GAAR,CAAP,CACD,CAFa,CAAd;AAIA,GAAIkJ,OAAJ,CAAa,CACX,eAAeC,IAAR,CAAanJ,GAAb,EAAkB,CAAlB,CAAP,CACD,CAED,WAAA,CACD;;;;;;;;;;;;;;;;AAkBD,sBAAsB,UAAA,CAAW,0EAAX,CAAuF,GAAvF,CAAtB,CAEA,mBAAmB,QAAnB,CAEA,kBAAkB,WAAlB,CACA,kBAAkB,WAAlB,CAEA,yBAAA,CAAwBA,GAAxB,CAA6B,CAC3B,YAAcA,IAAIrE,KAAJ,CAAU4B,iBAAV,CAAd,CACA,GAAI,CAAC6L,OAAL,CAAc,WAAA,CAEd,YAAcjQ,SAASiQ,QAAQ,CAAR,CAAT,CAAqB,EAArB,CAAd;;AAIA,eAAiB,GAAV,CAAgBC,OAAhB,CAA0B,IAAjC,CACD,CAED,uBAAA,CAAsBrJ,GAAtB,CAA2B,CACzB,WAAWsJ,KAAJ,CAAU,GAAV,EAAe,CAAf,EAAkBhM,OAAlB,CAA0B,KAA1B,CAAiC,EAAjC,CAAP,CACD,CAED,wBAAA,CAAuBM,OAAvB,CAAgClH,KAAhC,CAAuCmH,sBAAvC,CAA+D,CAC7D,gBAAkB,IAAlB;;AAIA,GAAInH,MAAQ,CAAR,EAAagH,cAAYhG,IAAZ,CAAiBkG,OAAjB,CAAb,EAA0CA,QAAQ1F,MAAR,CAAiB,CAA/D,CAAkE,CAChE4F,YAAc,IAAd,CACD;;AAID,GAAIpH,QAAU,CAAV,EAAekH,QAAQ3G,WAAR,KAA0B,OAA7C,CAAsD,CACpD6G,YAAc,KAAd,CACD;;AAID,GAAIpH,MAAQ,CAAR,EAAakH,QAAQ1F,MAAR,CAAiB,CAA9B,EAAmC,CAAC2F,sBAAxC,CAAgE,CAC9DC,YAAc,KAAd,CACD,CAED,kBAAA,CACD;;;AAKD,yBAAA,CAAwBkC,GAAxB,CAA6BuJ,MAA7B,CAAqC,CACnC,cAAgBA,QAAUrJ,MAAIoF,KAAJ,CAAUtF,GAAV,CAA1B,CACA,aAAeoF,UAAU4B,QAAzB,CACIwC,KAAOpE,UAAUoE,IADrB,CAEIC,KAAOrE,UAAUqE,IAFrB,CAKA,2BAA6B,KAA7B,CACA,oBAAsBA,KAAKH,KAAL,CAAW,GAAX,EAAgBI,OAAhB,GAA0B1P,MAA1B,CAAiC,SAAUC,GAAV,CAAe0P,UAAf,CAA2BjT,KAA3B,CAAkC,CACvF,YAAciT,UAAd;AAGA,GAAI/L,QAAQuD,QAAR,CAAiB,GAAjB,CAAJ,CAA2B,CACzB,mBAAqBvD,QAAQ0L,KAAR,CAAc,GAAd,CAArB,CACIM,gBAAkBhB,iBAAeiB,cAAf,CAA+B,CAA/B,CADtB,CAEIC,gBAAkBF,gBAAgB,CAAhB,CAFtB,CAGIG,QAAUH,gBAAgB,CAAhB,CAHd,CAKA,GAAInM,cAAY/F,IAAZ,CAAiBqS,OAAjB,CAAJ,CAA+B,CAC7BnM,QAAUkM,eAAV,CACD,CACF;;AAID,GAAIvM,kBAAgB7F,IAAhB,CAAqBkG,OAArB,GAAiClH,MAAQ,CAA7C,CAAgD,CAC9CkH,QAAUA,QAAQN,OAAR,CAAgBC,iBAAhB,CAAiC,EAAjC,CAAV,CACD;;;;AAMD,GAAI7G,QAAU,CAAd,CAAiB,CACfmH,uBAAyBL,eAAa9F,IAAb,CAAkBkG,OAAlB,CAAzB,CACD;AAGD,GAAID,gBAAcC,OAAd,CAAuBlH,KAAvB,CAA8BmH,sBAA9B,CAAJ,CAA2D,CACzD5D,IAAI+P,IAAJ,CAASpM,OAAT,EACD,CAED,UAAA,CACD,CAnCqB,CAmCnB,EAnCmB,CAAtB,CAqCA,gBAAkB,IAAX,CAAkB4L,IAAlB,CAAyBS,gBAAgBP,OAAhB,GAA0BvU,IAA1B,CAA+B,GAA/B,CAAhC,CACD;;AAID,sBAAsB,UAAA,CAAW,QAAX,CAAtB,CACA,yBAAA,CAAwB2D,IAAxB,CAA8B,CAC5B,yBAAuBpB,IAAhB,CAAqBoB,IAArB,CAAP,CACD,CAED,yBAAA,CAAwBqG,OAAxB,CAAiC,CACnB,UAAYqE,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,EAAhF,CAEA,eAAenH,IAAR,GAAeiN,KAAf,CAAqB,KAArB,EAA4BhN,KAA5B,CAAkC,CAAlC,CAAqC4N,KAArC,EAA4C/U,IAA5C,CAAiD,GAAjD,CAAP,CACb;;;;;AAOD,wBAAA,CAAuB+I,UAAvB,CAAmCC,QAAnC,CAA6C5H,CAA7C,CAAgD,CAC9C,GAAI,CAAC2H,WAAWrB,MAAX,GAAoB3E,MAAzB,CAAiC,CAC/B,iBAAA,CACD,CAED,0BAA4B+D,KAAKE,GAAL,CAAS,EAAT,CAAagC,SAAW,IAAxB,CAA5B,CACA,gBAAkB5H,EAAE,aAAF,CAAlB,CAEA2H,WAAWrB,MAAX,GAAoB5E,QAApB,GAA+BxB,IAA/B,CAAoC,SAAUC,KAAV,CAAiBa,OAAjB,CAA0B,CAC5D,aAAehB,EAAEgB,OAAF,CAAf;AAEA,GAAI4S,8BAA4BzS,IAA5B,CAAiCH,QAAQP,OAAzC,CAAJ,CAAuD,CACrD,WAAA,CACD,CAED,iBAAmBwE,WAAS8C,QAAT,CAAnB,CACA,GAAIC,YAAJ,CAAkB,CAChB,GAAID,SAASvH,GAAT,CAAa,CAAb,IAAoBmH,WAAWnH,GAAX,CAAe,CAAf,CAAxB,CAA2C,CACzCsH,YAAYG,MAAZ,CAAmBF,QAAnB,EACD,CAFD,IAEO,CACL,iBAAmB,CAAnB,CACA,YAAcK,cAAYL,QAAZ,CAAd;;AAIA,GAAII,QAAU,IAAd,CAAoB,CAClBD,cAAgB,EAAhB,CACD;;AAID,GAAIC,SAAW,GAAf,CAAoB,CAClBD,cAAgB,EAAhB,CACD;;AAID,GAAIH,SAASlF,IAAT,CAAc,OAAd,IAA2B8E,WAAW9E,IAAX,CAAgB,OAAhB,CAA/B,CAAyD,CACvDqF,cAAgBN,SAAW,GAA3B,CACD,CAED,aAAeI,aAAeE,YAA9B,CAEA,GAAIG,UAAYR,qBAAhB,CAAuC,CACrC,mBAAmBI,MAAZ,CAAmBF,QAAnB,CAAP,CACD,CAFD,QAEW/G,QAAQP,OAAR,GAAoB,GAAxB,CAA6B,CAClC,mBAAqBsH,SAASxF,IAAT,EAArB,CACA,yBAA2BgD,aAAW+C,cAAX,CAA3B,CAEA,GAAIC,qBAAuB,EAAvB,EAA6BJ,QAAU,IAA3C,CAAiD,CAC/C,mBAAmBF,MAAZ,CAAmBF,QAAnB,CAAP,CACD,CAFD,QAEWQ,sBAAwB,EAAxB,EAA8BJ,UAAY,CAA1C,EAA+CV,iBAAea,cAAf,CAAnD,CAAmF,CACxF,mBAAmBL,MAAZ,CAAmBF,QAAnB,CAAP,CACD,CACF,CACF,CACF,CAED,WAAA,CACD,CAnDD,EAqDA,GAAID,YAAYpG,QAAZ,GAAuBC,MAAvB,GAAkC,CAAlC,EAAuCmG,YAAYpG,QAAZ,GAAuB8G,KAAvB,GAA+BhI,GAA/B,CAAmC,CAAnC,IAA0CmH,WAAWnH,GAAX,CAAe,CAAf,CAArF,CAAwG,CACtG,iBAAA,CACD,CAED,kBAAA,CACD;;AAID,4BAAA,CAA6BR,CAA7B,CAAgC,CAC9B,eAAiB,MAAjB,CACA,aAAe,CAAf,CAEAA,EAAE,SAAF,EAAaE,IAAb,CAAkB,SAAUC,KAAV,CAAiBU,IAAjB,CAAuB;AAEvC,GAAI+S,8BAA4BzS,IAA5B,CAAiCN,KAAKJ,OAAtC,CAAJ,CAAoD,CAClD,OACD,CAED,UAAYT,EAAEa,IAAF,CAAZ,CACA,UAAYoE,WAASlE,KAAT,CAAZ,CAEA,GAAIiE,MAAQ4C,QAAZ,CAAsB,CACpBA,SAAW5C,KAAX,CACA2C,WAAa5G,KAAb,CACD,CACF,CAbD;;AAiBA,GAAI,CAAC4G,UAAL,CAAiB,CACf,SAAS,MAAF,GAAa3H,EAAE,GAAF,EAAOwI,KAAP,EAApB,CACD,CAEDb,WAAaD,gBAAcC,UAAd,CAA0BC,QAA1B,CAAoC5H,CAApC,CAAb,CAEA,iBAAA,CACD;AAID,8BAAA,CAA6Be,KAA7B,CAAoCf,CAApC,CAAuC0I,MAAvC,CAA+C;;;;AAK7C,GAAI3H,MAAM4H,QAAN,CAAe,qBAAf,CAAJ,CAA2C,CACzC,OACD,CAED,YAAc7B,kBAAgB/F,MAAMwB,IAAN,EAAhB,CAAd,CAEA,GAAI4C,cAAYyD,OAAZ,EAAuB,EAA3B,CAA+B,CAC7B,WAAa5I,EAAE,GAAF,CAAOe,KAAP,EAAcY,MAA3B,CACA,eAAiB3B,EAAE,OAAF,CAAWe,KAAX,EAAkBY,MAAnC;AAGA,GAAImH,WAAaD,OAAS,CAA1B,CAA6B,CAC3B9H,MAAMJ,MAAN,GACA,OACD,CAED,kBAAoBiI,QAAQjH,MAA5B,CACA,aAAe3B,EAAE,KAAF,CAASe,KAAT,EAAgBY,MAA/B;;AAIA,GAAIoH,cAAgB,EAAhB,EAAsBC,WAAa,CAAvC,CAA0C,CACxCjI,MAAMJ,MAAN,GACA,OACD,CAED,YAAcyH,cAAYrH,KAAZ,CAAd;;;AAKA,GAAI2H,OAAS,EAAT,EAAeP,QAAU,GAAzB,EAAgCY,cAAgB,EAApD,CAAwD,CACtDhI,MAAMJ,MAAN,GACA,OACD;;AAID,GAAI+H,QAAU,EAAV,EAAgBP,QAAU,GAA9B,CAAmC;;;AAIjC,YAAcpH,MAAMP,GAAN,CAAU,CAAV,EAAaC,OAAb,CAAqBC,WAArB,EAAd,CACA,eAAiBD,UAAY,IAAZ,EAAoBA,UAAY,IAAjD,CACA,GAAIwI,UAAJ,CAAgB,CACd,iBAAmBlI,MAAMoI,IAAN,EAAnB,CACA,GAAID,cAAgBpC,kBAAgBoC,aAAa3G,IAAb,EAAhB,EAAqCwD,KAArC,CAA2C,CAAC,CAA5C,IAAmD,GAAvE,CAA4E,CAC1E,OACD,CACF,CAEDhF,MAAMJ,MAAN,GACA,OACD,CAED,gBAAkBX,EAAE,QAAF,CAAYe,KAAZ,EAAmBY,MAArC;AAGA,GAAIyH,YAAc,CAAd,EAAmBL,cAAgB,GAAvC,CAA4C,CAC1ChI,MAAMJ,MAAN,GACA,OACD,CACF,CACF;;;;;;;AASD,qBAAA,CAAsB4C,QAAtB,CAAgCvD,CAAhC,CAAmC,CACjCA,EAAEd,0BAAF,CAA4BqE,QAA5B,EAAsCrD,IAAtC,CAA2C,SAAUC,KAAV,CAAiBU,IAAjB,CAAuB,CAChE,UAAYb,EAAEa,IAAF,CAAZ,CACA,WAAaoE,WAASlE,KAAT,CAAb,CACA,GAAI,CAAC2H,MAAL,CAAa,CACXA,OAASiJ,kBAAkB5Q,KAAlB,CAAyBf,CAAzB,CAAT,CACAgG,WAASjF,KAAT,CAAgBf,CAAhB,CAAmB0I,MAAnB,EACD;AAGD,GAAIA,OAAS,CAAb,CAAgB,CACd3H,MAAMJ,MAAN,GACD,CAFD,IAEO;AAEL8H,sBAAoB1H,KAApB,CAA2Bf,CAA3B,CAA8B0I,MAA9B,EACD,CACF,CAfD,EAiBA,QAAA,CACD,CAED,uBAAA,CAAsBnF,QAAtB,CAAgCvD,CAAhC,CAAmC,CACjC,UAAYiN,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,EAAhF,CAEAjN,EAAEZ,iBAAF,CAAmBmE,QAAnB,EAA6BrD,IAA7B,CAAkC,SAAUC,KAAV,CAAiB0T,MAAjB,CAAyB,CACzD,YAAc7T,EAAE6T,MAAF,CAAd;;;;AAKA,GAAI7T,EAAE8T,OAAF,CAAWvQ,QAAX,EAAqBwQ,OAArB,CAA6B,GAA7B,EAAkCpS,MAAlC,GAA6C,CAAjD,CAAoD,CAClD,eAAehB,MAAR,EAAP,CACD;AAGD,GAAImG,kBAAgB9G,EAAE6T,MAAF,EAAUtR,IAAV,EAAhB,IAAsCyR,KAA1C,CAAiD,CAC/C,eAAerT,MAAR,EAAP,CACD;;AAID,GAAIkE,YAAU7E,EAAE6T,MAAF,CAAV,EAAuB,CAA3B,CAA8B,CAC5B,eAAelT,MAAR,EAAP,CACD,CAED,cAAA,CACD,CAtBD,EAwBA,QAAA,CACD;;AAKD,2BAAA,CAA4BuC,OAA5B,CAAqClD,CAArC,CAAwC;;;AAItCA,EAAIqQ,iBAAiBrQ,EAAE,MAAF,CAAjB,CAA4BA,CAA5B,CAA+B,KAA/B,CAAJ,CACAA,EAAIqQ,iBAAiBrQ,EAAE,MAAF,CAAjB,CAA4BA,CAA5B,CAA+B,KAA/B,CAAJ,CAEA,QAAA,CACD,qBAGD,qBAAA,CAAoBA,CAApB,CAAuBsJ,OAAvB,CAAgCzG,IAAhC,CAAsC0G,QAAtC,CAAgD,CAC9CvJ,EAAE,IAAM6C,IAAN,CAAa,GAAf,CAAoB0G,QAApB,EAA8BrJ,IAA9B,CAAmC,SAAUsJ,CAAV,CAAa3I,IAAb,CAAmB,CACpD,UAAYqB,WAASrB,IAAT,CAAZ,CACA,QAAUoB,MAAMY,IAAN,CAAV,CAEA,GAAI4G,GAAJ,CAAS,CACP,gBAAkBE,MAAIC,OAAJ,CAAYN,OAAZ,CAAqBG,GAArB,CAAlB,CACAyB,UAAQrK,IAAR,CAAcgC,IAAd,CAAoB6G,WAApB,EACD,CACF,CARD,EASD,CAED,6BAAA,CAA8BH,QAA9B,CAAwCvJ,CAAxC,CAA2CyJ,GAA3C,CAAgD,CAC9C,CAAC,MAAD,CAAS,KAAT,EAAgBK,OAAhB,CAAwB,SAAUjH,IAAV,CAAgB,CACtC,oBAAkB7C,CAAX,CAAcyJ,GAAd,CAAmB5G,IAAnB,CAAyB0G,QAAzB,CAAP,CACD,CAFD,EAIA,eAAA,CACD,CAED,qBAAA,CAAoBhH,IAApB,CAA0B,CACxB,YAAYuD,IAAL,GAAYiB,OAAZ,CAAoB,MAApB,CAA4B,GAA5B,EAAiCpF,MAAxC,CACD;;;AAKD,sBAAA,CAAqBZ,KAArB,CAA4B,CAC1B,oBAAsBwE,aAAWxE,MAAMwB,IAAN,EAAX,CAAtB,CAEA,aAAexB,MAAMyC,IAAN,CAAW,GAAX,EAAgBjB,IAAhB,EAAf,CACA,eAAiBgD,aAAWyE,QAAX,CAAjB,CAEA,GAAID,gBAAkB,CAAtB,CAAyB,CACvB,kBAAoBA,eAApB,CACD,CAFD,QAEWA,kBAAoB,CAApB,EAAyBE,WAAa,CAA1C,CAA6C,CAClD,QAAA,CACD,CAED,QAAA,CACD;;AAKD,2BAAA,CAA4BjK,CAA5B,CAA+BiU,SAA/B,CAA0CC,WAA1C,CAAuD,CACrD,iBAAmBjH,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,IAAvF,CAEA,eAAiBgH,UAAUE,MAAV,CAAiB,SAAUnJ,IAAV,CAAgB,CAChD,mBAAmBoJ,OAAZ,CAAoBpJ,IAApB,IAA8B,CAAC,CAAtC,CACD,CAFgB,CAAjB,CAIA,8BAAgC,IAAhC,CACA,sBAAwB,KAAxB,CACA,mBAAqBH,SAArB,CAEA,GAAI,CACF,UAAY,cAAA,EAAiB,CAC3B,SAAWwJ,MAAMpJ,KAAjB,CAEA,SAAW,MAAX,CACA,UAAY,OAAZ,CAEA,UAAYjL,EAAE,QAAUsU,IAAV,CAAiB,IAAjB,CAAwBtJ,IAAxB,CAA+B,IAAjC,CAAZ;;;AAKA,WAAauJ,MAAM9V,GAAN,CAAU,SAAU0B,KAAV,CAAiBU,IAAjB,CAAuB,CAC5C,SAASA,IAAF,EAAQgC,IAAR,CAAaoI,KAAb,CAAP,CACD,CAFY,EAEVV,OAFU,GAEA4J,MAFA,CAEO,SAAU5R,IAAV,CAAgB,CAClC,cAAgB,EAAhB,CACD,CAJY,CAAb;;;;AAUA,GAAIiS,OAAO7S,MAAP,GAAkB,CAAtB,CAAyB,CACvB,cAAgB,MAAhB;;AAGA,GAAI8S,YAAJ,CAAkB,CAChBC,UAAYrK,YAAUmK,OAAO,CAAP,CAAV,CAAqBxU,CAArB,CAAZ,CACD,CAFD,IAEO,CACL0U,UAAYF,OAAO,CAAP,CAAZ,CACD,CAED,MAAO,CACLG,EAAGD,SADE,CAAP,CAGD,CACF,CAnCD,CAqCA,IAAK,cAAgBE,eAAaC,UAAb,CAAhB,CAA0CR,KAA/C,CAAsD,EAAES,0BAA4B,CAACT,MAAQU,UAAUxU,IAAV,EAAT,EAA2ByU,IAAzD,CAAtD,CAAsHF,0BAA4B,IAAlJ,CAAwJ,CACtJ,SAAWG,OAAX,CAEA,GAAI,CAAC,WAAA,GAAgB,WAAhB,CAA8B,WAA9B,CAA4CC,UAAQC,IAAR,CAA7C,IAAgE,QAApE,CAA8E,YAAYR,CAAZ,CAC/E;CAGD,MAAO1G,GAAP,CAAY,CACZmH,kBAAoB,IAApB,CACAC,eAAiBpH,GAAjB,CACD,CAhDD,OAgDU,CACR,GAAI,CACF,GAAI,CAAC6G,yBAAD,EAA8BC,UAAUO,MAA5C,CAAoD,CAClDP,UAAUO,MAAV,GACD,CACF,CAJD,OAIU,CACR,GAAIF,iBAAJ,CAAuB,CACrB,oBAAA,CACD,CACF,CACF,CAED,WAAA,CACD,CAED,qBAAA,CAAoBrU,KAApB,CAA2BoJ,WAA3B,CAAwC;;AAGtC,GAAIpJ,MAAMW,QAAN,GAAiBC,MAAjB,CAA0BwI,WAA9B,CAA2C,CACzC,YAAA,CACD;AAED,GAAIoL,iBAAiBxU,KAAjB,CAAJ,CAA6B,CAC3B,YAAA,CACD,CAED,WAAA,CACD;;;AAKD,gCAAA,CAAiCf,CAAjC,CAAoCwV,SAApC,CAA+C,CAC7C,gBAAkBvI,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,CAAtF,CACA,aAAeA,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,IAAnF,CACA,8BAAgC,IAAhC,CACA,sBAAwB,KAAxB,CACA,mBAAqBpC,SAArB,CAEA,GAAI,CACF,IAAK,cAAgB+J,eAAaY,SAAb,CAAhB,CAAyCnB,KAA9C,CAAqD,EAAES,0BAA4B,CAACT,MAAQU,UAAUxU,IAAV,EAAT,EAA2ByU,IAAzD,CAArD,CAAqHF,0BAA4B,IAAjJ,CAAuJ,CACrJ,aAAeT,MAAMpJ,KAArB,CAEA,UAAYjL,EAAEtB,QAAF,CAAZ;;AAIA,GAAI6V,MAAM5S,MAAN,GAAiB,CAArB,CAAwB,CACtB,UAAY3B,EAAEuU,MAAM,CAAN,CAAF,CAAZ,CAEA,GAAIrK,aAAWnJ,KAAX,CAAkBoJ,WAAlB,CAAJ,CAAoC,CAClC,YAAc,MAAd,CACA,GAAIsL,QAAJ,CAAc,CACZ7M,QAAU7H,MAAMwB,IAAN,EAAV,CACD,CAFD,IAEO,CACLqG,QAAU7H,MAAMsB,IAAN,EAAV,CACD,CAED,GAAIuG,OAAJ,CAAa,CACX,cAAA,CACD,CACF,CACF,CACF,CACF,CAAC,MAAOqF,GAAP,CAAY,CACZmH,kBAAoB,IAApB,CACAC,eAAiBpH,GAAjB,CACD,CA5BD,OA4BU,CACR,GAAI,CACF,GAAI,CAAC6G,yBAAD,EAA8BC,UAAUO,MAA5C,CAAoD,CAClDP,UAAUO,MAAV,GACD,CACF,CAJD,OAIU,CACR,GAAIF,iBAAJ,CAAuB,CACrB,oBAAA,CACD,CACF,CACF,CAED,WAAA,CACD;AAGD,oBAAA,CAAmB7S,IAAnB,CAAyBvC,CAAzB,CAA4B;;AAG1B,cAAgBA,EAAE,SAAWuC,IAAX,CAAkB,SAApB,EAA+BA,IAA/B,EAAhB,CACA,mBAAqB,EAAd,CAAmBA,IAAnB,CAA0B+H,SAAjC,CACD,CAED,yBAAA,CAA0BvJ,KAA1B,CAAiC,CAC/B,YAAcA,MAAMgB,OAAN,GAAgBwI,OAAhB,EAAd,CACA,kBAAoBxI,QAAQyB,IAAR,CAAa,SAAU8C,MAAV,CAAkB,CACjD,UAAYpE,WAASoE,MAAT,CAAZ,CACA,cAAgBrE,MAAMyI,KAAtB,CACI3F,GAAK9C,MAAM8C,EADf,CAGA,eAAiB0F,UAAY,GAAZ,CAAkB1F,EAAnC,CACA,kBAAkB6F,QAAX,CAAoB,SAApB,CAAP,CACD,CAPmB,CAApB,CASA,uBAAyBC,SAAzB,CACD;;;AAMD,2BAAA,CAA0B9J,KAA1B,CAAiC,CAC/B,aAAawB,IAAN,GAAauD,IAAb,GAAoBnE,MAApB,EAA8B,GAArC,CACD,CAED,sBAAA,CAAqB3B,CAArB,CAAwB,CACtB,SAASR,gBAAF,EAAkBmC,MAAlB,CAA2B,CAAlC,CACD,CAED,mBAAA,CAAkBd,IAAlB,CAAwB,CACtB,YAAcA,KAAKiK,OAAnB,CACIC,WAAalK,KAAKkK,UADtB,CAIA,GAAI,CAACD,OAAD,EAAYC,UAAhB,CAA4B,CAC1B,UAAYwF,mBAAiBxF,UAAjB,EAA6BtH,MAA7B,CAAoC,SAAUC,GAAV,CAAevD,KAAf,CAAsB,CACpE,SAAW4K,WAAW5K,KAAX,CAAX,CAEAuD,IAAIb,KAAKmI,IAAT,EAAiBnI,KAAKoI,KAAtB,CACA,UAAA,CACD,CALW,CAKT,EALS,CAAZ,CAMA,YAAA,CACD,CAED,cAAA,CACD,CAED,kBAAA,CAAiBpK,IAAjB,CAAuBgC,IAAvB,CAA6BsI,GAA7B,CAAkC,CAChC,GAAItK,KAAKiK,OAAT,CAAkB,CAChBjK,KAAKiK,OAAL,CAAajI,IAAb,EAAqBsI,GAArB,CACD,CAFD,QAEWtK,KAAKkK,UAAT,CAAqB,CAC1BlK,KAAKuK,YAAL,CAAkBvI,IAAlB,CAAwBsI,GAAxB,EACD,CAED,WAAA,CACD,qBAGD,mBAAA,CAAkBtK,IAAlB,CAAwBoB,KAAxB,CAA+B,CAC7B,GAAIpB,KAAKiK,OAAT,CAAkB,CAChBjK,KAAKiK,OAAL,CAAe7I,KAAf,CACD,CAFD,QAEWpB,KAAKkK,UAAT,CAAqB,CAC1B,MAAOlK,KAAKkK,UAAL,CAAgBpJ,MAAhB,CAAyB,CAAhC,CAAmC,CACjCd,KAAKyK,eAAL,CAAqBzK,KAAKkK,UAAL,CAAgB,CAAhB,EAAmBC,IAAxC,EACD,oBAAiB/I,KAAjB,EAAwB6H,OAAxB,CAAgC,SAAU1H,GAAV,CAAe,CAC9CvB,KAAKuK,YAAL,CAAkBhJ,GAAlB,CAAuBH,MAAMG,GAAN,CAAvB,EACD,CAFA,EAGF,CAED,WAAA,CACD;AAID,YAAc,UAAA,CAAW,WAAX,CAAwB,GAAxB,CAAd,CACA,aAAe,UAAA,CAAW,kBAAX,CAA+B,GAA/B,CAAf,CAEA,mBAAqB,CAAC,QAAD,CAAW,OAAX,CAAoB,MAApB,EAA4BxD,IAA5B,CAAiC,GAAjC,CAArB;;;;;AAOA,gCAAA,CAAiCoB,CAAjC,CAAoC,CAClCA,EAAE,KAAF,EAASE,IAAT,CAAc,SAAUsJ,CAAV,CAAagH,GAAb,CAAkB,CAC9B,UAAYtO,WAASsO,GAAT,CAAZ,CAEAD,mBAAiBtO,KAAjB,EAAwB6H,OAAxB,CAAgC,SAAUjH,IAAV,CAAgB,CAC9C,UAAYZ,MAAMY,IAAN,CAAZ,CAEA,GAAIA,OAAS,KAAT,EAAkB6S,QAAQvU,IAAR,CAAa8J,KAAb,CAAlB,EAAyC0K,SAASxU,IAAT,CAAc8J,KAAd,CAA7C,CAAmE,CACjEjL,EAAEwQ,GAAF,EAAO3N,IAAP,CAAY,KAAZ,CAAmBoI,KAAnB,EACD,CACF,CAND,EAOD,CAVD,EAYA,QAAA,CACD,CAED,kBAAA,CAAmB9K,KAAnB,CAA0BU,IAA1B,CAAgC,CAC9B,YAAYyT,IAAL,GAAc,SAArB,CACD,CAED,sBAAA,CAAuBtU,CAAvB,CAA0B,CACxBA,EAAE,GAAF,EAAOwI,KAAP,GAAehG,QAAf,GAA0B2R,MAA1B,CAAiCyB,SAAjC,EAA4CjV,MAA5C,GAEA,QAAA,CACD,CAED,cAAA,CAAeX,CAAf,CAAkB,CAChBA,EAAE6V,cAAF,EAAkBlV,MAAlB,GAEAX,EAAI8V,cAAc9V,CAAd,CAAJ,CACA,QAAA,CACD,CAED,aAAe;;;;;;AAQb+V,OAAQ,eAAA,CAAgBtM,GAAhB,CAAqBuM,gBAArB,CAAuCnH,SAAvC,CAAkD,CACxD,UAAY,IAAZ,CAEA,yBAAyB9B,oBAAoBC,IAApB,CAAyB,gBAAA,EAAmB,CACnE,UAAA,CAAYiJ,aAAZ,CACA,2BAA2B/I,IAApB,CAAyB,iBAAA,CAAkBC,QAAlB,CAA4B,CAC1D,MAAO,CAAP,CAAU,CACR,OAAQA,SAAShE,IAAT,CAAgBgE,SAAS5M,IAAjC,EACE,MAAA,CACE2V,OAAS,MAAT,CAEA,GAAI,CAACF,gBAAL,CAAuB,CACrB7I,SAAS5M,IAAT,CAAgB,CAAhB,CACA,MACD,CAED0V,cAAgB,CACd7H,cAAe,IADD,CAEdC,WAAY,GAFE,CAGdE,QAAS,CACP,eAAgB,WADT,CAEP,iBAAkB,GAFX,CAHK,CAAhB,CAUA2H,OAAS,CAAE/H,KAAM6H,gBAAR,CAA0B9H,SAAU+H,aAApC,CAAT,CACA9I,SAAS5M,IAAT,CAAgB,CAAhB,CACA,MAEF,MAAA,CACE4M,SAAS5M,IAAT,CAAgB,CAAhB,CACA,uBAAuBkJ,GAAhB,CAAqBoF,SAArB,CAAP,CAEF,MAAA,CACEqH,OAAS/I,SAASsC,IAAlB,CAEF,MAAA,CACE,GAAI,CAACyG,OAAOvI,KAAZ,CAAmB,CACjBR,SAAS5M,IAAT,CAAgB,EAAhB,CACA,MACD,CAED,gBAAgBoP,MAAT,CAAgB,QAAhB,CAA0BuG,MAA1B,CAAP,CAEF,OAAA,CACE,gBAAgBvG,MAAT,CAAgB,QAAhB,CAA0BwG,MAAMC,WAAN,CAAkBF,MAAlB,CAA1B,CAAP,CAEF,OAAA,CACA,IAAK,KAAL,CACE,gBAAgB5I,IAAT,EAAP,CA3CJ,CA6CD,CACF,CAhDM,CAgDJwC,OAhDI,CAgDKqG,KAhDL,CAAP,CAiDD,CAnDwB,CAAlB,GAAP,CAoDD,CA/DY,CAgEbC,YAAa,oBAAA,CAAqB5I,IAArB,CAA2B,CACtC,YAAcA,KAAKW,IAAnB,CACID,SAAWV,KAAKU,QADpB,CAEA,gBAAkBA,SAASK,OAAT,CAAiB,cAAjB,CAAlB;;AAKA,GAAI,CAACC,YAAY5D,QAAZ,CAAqB,MAArB,CAAD,EAAiC,CAAC4D,YAAY5D,QAAZ,CAAqB,MAArB,CAAtC,CAAoE,CAClE,eAAM,CAAU,qCAAV,CAAN,CACD,CAED,MAAQyL,UAAQC,IAAR,CAAa1N,OAAb,CAAsB,CAAE2N,oBAAqB,IAAvB,CAAtB,CAAR,CAEA,GAAIvW,EAAE,GAAF,EAAOwI,KAAP,GAAe9G,QAAf,GAA0BC,MAA1B,GAAqC,CAAzC,CAA4C,CAC1C,eAAM,CAAU,kCAAV,CAAN,CACD,CAED3B,EAAIwW,kBAAkBxW,CAAlB,CAAJ,CACAA,EAAIyW,wBAAwBzW,CAAxB,CAAJ,CACAA,EAAI0W,MAAM1W,CAAN,CAAJ,CAEA,QAAA,CACD,CAvFY,CAAf,CA0FA,UAAY,cAAA,CAAe2W,SAAf,CAA0BC,OAA1B,CAAmC,CAC7C,eAAenT,MAAR,CAAe,SAAUC,GAAV,CAAemT,MAAf,CAAuB,CAC3CnT,IAAImT,MAAJ,EAAcF,SAAd,CACA,UAAA,CACD,CAHM,CAGJ,EAHI,CAAP,CAID,CALD,CAOA,8BAAA,CAA+BA,SAA/B,CAA0C,CACxC,iBAAiBG,gBAAV,CAA6BC,MAAMJ,SAAN,CAAiB,CAACA,UAAUE,MAAX,EAAmBlG,MAAnB,CAA0BC,qBAAmB+F,UAAUG,gBAA7B,CAA1B,CAAjB,CAA7B,CAA2HC,MAAMJ,SAAN,CAAiB,CAACA,UAAUE,MAAX,CAAjB,CAAlI,CACD,CAED,qBAAuB,CACrBA,OAAQ,cADa,CAErBjO,QAAS;;;AAIP4M,UAAW,CAAC,wBAAD,CAJJ;AAOPkB,MAAO,EAPA;AAUPM,WAAY,CACVC,SAAU,KADA,CAVL,CAFY,CAiBrBC,OAAQ,CACN1B,UAAW,CAAC,mBAAD,CADL,CAjBa,CAqBrBxB,MAAO,CACLwB,UAAW,CAAC,gBAAD,CADN,CArBc,CAyBrB2B,eAAgB,CACd3B,UAAW,CAAC,kBAAD,CADG,CAzBK,CAAvB,CA8BA,mBAAqB,CACnBqB,OAAQ,WADW,CAEnBjO,QAAS;AAEP4M,UAAW,CAAC,qBAAD,CAAwB,cAAxB,CAAwC,iBAAxC,CAFJ;AAKPkB,MAAO,CAAC,KAAD,CAAQ,uBAAR,CALA;;;;;;AAaPM,WAAY;AAEVI,GAAI,IAFM;AAKVH,SAAU,iBAAA,CAAkBlW,KAAlB,CAAyBf,CAAzB,CAA4B,CACpC,GAAIA,EAAEsC,OAAN,CAAe,CACb,cAAgBtC,EAAEe,MAAMwB,IAAN,EAAF,CAAhB,CAEA,GAAI8U,UAAU1V,MAAV,GAAqB,CAArB,EAA0B0V,UAAU7W,GAAV,CAAc,CAAd,IAAqBqK,SAA/C,EAA4DwM,UAAU7W,GAAV,CAAc,CAAd,EAAiBC,OAAjB,CAAyBC,WAAzB,KAA2C,KAA3G,CAAkH,CAChH,MAAO,QAAP,CACD,CACF,CAND,IAMO,CACL,eAAiBK,MAAMW,QAAN,EAAjB,CACA,GAAI4V,WAAW3V,MAAX,GAAsB,CAAtB,EAA2B2V,WAAW9W,GAAX,CAAe,CAAf,EAAkBC,OAAlB,GAA8B,KAA7D,CAAoE,CAClE,MAAO,QAAP,CACD,CACF,CAED,WAAA,CACD,CApBS,CAbL,CAFU,CAuCnBuT,MAAO,CACLwB,UAAW,CAAC,uBAAD,CAA0B,qBAA1B,CAAiD,IAAjD,CADN,CAvCY,CA2CnB0B,OAAQ,CACN1B,UAAW,CAAC,aAAD,CAAgB,sBAAhB,CADL,CA3CW,CA+CnB+B,IAAK,CACH/B,UAAW,CAAC,sBAAD,CADR,CA/Cc,CAmDnB2B,eAAgB,CACd3B,UAAW,CAAC,CAAC,kCAAD,CAAqC,UAArC,CAAD,CAAmD,wBAAnD,CADG,CAnDG,CAArB,CAwDA,uBAAyB,CACvBqB,OAAQ,eADe,CAEvBjO,QAAS,CACP4M,UAAW,CAAC,kBAAD,CADJ,CAGPgC,eAAgB,KAHT;AAMPR,WAAY,CACV,eAAgB,mBAAA,CAAoBjW,KAApB,CAA2B,CACzC,YAAcA,MAAMgB,OAAN,CAAc,UAAd,CAAd;AAEA,GAAI4E,QAAQjF,QAAR,CAAiB,KAAjB,EAAwBC,MAAxB,GAAmC,CAAvC,CAA0C,CACxCgF,QAAQ8Q,OAAR,CAAgB1W,KAAhB,EACD,CACF,CAPS,CAQV,mBAAoB,YARV,CASV,WAAY,QATF,CANL;AAmBP2V,MAAO,CAAC,iBAAD,CAAoB,oCAApB,CAA0D,MAA1D,CAAkE,SAAlE,CAnBA,CAFc,CAyBvBQ,OAAQ,wBAzBe,CA2BvBlD,MAAO,CACLwB,UAAW,CAAC,UAAD,CADN,CA3BgB,CA+BvB2B,eAAgB,CACd3B,UAAW,CAAC,sBAAD,CADG,CA/BO,CAAzB,CAqCA,qBAAuB,CACrBqB,OAAQ,aADa,CAGrBjO,QAAS,CACPoO,WAAY;;;;AAKV,wBAAyB,0BAAA,CAA2BjW,KAA3B,CAAkCf,CAAlC,CAAqC,CAC5D,WAAae,MAAMyC,IAAN,CAAW,QAAX,CAAb,CACA,oBAAsBxD,EAAE,iCAAF,CAAtB,CACA0X,gBAAgBzP,MAAhB,CAAuB0P,MAAvB,EACA5W,MAAMM,WAAN,CAAkBqW,eAAlB,EACD,CAVS;;AAcVE,EAAG,MAdO,CADL,CAkBPpC,UAAW,CAAC,uBAAD,CAlBJ,CAoBPgC,eAAgB,KApBT,CAsBPd,MAAO,CAAC,qBAAD,CAAwB,QAAxB,CAAkC,sBAAlC,CAtBA,CAHY,CA4BrBQ,OAAQ,CACN1B,UAAW,CAAC,kCAAD,CADL,CA5Ba,CAgCrB2B,eAAgB,CACd3B,UAAW,CAAC,CAAC,4CAAD,CAA+C,cAA/C,CAAD,CADG,CAhCK,CAAvB,CAsCA,qBAAuB,CACrBqB,OAAQ,iBADa,CAGrB7C,MAAO,CACLwB,UAAW,CAAC,aAAD,CAAgB,aAAhB,CADN,CAHc,CAOrB0B,OAAQ,CACN1B,UAAW,CAAC,CAAC,qBAAD,CAAwB,OAAxB,CAAD,CAAmC,WAAnC,CAAgD,SAAhD,CADL,CAPa,CAWrB5M,QAAS,CACP4M,UAAW,CAAC,cAAD,CAAiB,eAAjB,CADJ,CAGPgC,eAAgB,KAHT,CAKPR,WAAY,CACV,aAAc,iBAAA,CAAkBjW,KAAlB,CAAyB,CACrC,QAAUA,MAAM8B,IAAN,CAAW,KAAX,CAAV;;;;;;;;;AAUA,UAAY,GAAZ,CAEAgV,IAAMA,IAAI9Q,OAAJ,CAAY,UAAZ,CAAwBjE,KAAxB,CAAN,CACA/B,MAAM8B,IAAN,CAAW,KAAX,CAAkBgV,GAAlB,EACD,CAhBS,CALL,CAwBPnB,MAAO,CAAC,KAAD,CAAQ,qBAAR,CAA+B,2BAA/B,CAA4D,kBAA5D,CAAgF,mBAAhF,CAAqG,QAArG,CAA+G,kBAA/G,CAAmI,SAAnI,CAxBA,CAXY,CAsCrBS,eAAgB,IAtCK,CAwCrBW,eAAgB,IAxCK,CA0CrBP,IAAK,IA1CgB,CA4CrBQ,cAAe,IA5CM,CA8CrBC,QAAS,IA9CY,CAAvB;;AAmDA,yBAA2B,CACzBnB,OAAQ,qBADiB,CAEzB7C,MAAO,CACLwB,UAAW,CAAC,QAAD,CADN,CAFkB,CAMzB0B,OAAQ,CACN1B,UAAW,CAAC,0DAAD,CADL,CANiB,CAUzB5M,QAAS,CACP4M,UAAW,CAAC,eAAD,CADJ;;AAKPwB,WAAY,EALL;;;AAUPN,MAAO,EAVA,CAVgB,CAuBzBS,eAAgB,CACd3B,UAAW,CAAC,CAAC,gCAAD,CAAmC,UAAnC,CAAD,CADG,CAvBS,CA2BzBsC,eAAgB,IA3BS,CA6BzBP,IAAK,IA7BoB,CA+BzBQ,cAAe,IA/BU,CAiCzBC,QAAS,IAjCgB,CAA3B;;;AAuCA,uBAAyB,CACvBnB,OAAQ,mBADe,CAEvB7C,MAAO,CACLwB,UAAW,CAAC,UAAD,CADN,CAFgB,CAMvB0B,OAAQ,CACN1B,UAAW,CAAC,eAAD,CADL,CANe,CAUvB5M,QAAS,CACP4M,UAAW,CAAC,iBAAD,CAAoB,iBAApB,CADJ;;AAKPwB,WAAY,EALL;;;AAUPN,MAAO,EAVA,CAVc,CAuBvBS,eAAgB,CACd3B,UAAW,CAAC,CAAC,qCAAD,CAAwC,OAAxC,CAAD,CADG,CAvBO,CA2BvBsC,eAAgB,CACdtC,UAAW,CAAC,CAAC,uBAAD,CAA0B,OAA1B,CAAD,CADG,CA3BO,CA+BvB+B,IAAK,CACH/B,UAAW,CAAC,CAAC,6BAAD,CAAgC,OAAhC,CAAD,CADR,CA/BkB,CAmCvBuC,cAAe,IAnCQ,CAqCvBC,QAAS,IArCc,CAAzB;;;AA2CA,mBAAqB,CACnBnB,OAAQ,eADW,CAEnB7C,MAAO,CACLwB,UAAW,CAAC,eAAD,CADN,CAFY,CAMnB0B,OAAQ,CACN1B,UAAW,CAAC,iBAAD,CADL,CANW,CAUnB5M,QAAS,CACP4M,UAAW,CAAC,iBAAD,CADJ;;AAKPwB,WAAY,EALL;;;AAUPN,MAAO,CAAC,kBAAD,CAVA,CAVU,CAuBnBS,eAAgB,CACd3B,UAAW,CAAC,CAAC,gCAAD,CAAmC,OAAnC,CAAD,CADG,CAvBG,CA2BnBsC,eAAgB,CACdtC,UAAW,CAAC,CAAC,uBAAD,CAA0B,OAA1B,CAAD,CADG,CA3BG,CA+BnB+B,IAAK,CACH/B,UAAW,CAAC,CAAC,6BAAD,CAAgC,OAAhC,CAAD,CADR,CA/Bc,CAmCnBuC,cAAe,IAnCI,CAqCnBC,QAAS,IArCU,CAArB;;;AA2CA,iBAAmB,CACjBnB,OAAQ,aADS,CAEjB7C,MAAO,CACLwB,UAAW,CAAC,IAAD,CADN,CAFU,CAMjB0B,OAAQ,CACN1B,UAAW,CAAC,qBAAD,CADL,CANS,CAUjB5M,QAAS,CACP4M,UAAW,CAAC,cAAD,CADJ;;AAKPwB,WAAY,EALL;;;AAUPN,MAAO,CAAC,cAAD,CAVA,CAVQ,CAuBjBS,eAAgB,CACd3B,UAAW,CAAC,WAAD,CADG,CAvBC,CA2BjBsC,eAAgB,CACdtC,UAAW,EADG,CA3BC,CA+BjB+B,IAAK,CACH/B,UAAW,CAAC,CAAC,0BAAD,CAA6B,OAA7B,CAAD,CADR,CA/BY,CAmCjBuC,cAAe,IAnCE,CAqCjBC,QAAS,IArCQ,CAAnB;;;AA2CA,mBAAqB,CACnBnB,OAAQ,eADW,CAEnB7C,MAAO,CACLwB,UAAW,CAAC,sBAAD,CADN,CAFY,CAMnB0B,OAAQ,CACN1B,UAAW,CAAC,oBAAD,CADL,CANW,CAUnB5M,QAAS,CACP4M,UAAW;AAEX,iBAFW,CADJ;;AAOPwB,WAAY,EAPL;;;AAYPN,MAAO,CAAC,iBAAD,CAZA,CAVU,CAyBnBS,eAAgB,CACd3B,UAAW,CAAC,CAAC,qBAAD,CAAwB,UAAxB,CAAD,CADG,CAzBG,CA6BnBsC,eAAgB,CACdtC,UAAW,CAAC,CAAC,uBAAD,CAA0B,OAA1B,CAAD,CADG,CA7BG,CAiCnB+B,IAAK,CACH/B,UAAW,CAAC,CAAC,6BAAD,CAAgC,OAAhC,CAAD,CADR,CAjCc,CAqCnBuC,cAAe,IArCI,CAuCnBC,QAAS,IAvCU,CAArB;;;AA6CA,sBAAwB,CACtBnB,OAAQ,kBADc,CAEtB7C,MAAO,CACLwB,UAAW,CAAC,qBAAD,CADN,CAFe,CAMtB0B,OAAQ,CACN1B,UAAW,CAAC,gCAAD,CAAmC,gBAAnC,CADL,CANc,CAUtB5M,QAAS,CACP4M,UAAW,CAAC,gBAAD,CADJ,CAGPgC,eAAgB,KAHT;;AAOPR,WAAY,CACViB,GAAI,GADM,CAPL;;;AAcPvB,MAAO,CAAC,oBAAD,CAAuB,uEAAvB,CAAgG,YAAhG,CAdA,CAVa,CA2BtBS,eAAgB,CACd3B,UAAW,CAAC,gBAAD,CADG,CA3BM,CA+BtBsC,eAAgB,CACdtC,UAAW,CAAC,CAAC,uBAAD,CAA0B,OAA1B,CAAD,CADG,CA/BM,CAmCtB+B,IAAK,CACH/B,UAAW,CAAC,CAAC,0BAAD,CAA6B,OAA7B,CAAD,CADR,CAnCiB,CAuCtBuC,cAAe,IAvCO,CAyCtBC,QAAS,IAzCa,CAAxB;;;AA+CA,mBAAqB,CACnBnB,OAAQ,kBADW,CAEnB7C,MAAO,CACLwB,UAAW,CAAC,gBAAD,CADN,CAFY,CAMnB0B,OAAQ,CACN1B,UAAW,CAAC,eAAD,CAAkB,KAAlB,CADL,CANW,CAUnB5M,QAAS,CACP4M,UAAW,CAAC,eAAD,CAAkB,gBAAlB,CADJ;;AAKPwB,WAAY,EALL;;;AAUPN,MAAO,EAVA,CAVU,CAuBnBS,eAAgB,CACd3B,UAAW,CAAC,CAAC,qCAAD,CAAwC,OAAxC,CAAD,CADG,CAvBG,CA2BnBsC,eAAgB,CACdtC,UAAW,CAAC,CAAC,uBAAD,CAA0B,OAA1B,CAAD,CADG,CA3BG,CA+BnB+B,IAAK,CACH/B,UAAW,CAAC,CAAC,6BAAD,CAAgC,OAAhC,CAAD,CADR,CA/Bc,CAmCnBuC,cAAe,IAnCI,CAqCnBC,QAAS,IArCU,CAArB;;;AA2CA,0BAA4B,CAC1BnB,OAAQ,sBADkB,CAE1B7C,MAAO,CACLwB,UAAW,CAAC,eAAD,CADN,CAFmB,CAM1B0B,OAAQ,CACN1B,UAAW,CAAC,CAAC,qBAAD,CAAwB,OAAxB,CAAD,CADL,CANkB,CAU1B5M,QAAS,CACP4M,UAAW;AAEX,mBAFW,CAEU,kBAFV,CADJ;;AAOPwB,WAAY,EAPL;;;AAYPN,MAAO,EAZA,CAViB,CAyB1BoB,eAAgB,CACdtC,UAAW,CAAC,CAAC,uBAAD,CAA0B,OAA1B,CAAD,CADG,CAzBU,CA6B1BuC,cAAe,IA7BW,CA+B1BC,QAAS,IA/BiB,CAA5B;;;AAqCA,sBAAwB,CACtBnB,OAAQ,kBADc,CAEtB7C,MAAO,CACLwB,UAAW;AAEX,CAAC,uBAAD,CAA0B,OAA1B,CAFW,CADN,CAFe,CAQtB0B,OAAQ,CACN1B,UAAW,CAAC,oCAAD,CADL,CARc,CAYtB5M,QAAS,CACP4M,UAAW;AAEX,qBAFW,CAEY,gBAFZ,CAE8B,aAF9B,CAE6C,aAF7C,CADJ;;AAOPwB,WAAY,EAPL;;;AAYPN,MAAO,CAAC,YAAD,CAZA,CAZa,CA2BtBS,eAAgB,CACd3B,UAAW,CAAC,CAAC,+CAAD,CAAkD,UAAlD,CAAD,CADG,CA3BM,CA+BtBsC,eAAgB,CACdtC,UAAW;AAEX,CAAC,uBAAD,CAA0B,OAA1B,CAFW,CADG,CA/BM,CAqCtB+B,IAAK,CACH/B,UAAW,CAAC,CAAC,0BAAD,CAA6B,OAA7B,CAAD,CADR,CArCiB,CAyCtBuC,cAAe,IAzCO,CA2CtBC,QAAS,IA3Ca,CAAxB,CA8CA,sBAAwB,CACtBnB,OAAQ,cADc,CAGtBC,iBAAkB,CAAC,aAAD,CAAgB,gBAAhB,CAAkC,YAAlC,CAAgD,aAAhD,CAA+D,cAA/D,CAA+E,WAA/E,CAHI,CAKtB9C,MAAO,CACLwB,UAAW,CAAC,aAAD,CADN,CALe,CAStB0B,OAAQ,CACN1B,UAAW,CAAC,SAAD,CADL,CATc,CAatB5M,QAAS,CACP4M,UAAW,CAAC,eAAD,CAAkB,gBAAlB,CADJ;;AAKPwB,WAAY,CACV,mDAAoD,6CAAA,CAA8CjW,KAA9C,CAAqD,CACvG,cAAgBA,MAAM8B,IAAN,CAAW,IAAX,EAAiBkQ,KAAjB,CAAuB,UAAvB,EAAmC,CAAnC,CAAhB,CACAhS,MAAM8B,IAAN,CAAW,KAAX,CAAkB,iCAAmCqV,SAArD,EACD,CAJS,CALL;;;AAePxB,MAAO,EAfA,CAba,CA+BtBS,eAAgB,CACd3B,UAAW,CAAC,CAAC,wBAAD,CAA2B,UAA3B,CAAD,CADG,CA/BM,CAmCtBsC,eAAgB,CACdtC,UAAW,CAAC,CAAC,uBAAD,CAA0B,OAA1B,CAAD,CADG,CAnCM,CAuCtB+B,IAAK,CACH/B,UAAW;CADR,CAvCiB,CA6CtBuC,cAAe,CACbvC,UAAW;CADE,CA7CO,CAmDtBwC,QAAS,CACPxC,UAAW;CADJ,CAnDa,CAAxB;;;AA6DA,2BAA6B,CAC3BqB,OAAQ,uBADmB,CAE3B7C,MAAO,CACLwB,UAAW,CAAC,kBAAD,CADN,CAFoB,CAM3B0B,OAAQ,CACN1B,UAAW,CAAC,uBAAD,CADL,CANmB,CAU3B5M,QAAS,CACP4M,UAAW,CAAC,2BAAD,CADJ;;AAKPwB,WAAY,EALL;;;AAUPN,MAAO,EAVA,CAVkB,CAuB3BS,eAAgB,CACd3B,UAAW,CAAC,CAAC,8BAAD,CAAiC,OAAjC,CAAD,CADG,CAvBW,CA2B3BsC,eAAgB,CACdtC,UAAW,CAAC,CAAC,uBAAD,CAA0B,OAA1B,CAAD,CADG,CA3BW,CA+B3B+B,IAAK,CACH/B,UAAW,CAAC,CAAC,6BAAD,CAAgC,OAAhC,CAAD,CADR,CA/BsB,CAmC3BuC,cAAe,CACbvC,UAAW;CADE,CAnCY,CAyC3BwC,QAAS,CACPxC,UAAW;CADJ,CAzCkB,CAA7B;;;AAmDA,8BAAgC,CAC9BqB,OAAQ,0BADsB,CAE9B7C,MAAO,CACLwB,UAAW,CAAC,aAAD,CADN,CAFuB,CAM9B0B,OAAQ,CACN1B,UAAW,CAAC,mBAAD,CADL,CANsB,CAU9B5M,QAAS,CACP4M,UAAW,CAAC,mBAAD,CADJ;;AAKPwB,WAAY,CACV,iDAAkD,8CAAA,CAA+CjW,KAA/C,CAAsDf,CAAtD,CAAyD,CACzG,SAAWmY,KAAKpJ,KAAL,CAAWhO,MAAM8B,IAAN,CAAW,YAAX,CAAX,CAAX,CACA,QAAUuV,KAAKC,OAAL,CAAa,CAAb,EAAgBR,GAA1B,CAEA,SAAW7X,EAAE,SAAF,EAAa6C,IAAb,CAAkB,KAAlB,CAAyBgV,GAAzB,CAAX,CACA9W,MAAMM,WAAN,CAAkBqB,IAAlB,EACD,CAPS,CALL;;;AAkBPgU,MAAO,EAlBA,CAVqB,CA+B9BS,eAAgB,CACd3B,UAAW,CAAC,CAAC,kCAAD,CAAqC,UAArC,CAAD,CADG,CA/Bc,CAmC9BsC,eAAgB,CACdtC,UAAW,CAAC,CAAC,uBAAD,CAA0B,OAA1B,CAAD,CADG,CAnCc,CAuC9B+B,IAAK,CACH/B,UAAW,CAAC,CAAC,wBAAD,CAA2B,OAA3B,CAAD,CADR,CAvCyB,CA2C9BuC,cAAe,CACbvC,UAAW;CADE,CA3Ce,CAiD9BwC,QAAS,CACPxC,UAAW;CADJ,CAjDqB,CAAhC,CAwDA,oBAAsB,CACpBqB,OAAQ,YADY,CAGpBC,iBAAkB,CAAC,4BAAD,CAHE,CAKpB9C,MAAO,CACLwB,UAAW,CAAC,IAAD,CADN,CALa,CASpB0B,OAAQ,CACN1B,UAAW,CAAC,CAAC,qBAAD,CAAwB,OAAxB,CAAD,CADL,CATY,CAapB5M,QAAS,CACP4M,UAAW,CAAC,kBAAD,CADJ;;AAKPwB,WAAY;AAEVsB,OAAQ,eAAA,CAAgBvX,KAAhB,CAAuB,CAC7B,SAAW,kEAAX,CACA,UAAYwX,mBAAmBxX,MAAM8B,IAAN,CAAW,gBAAX,CAAnB,CAAZ,CAEA,GAAI2V,KAAKrX,IAAL,CAAUsX,KAAV,CAAJ,CAAsB,CACpB,iBAAmBA,MAAMrT,KAAN,CAAYoT,IAAZ,CAAnB,CACIE,cAAgBrG,iBAAesG,YAAf,CAA6B,CAA7B,CADpB,CAEInP,EAAIkP,cAAc,CAAd,CAFR,CAGIR,UAAYQ,cAAc,CAAd,CAHhB;AAMA3X,MAAM8B,IAAN,CAAW,KAAX,CAAkB,iCAAmCqV,SAArD,EACA,YAAcnX,MAAMgB,OAAN,CAAc,QAAd,CAAd,CACA4E,QAAQ8Q,OAAR,CAAgB1W,MAAM6X,KAAN,EAAhB,EACA7X,MAAMJ,MAAN,GACD,CACF,CAlBS,CALL;;;AA6BP+V,MAAO,EA7BA,CAbW,CA6CpBS,eAAgB,CACd3B,UAAW,CAAC,CAAC,gBAAD,CAAmB,UAAnB,CAAD,CADG,CA7CI,CAiDpBsC,eAAgB,CACdtC,UAAW,CAAC,CAAC,uBAAD,CAA0B,OAA1B,CAAD,CADG,CAjDI,CAqDpB+B,IAAK,CACH/B,UAAW;CADR,CArDe,CA2DpBuC,cAAe,CACbvC,UAAW;CADE,CA3DK,CAiEpBwC,QAAS,CACPxC,UAAW;CADJ,CAjEW,CAAtB,CA0EA,qBAAuB,eAAc,CACpCqD,iBAAkBA,gBADkB,CAEpCC,eAAgBA,cAFoB,CAGpCC,mBAAoBA,kBAHgB,CAIpCC,iBAAkBA,gBAJkB,CAKpCC,iBAAkBA,gBALkB,CAMpCC,qBAAsBA,oBANc,CAOpCC,mBAAoBA,kBAPgB,CAQpCC,eAAgBA,cARoB,CASpCC,aAAcA,YATsB,CAUpCC,eAAgBA,cAVoB,CAWpCC,kBAAmBA,iBAXiB,CAYpCC,eAAgBA,cAZoB,CAapCC,sBAAuBA,qBAba,CAcpCC,kBAAmBA,iBAdiB,CAepCC,kBAAmBA,iBAfiB,CAgBpCC,uBAAwBA,sBAhBY,CAiBpCC,0BAA2BA,yBAjBS,CAkBpCC,gBAAiBA,eAlBmB,CAAd,CAAvB,CAqBA,eAAiBC,aAAaC,gBAAb,EAA+BvW,MAA/B,CAAsC,SAAUC,GAAV,CAAetB,GAAf,CAAoB,CACzE,cAAgB4X,iBAAiB5X,GAAjB,CAAhB,CACA,kBAAgB,EAAT,CAAasB,GAAb,CAAkBuW,sBAAsBtD,SAAtB,CAAlB,CAAP,CACD,CAHgB,CAGd,EAHc,CAAjB;AAMA,oBAAsB,wCAAtB;;AAIA,iBAAmB,UAAA,CAAW,aAAX,CAA0B,GAA1B,CAAnB;;;;;;;;;;;;;;;AAoBA,mBAAqB,WAArB,CACA,oBAAsB,WAAtB,CACA,yBAA2B,4BAA3B,CACA,2BAA6B,oBAA7B,CACA,0BAA4B,QAA5B,CACA,WAAa,CAAC,KAAD,CAAQ,KAAR,CAAe,KAAf,CAAsB,KAAtB,CAA6B,KAA7B,CAAoC,KAApC,CAA2C,KAA3C,CAAkD,KAAlD,CAAyD,KAAzD,CAAgE,KAAhE,CAAuE,KAAvE,CAA8E,KAA9E,CAAb,CACA,cAAgBuD,OAAOtb,IAAP,CAAY,GAAZ,CAAhB,CACA,eAAiB,qCAAjB,CACA,eAAiB,wCAAjB,CACA,sBAAwB,UAAA,CAAW,IAAMub,UAAN,CAAmB,KAAnB,CAA2BC,UAA3B,CAAwC,kBAAxC,CAA6DC,SAA7D,CAAyE,GAApF,CAAyF,IAAzF,CAAxB;;;AAKA,uBAAyB,gBAAzB,CAEA,sBAAwB,UAAA,CAAW,2BAAX,CAAwC,GAAxC,CAAxB;;AAIA,oBAAA,CAAqBnD,MAArB,CAA6B,CAC3B,cAAcnQ,OAAP,CAAeuT,eAAf,CAAgC,IAAhC,EAAsCxU,IAAtC,EAAP,CACD,CAED,gBAAA,CAAiByU,YAAjB,CAA+B,CAC7BA,aAAeA,aAAazU,IAAb,EAAf,CACA,GAAI0U,WAASC,QAAT,CAAkBF,YAAlB,CAAJ,CAAqC,CACnC,mBAAA,CACD,CAED,WAAA,CACD;;AAID,iBAAA,CAAkBhD,GAAlB,CAAuB/J,IAAvB,CAA6B,CAC3B,MAAQA,KAAKxN,CAAb,CACIgY,QAAUxK,KAAKwK,OADnB;AAIA,GAAIT,IAAI5V,MAAJ,CAAa,IAAb,EAAqB4V,IAAI5V,MAAJ,CAAa,CAAtC,CAAyC,WAAA;AAGzC,GAAIqW,SAAW0C,iBAAe1C,OAAf,CAAwB,EAAxB,IAAgC0C,iBAAenD,GAAf,CAAoB,EAApB,CAA/C,CAAwE,WAAA,CAExE,YAAclN,YAAUkN,GAAV,CAAevX,CAAf,CAAd;;AAIA,GAAI2a,aAAaxZ,IAAb,CAAkByZ,OAAlB,CAAJ,CAAgC,WAAA,CAEhC,eAAe9U,IAAR,EAAP,CACD;;;AAMD,wBAAA,CAAyB+U,UAAzB,CAAqC,CACnC,MAAO,CAACA,WAAWzV,KAAX,CAAiB0V,iBAAjB,GAAuC,EAAxC,EAA4Clc,IAA5C,CAAiD,GAAjD,EAAsDmI,OAAtD,CAA8DgU,qBAA9D,CAAqF,GAArF,EAA0FhU,OAA1F,CAAkGiU,sBAAlG,CAA0H,UAA1H,EAAsIjU,OAAtI,CAA8IkU,oBAA9I,CAAoK,IAApK,EAA0KnV,IAA1K,EAAP,CACD;;AAID,2BAAA,CAA4B+U,UAA5B,CAAwC;AAEtC,GAAIK,eAAe/Z,IAAf,CAAoB0Z,UAApB,GAAmCM,gBAAgBha,IAAhB,CAAqB0Z,UAArB,CAAvC,CAAyE,CACvEA,WAAajY,SAASiY,UAAT,CAAqB,EAArB,CAAb,CACD,CAED,SAAWO,SAAO,QAAA,CAASP,UAAT,CAAP,CAAX,CAEA,GAAI,CAACQ,KAAKC,OAAL,EAAL,CAAqB,CACnBT,WAAaU,gBAAgBV,UAAhB,CAAb,CACAQ,KAAOD,SAAO,QAAA,CAASP,UAAT,CAAP,CAAP,CACD,CAED,YAAYS,OAAL,GAAiBD,KAAKG,WAAL,EAAjB,CAAsC,IAA7C,CACD;AAID,yBAAA,CAA0BtY,OAA1B,CAAmCsK,IAAnC,CAAyC,CACvC,MAAQA,KAAKxN,CAAb,CACIyb,sBAAwBjO,KAAKkO,kBADjC,CAEIA,mBAAqBD,wBAA0B5Q,SAA1B,CAAsC,IAAtC,CAA6C4Q,qBAFtE,CAGIE,WAAanO,KAAKwG,KAHtB,CAIIA,MAAQ2H,aAAe9Q,SAAf,CAA2B,EAA3B,CAAgC8Q,UAJ5C,CAKIC,SAAWpO,KAAK/D,GALpB,CAMIA,IAAMmS,WAAa/Q,SAAb,CAAyB,EAAzB,CAA8B+Q,QANxC,CAOIC,oBAAsBrO,KAAKgK,cAP/B,CAQIA,eAAiBqE,sBAAwBhR,SAAxB,CAAoC,IAApC,CAA2CgR,mBARhE;;AAYAC,mBAAmB5Y,OAAnB,CAA4BlD,CAA5B;;;AAKA,GAAIwX,cAAJ,CAAoBuE,cAAY7Y,OAAZ,CAAqBlD,CAArB;;;AAKpBgc,aAAW9Y,OAAX,CAAoBlD,CAApB,CAAuByJ,GAAvB;;AAIAxG,gBAAcC,OAAd,CAAuBlD,CAAvB;;;AAKAic,cAAc/Y,OAAd,CAAuBlD,CAAvB;AAGAkc,eAAahZ,OAAb,CAAsBlD,CAAtB,CAAyBgU,KAAzB;AAGAmI,qBAAqBjZ,OAArB,CAA8BlD,CAA9B,CAAiCyJ,GAAjC;;;;AAMA,GAAI+N,cAAJ,CAAoB/C,aAAavR,OAAb,CAAsBlD,CAAtB,CAAyB0b,kBAAzB;AAGpBU,cAAYlZ,OAAZ,CAAqBlD,CAArB;AAGAqc,mBAAmBnZ,OAAnB,CAA4BlD,CAA5B,EAEA,cAAA,CACD,CAED,sBAAA,CAAuBgU,KAAvB,CAA8BxG,IAA9B,CAAoC,CAClC,QAAUA,KAAK/D,GAAf,CACIzJ,EAAIwN,KAAKxN,CADb;;AAKA,GAAIsc,mBAAmBnb,IAAnB,CAAwB6S,KAAxB,CAAJ,CAAoC,CAClCA,MAAQuI,kBAAkBvI,KAAlB,CAAyBvK,GAAzB,CAAR,CACD;;AAID,GAAIuK,MAAMrS,MAAN,CAAe,GAAnB,CAAwB;AAEtB,OAAS3B,EAAE,IAAF,CAAT,CACA,GAAIoX,GAAGzV,MAAH,GAAc,CAAlB,CAAqB,CACnBqS,MAAQoD,GAAG7U,IAAH,EAAR,CACD,CACF;AAGD,mBAAiByR,KAAV,CAAiBhU,CAAjB,EAAoB8F,IAApB,EAAP,CACD,CAED,+BAAA,CAAgC0W,UAAhC,CAA4Cja,IAA5C,CAAkD;;;AAIhD,GAAIia,WAAW7a,MAAX,EAAqB,CAAzB,CAA4B,CAC1B,SAAW,UAAY;;;AAIrB,eAAiB6a,WAAW/Y,MAAX,CAAkB,SAAUC,GAAV,CAAe+Y,SAAf,CAA0B,CAC3D/Y,IAAI+Y,SAAJ,EAAiB/Y,IAAI+Y,SAAJ,EAAiB/Y,IAAI+Y,SAAJ,EAAiB,CAAlC,CAAsC,CAAvD,CACA,UAAA,CACD,CAHgB,CAGd,EAHc,CAAjB,CAKA,0BAA4BlM,mBAAiBmM,UAAjB,EAA6BjZ,MAA7B,CAAoC,SAAUC,GAAV,CAAetB,GAAf,CAAoB,CAClF,GAAIsB,IAAI,CAAJ,EAASgZ,WAAWta,GAAX,CAAb,CAA8B,CAC5B,MAAO,CAACA,GAAD,CAAMsa,WAAWta,GAAX,CAAN,CAAP,CACD,CAED,UAAA,CACD,CAN2B,CAMzB,CAAC,CAAD,CAAI,CAAJ,CANyB,CAA5B,CAOIua,uBAAyBtK,iBAAeuK,qBAAf,CAAsC,CAAtC,CAP7B,CAQIC,QAAUF,uBAAuB,CAAvB,CARd,CASIG,UAAYH,uBAAuB,CAAvB,CAThB;;;;AAiBA,GAAIG,WAAa,CAAb,EAAkBD,QAAQlb,MAAR,EAAkB,CAAxC,CAA2C,CACzC6a,WAAaja,KAAKwQ,KAAL,CAAW8J,OAAX,CAAb,CACD,CAED,cAAgB,CAACL,WAAW,CAAX,CAAD,CAAgBA,WAAWzW,KAAX,CAAiB,CAAC,CAAlB,CAAhB,CAAhB,CACA,eAAiBgX,UAAUtZ,MAAV,CAAiB,SAAUC,GAAV,CAAe2J,GAAf,CAAoB,CACpD,WAAW1L,MAAJ,CAAa0L,IAAI1L,MAAjB,CAA0B+B,GAA1B,CAAgC2J,GAAvC,CACD,CAFgB,CAEd,EAFc,CAAjB,CAIA,GAAI2P,WAAWrb,MAAX,CAAoB,EAAxB,CAA4B,CAC1B,MAAO,CACLgT,EAAGqI,UADE,CAAP,CAGD,CAED,MAAO,CACLrI,EAAGpS,IADE,CAAP,CAGD,CA5CU,EAAX,CA8CA,GAAI,CAAC,WAAA,GAAgB,WAAhB,CAA8B,WAA9B,CAA4C2S,UAAQC,IAAR,CAA7C,IAAgE,QAApE,CAA8E,YAAYR,CAAZ,CAC/E,CAED,WAAA,CACD,CAED,6BAAA,CAA8B6H,UAA9B,CAA0C/S,GAA1C,CAA+C;;;;;;AAO7C,eAAiBE,MAAIoF,KAAJ,CAAUtF,GAAV,CAAjB,CACIwJ,KAAOvC,WAAWuC,IADtB,CAGA,gBAAkBA,KAAKlM,OAAL,CAAakW,iBAAb,CAAgC,EAAhC,CAAlB,CAEA,cAAgBT,WAAW,CAAX,EAAc9b,WAAd,GAA4BqG,OAA5B,CAAoC,GAApC,CAAyC,EAAzC,CAAhB,CACA,mBAAqBmW,QAAMC,WAAN,CAAkBC,SAAlB,CAA6BC,WAA7B,CAArB,CAEA,GAAIC,eAAiB,GAAjB,EAAwBF,UAAUzb,MAAV,CAAmB,CAA/C,CAAkD,CAChD,kBAAkBoE,KAAX,CAAiB,CAAjB,EAAoBnH,IAApB,CAAyB,EAAzB,CAAP,CACD,CAED,YAAc4d,WAAWzW,KAAX,CAAiB,CAAC,CAAlB,EAAqB,CAArB,EAAwBrF,WAAxB,GAAsCqG,OAAtC,CAA8C,GAA9C,CAAmD,EAAnD,CAAd,CACA,iBAAmBmW,QAAMC,WAAN,CAAkBI,OAAlB,CAA2BF,WAA3B,CAAnB,CAEA,GAAIG,aAAe,GAAf,EAAsBD,QAAQ5b,MAAR,EAAkB,CAA5C,CAA+C,CAC7C,kBAAkBoE,KAAX,CAAiB,CAAjB,CAAoB,CAAC,CAArB,EAAwBnH,IAAxB,CAA6B,EAA7B,CAAP,CACD,CAED,WAAA,CACD;;AAID,0BAAA,CAA2BoV,KAA3B,CAAkC,CAChC,QAAU/G,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,EAA9E;;AAIA,eAAiB+G,MAAMjB,KAAN,CAAYuJ,kBAAZ,CAAjB,CACA,GAAIE,WAAW7a,MAAX,GAAsB,CAA1B,CAA6B,CAC3B,YAAA,CACD,CAED,aAAe8b,uBAAuBjB,UAAvB,CAAmCxI,KAAnC,CAAf,CACA,GAAI0J,QAAJ,CAAc,eAAA,CAEdA,SAAWC,qBAAqBnB,UAArB,CAAiC/S,GAAjC,CAAX,CACA,GAAIiU,QAAJ,CAAc,eAAA;;AAId,YAAA,CACD,CAED,aAAe,CACbxG,OAAQ0G,WADK,CAEb9F,eAAgB+F,OAFH,CAGbtG,IAAKuG,QAHQ,CAIb3G,eAAgB4G,kBAJH,CAKbnV,QAASoV,gBALI,CAMbhK,MAAOiK,aANM,CAAf;;;;;;;;;;;AAoBA,wBAAA,CAAyBje,CAAzB,CAA4Bke,IAA5B,CAAkC;;;;AAMhC,GAAIA,KAAKC,uBAAT,CAAkC,CAChCne,EAAIme,0BAAwBne,CAAxB,CAAJ,CACD,CAEDA,EAAIoe,uBAAuBpe,CAAvB,CAAJ,CACAA,EAAIqe,gBAAgBre,CAAhB,CAAmBke,KAAK3X,WAAxB,CAAJ,CACA,kBAAoB+X,oBAAoBte,CAApB,CAApB,CAEA,oBAAA,CACD,CAED,4BAA8B,CAC5Bue,YAAa,CACXJ,wBAAyB,IADd,CAEX5X,YAAa,IAFF,CAGXmV,mBAAoB,IAHT,CADe;;;;;;;;;;;;;;;;;;;AA0B5B8C,QAAS,gBAAA,CAAiBhR,IAAjB,CAAuB0Q,IAAvB,CAA6B,CACpC,MAAQ1Q,KAAKxN,CAAb,CACIqC,KAAOmL,KAAKnL,IADhB,CAEI2R,MAAQxG,KAAKwG,KAFjB,CAGIvK,IAAM+D,KAAK/D,GAHf,CAIIgV,WAAajR,KAAK6I,OAJtB,CAMA6H,KAAOjP,WAAS,EAAT,CAAa,KAAKsP,WAAlB,CAA+BL,IAA/B,CAAP,CAEAle,EAAIA,GAAKye,WAAWnI,IAAX,CAAgBjU,IAAhB,CAAT;;AAIA,SAAW,KAAKqc,cAAL,CAAoB1e,CAApB,CAAuBgU,KAAvB,CAA8BvK,GAA9B,CAAmCyU,IAAnC,CAAX,CAEA,GAAIS,mBAAiB9d,IAAjB,CAAJ,CAA4B,CAC1B,YAAY+d,kBAAL,CAAwB/d,IAAxB,CAA8Bb,CAA9B,CAAP,CACD;;AAID,8BAAgC,IAAhC,CACA,sBAAwB,KAAxB,CACA,mBAAqB6K,SAArB,CAEA,GAAI,CACF,IAAK,cAAgB+J,eAAarE,mBAAiB2N,IAAjB,EAAuB/J,MAAvB,CAA8B,SAAU0K,CAAV,CAAa,CAC3E,YAAYA,CAAL,IAAY,IAAnB,CACD,CAFiC,CAAb,CAAhB,CAEAxK,KAFL,CAEY,EAAES,0BAA4B,CAACT,MAAQU,UAAUxU,IAAV,EAAT,EAA2ByU,IAAzD,CAFZ,CAE4EF,0BAA4B,IAFxG,CAE8G,CAC5G,QAAUT,MAAMpJ,KAAhB,CAEAiT,KAAK9b,GAAL,EAAY,KAAZ,CACApC,EAAIye,WAAWnI,IAAX,CAAgBjU,IAAhB,CAAJ,CAEAxB,KAAO,KAAK6d,cAAL,CAAoB1e,CAApB,CAAuBgU,KAAvB,CAA8BvK,GAA9B,CAAmCyU,IAAnC,CAAP,CAEA,GAAIS,mBAAiB9d,IAAjB,CAAJ,CAA4B,CAC1B,MACD,CACF,CACF,CAAC,MAAOoN,GAAP,CAAY,CACZmH,kBAAoB,IAApB,CACAC,eAAiBpH,GAAjB,CACD,CAlBD,OAkBU,CACR,GAAI,CACF,GAAI,CAAC6G,yBAAD,EAA8BC,UAAUO,MAA5C,CAAoD,CAClDP,UAAUO,MAAV,GACD,CACF,CAJD,OAIU,CACR,GAAIF,iBAAJ,CAAuB,CACrB,oBAAA,CACD,CACF,CACF,CAED,YAAYwJ,kBAAL,CAAwB/d,IAAxB,CAA8Bb,CAA9B,CAAP,CACD,CAlF2B;AAsF5B0e,eAAgB,uBAAA,CAAwB1e,CAAxB,CAA2BgU,KAA3B,CAAkCvK,GAAlC,CAAuCyU,IAAvC,CAA6C,CAC3D,wBAAwBY,gBAAgB9e,CAAhB,CAAmBke,IAAnB,CAAjB,CAA2C,CAChDle,EAAGA,CAD6C,CAEhD0b,mBAAoBwC,KAAKxC,kBAFuB,CAGhD1H,MAAOA,KAHyC,CAIhDvK,IAAKA,GAJ2C,CAA3C,CAAP,CAMD,CA7F2B;;;AAmG5BmV,mBAAoB,2BAAA,CAA4B/d,IAA5B,CAAkCb,CAAlC,CAAqC,CACvD,GAAI,CAACa,IAAL,CAAW,CACT,WAAA,CACD,CAED,yBAAuBb,EAAEqC,IAAF,CAAOxB,IAAP,CAAhB,CAAP;;;;CAxG0B,CAA9B;;;;;;AAwHA,2BAA6B,CAAC,iBAAD,CAAoB,UAApB,CAAgC,SAAhC,CAA2C,UAA3C,CAAuD,OAAvD,CAA7B;;AAIA,yBAA2B,CAAC,UAAD,CAA3B;;;;;;;AASA,2BAA6B,CAAC,sBAAD,CAAyB,kBAAzB,CAA6C,kBAA7C,CAAiE,YAAjE,CAA+E,mBAA/E,CAAoG,cAApG,CAA7B,CAEA,yBAA2B,CAAC,YAAD,CAAe,cAAf,CAA+B,cAA/B,CAA+C,aAA/C,CAA8D,aAA9D,CAA6E,aAA7E,CAA4F,aAA5F,CAA2G,eAA3G,CAA4H,eAA5H,CAA6I,iBAA7I,CAAgK,UAAhK,CAA4K,YAA5K,CAA0L,IAA1L,CAAgM,iBAAhM,CAAmN,OAAnN,CAA3B,CAEA,0BAA4B,CAC1B2d,QAAS,gBAAA,CAAiBhR,IAAjB,CAAuB,CAC9B,MAAQA,KAAKxN,CAAb,CACIyJ,IAAM+D,KAAK/D,GADf,CAEIsV,UAAYvR,KAAKuR,SAFrB;;AAMA,UAAY,MAAZ,CAEA/K,MAAQgL,mBAAmBhf,CAAnB,CAAsBif,sBAAtB,CAA8CF,SAA9C,CAAR,CACA,GAAI/K,KAAJ,CAAW,qBAAqBA,KAAd,CAAqB,CAAEvK,IAAKA,GAAP,CAAYzJ,EAAGA,CAAf,CAArB,CAAP;;AAIXgU,MAAQkL,wBAAwBlf,CAAxB,CAA2Bmf,sBAA3B,CAAR,CACA,GAAInL,KAAJ,CAAW,qBAAqBA,KAAd,CAAqB,CAAEvK,IAAKA,GAAP,CAAYzJ,EAAGA,CAAf,CAArB,CAAP;AAGXgU,MAAQgL,mBAAmBhf,CAAnB,CAAsBof,oBAAtB,CAA4CL,SAA5C,CAAR,CACA,GAAI/K,KAAJ,CAAW,qBAAqBA,KAAd,CAAqB,CAAEvK,IAAKA,GAAP,CAAYzJ,EAAGA,CAAf,CAArB,CAAP;AAGXgU,MAAQkL,wBAAwBlf,CAAxB,CAA2Bqf,oBAA3B,CAAR,CACA,GAAIrL,KAAJ,CAAW,qBAAqBA,KAAd,CAAqB,CAAEvK,IAAKA,GAAP,CAAYzJ,EAAGA,CAAf,CAArB,CAAP;AAGX,MAAO,EAAP,CACD,CA5ByB,CAA5B;;;;;;AAqCA,qBAAuB,CAAC,KAAD,CAAQ,OAAR,CAAiB,WAAjB,CAA8B,eAA9B,CAA+C,YAA/C,CAA6D,WAA7D,CAA0E,SAA1E,CAAvB,CAEA,sBAAwB,GAAxB;;;;;;;AASA,qBAAuB,CAAC,sBAAD,CAAyB,mBAAzB,CAA8C,oBAA9C,CAAoE,mBAApE,CAAyF,oBAAzF,CAA+G,qBAA/G,CAAsI,aAAtI,CAAqJ,iBAArJ,CAAwK,oBAAxK,CAA8L,qBAA9L,CAAqN,eAArN,CAAsO,YAAtO,CAAoP,YAApP,CAAkQ,cAAlQ,CAAkR,cAAlR,CAAkS,yBAAlS,CAA6T,qBAA7T,CAAoV,qBAApV,CAA2W,SAA3W,CAAsX,SAAtX,CAAiY,gBAAjY,CAAmZ,gBAAnZ,CAAqa,SAAra,CAAvB;;AAIA,aAAe,aAAf,CACA,wBAA0B,CAAC,CAAC,SAAD,CAAYsf,QAAZ,CAAD,CAAwB,CAAC,SAAD,CAAYA,QAAZ,CAAxB,CAA1B,CAEA,2BAA6B,CAC3Bd,QAAS,gBAAA,CAAiBhR,IAAjB,CAAuB,CAC9B,MAAQA,KAAKxN,CAAb,CACI+e,UAAYvR,KAAKuR,SADrB,CAGA,WAAa,MAAb;;AAIA7H,OAAS8H,mBAAmBhf,CAAnB,CAAsBuf,gBAAtB,CAAwCR,SAAxC,CAAT,CACA,GAAI7H,QAAUA,OAAOvV,MAAP,CAAgB6d,iBAA9B,CAAiD,CAC/C,mBAAmBtI,MAAZ,CAAP,CACD;AAGDA,OAASgI,wBAAwBlf,CAAxB,CAA2Byf,gBAA3B,CAA6C,CAA7C,CAAT,CACA,GAAIvI,QAAUA,OAAOvV,MAAP,CAAgB6d,iBAA9B,CAAiD,CAC/C,mBAAmBtI,MAAZ,CAAP,CACD;;AAID,8BAAgC,IAAhC,CACA,sBAAwB,KAAxB,CACA,mBAAqBrM,SAArB,CAEA,GAAI,CACF,IAAK,cAAgB+J,eAAa8K,mBAAb,CAAhB,CAAmDrL,KAAxD,CAA+D,EAAES,0BAA4B,CAACT,MAAQU,UAAUxU,IAAV,EAAT,EAA2ByU,IAAzD,CAA/D,CAA+HF,0BAA4B,IAA3J,CAAiK,CAC/J,UAAYT,MAAMpJ,KAAlB,CAEA,UAAYoH,iBAAesN,KAAf,CAAsB,CAAtB,CAAZ,CAEA,aAAe7Q,MAAM,CAAN,CAAf,CACA,UAAYA,MAAM,CAAN,CAAZ,CAEA,SAAW9O,EAAEtB,QAAF,CAAX,CACA,GAAImC,KAAKc,MAAL,GAAgB,CAApB,CAAuB,CACrB,SAAWd,KAAK0B,IAAL,EAAX,CACA,GAAIqd,MAAMze,IAAN,CAAWoB,IAAX,CAAJ,CAAsB,CACpB,mBAAmBA,IAAZ,CAAP,CACD,CACF,CACF,CACF,CAAC,MAAO0L,GAAP,CAAY,CACZmH,kBAAoB,IAApB,CACAC,eAAiBpH,GAAjB,CACD,CApBD,OAoBU,CACR,GAAI,CACF,GAAI,CAAC6G,yBAAD,EAA8BC,UAAUO,MAA5C,CAAoD,CAClDP,UAAUO,MAAV,GACD,CACF,CAJD,OAIU,CACR,GAAIF,iBAAJ,CAAuB,CACrB,oBAAA,CACD,CACF,CACF,CAED,WAAA,CACD,CA3D0B,CAA7B;;;;AAkEA,6BAA+B,CAAC,wBAAD,CAA2B,aAA3B,CAA0C,SAA1C,CAAqD,gBAArD,CAAuE,WAAvE,CAAoF,cAApF,CAAoG,UAApG,CAAgH,UAAhH,CAA4H,SAA5H,CAAuI,eAAvI,CAAwJ,UAAxJ,CAAoK,cAApK,CAAoL,qBAApL,CAA2M,cAA3M,CAA2N,SAA3N,CAAsO,MAAtO,CAA/B;;;AAKA,6BAA+B,CAAC,4BAAD,CAA+B,oBAA/B,CAAqD,0BAArD,CAAiF,kBAAjF,CAAqG,oBAArG,CAA2H,kBAA3H,CAA+I,iBAA/I,CAAkK,aAAlK,CAAiL,eAAjL,CAAkM,qBAAlM,CAAyN,mBAAzN,CAA8O,cAA9O,CAA8P,aAA9P,CAA6Q,YAA7Q,CAA2R,kBAA3R,CAA+S,WAA/S,CAA4T,UAA5T,CAA/B;;;AAKA,oBAAsB,mDAAtB,CACA,2BAA6B;AAE7B,UAAA,CAAW,4BAAX,CAAyC,GAAzC,CAF6B;;;AAM7B,UAAA,CAAW,6BAAX,CAA0C,GAA1C,CAN6B;AAQ7B,UAAA,CAAW,cAAgByK,eAAhB,CAAkC,aAA7C,CAA4D,GAA5D,CAR6B,CAA7B,CAUA,kCAAoC,CAClCrB,QAAS,gBAAA,CAAiBhR,IAAjB,CAAuB,CAC9B,MAAQA,KAAKxN,CAAb,CACIyJ,IAAM+D,KAAK/D,GADf,CAEIsV,UAAYvR,KAAKuR,SAFrB,CAIA,kBAAoB,MAApB;;;AAIAe,cAAgBd,mBAAmBhf,CAAnB,CAAsB+f,wBAAtB,CAAgDhB,SAAhD,CAA2D,KAA3D,CAAhB,CACA,GAAIe,aAAJ,CAAmB,0BAA0BA,aAAnB,CAAP;;AAInBA,cAAgBZ,wBAAwBlf,CAAxB,CAA2BggB,wBAA3B,CAAhB,CACA,GAAIF,aAAJ,CAAmB,0BAA0BA,aAAnB,CAAP;AAGnBA,cAAgBG,iBAAexW,GAAf,CAAoByW,sBAApB,CAAhB,CACA,GAAIJ,aAAJ,CAAmB,0BAA0BA,aAAnB,CAAP,CAEnB,WAAA,CACD,CAvBiC,CAApC;;;;;;;;;;;;;;AA2CA,wBAA0B;AAExBtB,QAAS,gBAAA,EAAmB,CAC1B,WAAA,CACD,CAJuB,CAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,6BAA+B,CAAC,UAAD,CAAa,eAAb,CAA8B,WAA9B,CAA/B,CAEA,6BAA+B,CAAC,qBAAD,CAA/B,CAEA,kCAAoC,CAAC,QAAD,CAAW,YAAX,CAAyB,OAAzB,CAAkC,OAAlC,CAA2C,UAA3C,CAApC,CACA,qCAAuC,UAAA,CAAW2B,8BAA8BvhB,IAA9B,CAAmC,GAAnC,CAAX,CAAoD,GAApD,CAAvC,CAEA,kCAAoC,CAAC,QAAD,CAAW,QAAX,CAAqB,OAArB,CAA8B,UAA9B,CAA0C,UAA1C,CAAsD,MAAtD,CAA8D,IAA9D,CAAoE,YAApE,CAAkF,MAAlF,CAA0F,QAA1F,CAAoG,QAApG,CAA8G,KAA9G,CAAqH,QAArH,CAA+H,SAA/H,CAA0I,QAA1I,CAAoJ,SAApJ,CAA+J,SAA/J,CAA0K,QAA1K,CAAoL,OAApL,CAA6L,UAA7L,CAAyM,SAAzM,CAAoN,OAApN,CAA6N,OAA7N,CAAsO,KAAtO,CAA6O,aAA7O,CAApC,CACA,qCAAuC,UAAA,CAAWwhB,8BAA8BxhB,IAA9B,CAAmC,GAAnC,CAAX,CAAoD,GAApD,CAAvC,CAEA,WAAa,gBAAb,CACA,WAAa,kBAAb,CAEA,eAAA,CAAgBmC,KAAhB,CAAuB,CACrB,MAAO,CAACA,MAAM8B,IAAN,CAAW,OAAX,GAAuB,EAAxB,EAA8B,GAA9B,EAAqC9B,MAAM8B,IAAN,CAAW,IAAX,GAAoB,EAAzD,CAAP,CACD;AAGD,sBAAA,CAAuB4G,GAAvB,CAA4B,CAC1BA,IAAMA,IAAI3D,IAAJ,EAAN,CACA,UAAY,CAAZ,CAEA,GAAIua,iCAAiClf,IAAjC,CAAsCsI,GAAtC,CAAJ,CAAgD,CAC9CzE,OAAS,EAAT,CACD,CAED,GAAIsb,iCAAiCnf,IAAjC,CAAsCsI,GAAtC,CAAJ,CAAgD,CAC9CzE,OAAS,EAAT,CACD;;AAID,GAAIub,OAAOpf,IAAP,CAAYsI,GAAZ,CAAJ,CAAsB,CACpBzE,OAAS,EAAT,CACD,CAED,GAAIwb,OAAOrf,IAAP,CAAYsI,GAAZ,CAAJ,CAAsB,CACpBzE,OAAS,EAAT,CACD;AAID,YAAA,CACD;AAGD,kBAAA,CAAmBtC,IAAnB,CAAyB,CACvB,GAAIA,KAAKG,IAAL,CAAU,KAAV,CAAJ,CAAsB,CACpB,QAAA,CACD,CAED,QAAA,CACD;;AAID,uBAAA,CAAwBH,IAAxB,CAA8B,CAC5B,UAAY,CAAZ,CACA,eAAiBA,KAAKX,OAAL,CAAa,QAAb,EAAuByG,KAAvB,EAAjB,CAEA,GAAIiY,WAAW9e,MAAX,GAAsB,CAA1B,CAA6B,CAC3BqD,OAAS,EAAT,CACD,CAED,YAActC,KAAK4D,MAAL,EAAd,CACA,aAAe,MAAf,CACA,GAAIK,QAAQhF,MAAR,GAAmB,CAAvB,CAA0B,CACxB+e,SAAW/Z,QAAQL,MAAR,EAAX,CACD,CAED,CAACK,OAAD,CAAU+Z,QAAV,EAAoB5W,OAApB,CAA4B,SAAU/I,KAAV,CAAiB,CAC3C,GAAI0Q,mBAAiBtQ,IAAjB,CAAsBwf,OAAO5f,KAAP,CAAtB,CAAJ,CAA0C,CACxCiE,OAAS,EAAT,CACD,CACF,CAJD,EAMA,YAAA,CACD;;AAID,uBAAA,CAAwBtC,IAAxB,CAA8B,CAC5B,UAAY,CAAZ,CACA,aAAeA,KAAKnC,IAAL,EAAf,CACA,YAAcwH,SAASvH,GAAT,CAAa,CAAb,CAAd,CAEA,GAAIQ,SAAWA,QAAQP,OAAR,GAAoB,YAAnC,CAAiD,CAC/CuE,OAAS,EAAT,CACD,CAED,GAAIyM,mBAAiBtQ,IAAjB,CAAsBwf,OAAO5Y,QAAP,CAAtB,CAAJ,CAA6C,CAC3C/C,OAAS,EAAT,CACD,CAED,YAAA,CACD,CAED,0BAAA,CAA2BtC,IAA3B,CAAiC,CAC/B,UAAY,CAAZ,CAEA,UAAYwC,WAAWxC,KAAKG,IAAL,CAAU,OAAV,CAAX,CAAZ,CACA,WAAaqC,WAAWxC,KAAKG,IAAL,CAAU,QAAV,CAAX,CAAb,CACA,QAAUH,KAAKG,IAAL,CAAU,KAAV,CAAV;AAGA,GAAIC,OAASA,OAAS,EAAtB,CAA0B,CACxBkC,OAAS,EAAT,CACD;AAGD,GAAIrC,QAAUA,QAAU,EAAxB,CAA4B,CAC1BqC,OAAS,EAAT,CACD,CAED,GAAIlC,OAASH,MAAT,EAAmB,CAACkV,IAAIjN,QAAJ,CAAa,QAAb,CAAxB,CAAgD,CAC9C,SAAW9H,MAAQH,MAAnB,CACA,GAAIie,KAAO,IAAX,CAAiB;AAEf5b,OAAS,GAAT,CACD,CAHD,IAGO,CACLA,OAASU,KAAKmb,KAAL,CAAWD,KAAO,IAAlB,CAAT,CACD,CACF,CAED,YAAA,CACD,CAED,wBAAA,CAAyBE,KAAzB,CAAgC3gB,KAAhC,CAAuC,CACrC,aAAawB,MAAN,CAAe,CAAf,CAAmBxB,KAA1B,CACD;;;;;;;;AAUD,iCAAmC,CACjCqe,QAAS,gBAAA,CAAiBhR,IAAjB,CAAuB,CAC9B,MAAQA,KAAKxN,CAAb,CACI4I,QAAU4E,KAAK5E,OADnB,CAEImW,UAAYvR,KAAKuR,SAFrB,CAGI1c,KAAOmL,KAAKnL,IAHhB,CAKA,aAAe,MAAf,CACA,GAAI,CAACrC,EAAEsC,OAAH,EAActC,EAAE,MAAF,EAAU2B,MAAV,GAAqB,CAAvC,CAA0C,CACxC3B,EAAE,GAAF,EAAOwI,KAAP,GAAeiP,OAAf,CAAuBpV,IAAvB,EACD;;;;AAMD,aAAe2c,mBAAmBhf,CAAnB,CAAsB+gB,wBAAtB,CAAgDhC,SAAhD,CAA2D,KAA3D,CAAf,CAEA,GAAIiC,QAAJ,CAAc,CACZC,SAAWpD,QAAQmD,QAAR,CAAX,CAEA,GAAIC,QAAJ,CAAc,eAAA,CACf;;;AAKD,aAAejhB,EAAE4I,OAAF,CAAf,CACA,SAAW5I,EAAE,KAAF,CAASuJ,QAAT,EAAmBgB,OAAnB,EAAX,CACA,cAAgB,EAAhB,CAEA2W,KAAKpX,OAAL,CAAa,SAAU0G,GAAV,CAAerQ,KAAf,CAAsB,CACjC,SAAWH,EAAEwQ,GAAF,CAAX,CACA,QAAU9N,KAAKG,IAAL,CAAU,KAAV,CAAV,CAEA,GAAI,CAACgV,GAAL,CAAU,OAEV,UAAYsJ,cAActJ,GAAd,CAAZ,CACA7S,OAASoc,UAAU1e,IAAV,CAAT,CACAsC,OAASqc,eAAe3e,IAAf,CAAT,CACAsC,OAASsc,eAAe5e,IAAf,CAAT,CACAsC,OAASuc,kBAAkB7e,IAAlB,CAAT,CACAsC,OAASwc,gBAAgBN,IAAhB,CAAsB/gB,KAAtB,CAAT,CAEAshB,UAAU5J,GAAV,EAAiB7S,KAAjB,CACD,CAdD,EAgBA,0BAA4BuL,mBAAiBkR,SAAjB,EAA4Bhe,MAA5B,CAAmC,SAAUC,GAAV,CAAetB,GAAf,CAAoB,CACjF,iBAAiBA,GAAV,EAAiBsB,IAAI,CAAJ,CAAjB,CAA0B,CAACtB,GAAD,CAAMqf,UAAUrf,GAAV,CAAN,CAA1B,CAAkDsB,GAAzD,CACD,CAF2B,CAEzB,CAAC,IAAD,CAAO,CAAP,CAFyB,CAA5B,CAGIiZ,uBAAyBtK,iBAAeuK,qBAAf,CAAsC,CAAtC,CAH7B,CAII8E,OAAS/E,uBAAuB,CAAvB,CAJb,CAKI/U,SAAW+U,uBAAuB,CAAvB,CALf,CAOA,GAAI/U,SAAW,CAAf,CAAkB,CAChBqZ,SAAWpD,QAAQ6D,MAAR,CAAX,CAEA,GAAIT,QAAJ,CAAc,eAAA,CACf;;AAID,8BAAgC,IAAhC,CACA,sBAAwB,KAAxB,CACA,mBAAqBpW,SAArB,CAEA,GAAI,CACF,IAAK,cAAgB+J,eAAa+M,wBAAb,CAAhB,CAAwDtN,KAA7D,CAAoE,EAAES,0BAA4B,CAACT,MAAQU,UAAUxU,IAAV,EAAT,EAA2ByU,IAAzD,CAApE,CAAoIF,0BAA4B,IAAhK,CAAsK,CACpK,aAAeT,MAAMpJ,KAArB,CAEA,UAAYjL,EAAEtB,QAAF,EAAY8J,KAAZ,EAAZ,CACA,QAAUzH,MAAM8B,IAAN,CAAW,KAAX,CAAV,CACA,GAAIgV,GAAJ,CAAS,CACPoJ,SAAWpD,QAAQhG,GAAR,CAAX,CACA,GAAIoJ,QAAJ,CAAc,eAAA,CACf,CAED,SAAWlgB,MAAM8B,IAAN,CAAW,MAAX,CAAX,CACA,GAAI+e,IAAJ,CAAU,CACRX,SAAWpD,QAAQ+D,IAAR,CAAX,CACA,GAAIX,QAAJ,CAAc,eAAA,CACf,CAED,UAAYlgB,MAAM8B,IAAN,CAAW,OAAX,CAAZ,CACA,GAAIoI,KAAJ,CAAW,CACTgW,SAAWpD,QAAQ5S,KAAR,CAAX,CACA,GAAIgW,QAAJ,CAAc,eAAA,CACf,CACF,CACF,CAAC,MAAOhT,GAAP,CAAY,CACZmH,kBAAoB,IAApB,CACAC,eAAiBpH,GAAjB,CACD,CA1BD,OA0BU,CACR,GAAI,CACF,GAAI,CAAC6G,yBAAD,EAA8BC,UAAUO,MAA5C,CAAoD,CAClDP,UAAUO,MAAV,GACD,CACF,CAJD,OAIU,CACR,GAAIF,iBAAJ,CAAuB,CACrB,oBAAA,CACD,CACF,CACF,CAED,WAAA,CACD,CAzGgC,CAAnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyQA,wBAAA,CAAyBpQ,KAAzB,CAAgC6c,UAAhC,CAA4CD,IAA5C,CAAkD;;;;;AAMhD,GAAI5c,MAAQ,CAAZ,CAAe,CACb,eAAiB,cAAY8c,eAAZ,CAA4B,IAA5B,CAAkCD,UAAlC,CAA8CD,IAA9C,EAAoDG,KAApD,EAAjB;;;;;;AAOA,gBAAkB,IAAMC,UAAxB,CACA,iBAAmB,EAAE,KAAOC,YAAc,GAArB,CAAF,CAAnB,CACA,aAAeC,YAAf,CACD,CAED,QAAA,CACD,CAED,sBAAA,CAAuBlY,QAAvB,CAAiC8I,OAAjC,CAA0C;;;;AAKxC,UAAY,CAAZ,CAEA,GAAI3L,cAAYhG,IAAZ,CAAiB6I,SAASlE,IAAT,EAAjB,CAAJ,CAAuC,CACrC,kBAAoBlD,SAASoH,QAAT,CAAmB,EAAnB,CAApB;;;AAIA,GAAImY,cAAgB,CAApB,CAAuB,CACrBnd,MAAQ,CAAC,EAAT,CACD,CAFD,IAEO,CACLA,MAAQU,KAAKE,GAAL,CAAS,CAAT,CAAY,GAAKuc,aAAjB,CAAR,CACD;;;AAKD,GAAIrP,SAAWA,SAAWqP,aAA1B,CAAyC,CACvCnd,OAAS,EAAT,CACD,CACF,CAED,YAAA,CACD,CAED,wBAAA,CAAyB8N,OAAzB,CAAkCsP,IAAlC,CAAwC;;;AAItC,GAAItP,SAAW,CAACsP,IAAhB,CAAsB,CACpB,SAAA,CACD,CAED,QAAA,CACD,CAED,eAAiB,IAAjB;;AAIA,4BAA8B,CAAC,OAAD,CAAU,SAAV,CAAqB,SAArB,CAAgC,SAAhC,CAA2C,QAA3C,CAAqD,OAArD,CAA8D,OAA9D,CAAuE,OAAvE,CAAgF,KAAhF,CAAuF,OAAvF,CAAgG,MAAhG,CAAwG,QAAxG,CAAkH,KAAlH,CAAyH,iBAAzH,CAA9B,CACA,+BAAiC,UAAA,CAAWC,wBAAwBzjB,IAAxB,CAA6B,GAA7B,CAAX,CAA8C,GAA9C,CAAjC;;;AAKA,wBAA0B,UAAA,CAAW,4CAAX,CAAyD,GAAzD,CAA1B;;AAIA,uBAAyB,UAAA,CAAW,kBAAX,CAA+B,GAA/B,CAAzB;;AAIA,wBAA0B,UAAA,CAAW,yBAAX,CAAsC,GAAtC,CAA1B;AAIA,6BAAA,CAA8BgjB,IAA9B,CAAoC;AAElC,GAAIU,2BAA2BnhB,IAA3B,CAAgCygB,IAAhC,CAAJ,CAA2C,CACzC,MAAO,CAAC,EAAR,CACD,CAED,QAAA,CACD,CAED,kBAAA,CAAmBW,KAAnB,CAA0B,CACxB,MAAO,CAACA,MAAM1f,IAAN,CAAW,OAAX,GAAuB,EAAxB,EAA8B,GAA9B,EAAqC0f,MAAM1f,IAAN,CAAW,IAAX,GAAoB,EAAzD,CAAP,CACD,CAED,yBAAA,CAA0B0f,KAA1B,CAAiC;;;AAI/B,YAAcA,MAAMjc,MAAN,EAAd,CACA,kBAAoB,KAApB,CACA,kBAAoB,KAApB,CACA,UAAY,CAAZ,CAEAkc,YAAY1V,MAAM,CAAN,CAAS,CAAT,CAAZ,EAAyBhD,OAAzB,CAAiC,UAAY,CAC3C,GAAInD,QAAQhF,MAAR,GAAmB,CAAvB,CAA0B,CACxB,OACD,CAED,eAAiB8gB,UAAU9b,OAAV,CAAmB,GAAnB,CAAjB;;AAIA,GAAI,CAAC+b,aAAD,EAAkBC,UAAQxhB,IAAR,CAAayhB,UAAb,CAAtB,CAAgD,CAC9CF,cAAgB,IAAhB,CACA1d,OAAS,EAAT,CACD;;;AAKD,GAAI,CAAC6d,aAAD,EAAkBze,oBAAkBjD,IAAlB,CAAuByhB,UAAvB,CAAlB,EAAwDN,2BAA2BnhB,IAA3B,CAAgCyhB,UAAhC,CAA5D,CAAyG,CACvG,GAAI,CAAC3e,oBAAkB9C,IAAlB,CAAuByhB,UAAvB,CAAL,CAAyC,CACvCC,cAAgB,IAAhB,CACA7d,OAAS,EAAT,CACD,CACF,CAED2B,QAAUA,QAAQL,MAAR,EAAV,CACD,CAzBD,EA2BA,YAAA,CACD,CAED,sBAAA,CAAuBwc,QAAvB,CAAiC;;AAG/B,GAAIC,oBAAoB5hB,IAApB,CAAyB2hB,QAAzB,CAAJ,CAAwC,CACtC,MAAO,CAAC,GAAR,CACD,CAED,QAAA,CACD,CAED,oBAAA,CAAqBlB,IAArB,CAA2BC,UAA3B,CAAuCmB,OAAvC,CAAgDnU,SAAhD,CAA2D7E,QAA3D,CAAqEiZ,YAArE,CAAmF;AAEjF,GAAIA,aAAazf,IAAb,CAAkB,SAAUiG,GAAV,CAAe,CACnC,cAAgBA,GAAhB,CACD,CAFG,IAEGoB,SAFP,CAEkB,CAChB,YAAA,CACD;;AAID,GAAI,CAAC+W,IAAD,EAASA,OAASC,UAAlB,EAAgCD,OAASoB,OAA7C,CAAsD,CACpD,YAAA,CACD,CAED,aAAenU,UAAUpB,QAAzB,CAEA,eAAiB9D,MAAIoF,KAAJ,CAAU6S,IAAV,CAAjB,CACIsB,SAAWxS,WAAWjD,QAD1B;AAMA,GAAIyV,WAAazV,QAAjB,CAA2B,CACzB,YAAA,CACD;;AAID,aAAemU,KAAK7a,OAAL,CAAaic,OAAb,CAAsB,EAAtB,CAAf,CACA,GAAI,CAACG,WAAWhiB,IAAX,CAAgBiiB,QAAhB,CAAL,CAAgC,CAC9B,YAAA,CACD;;AAID,GAAId,2BAA2BnhB,IAA3B,CAAgC6I,QAAhC,CAAJ,CAA+C,CAC7C,YAAA,CACD;AAGD,GAAIA,SAASrI,MAAT,CAAkB,EAAtB,CAA0B,CACxB,YAAA,CACD,CAED,WAAA,CACD,CAED,qBAAA,CAAsBigB,IAAtB,CAA4ByB,SAA5B,CAAuC;;;;AAKrC,GAAI,CAACA,UAAUliB,IAAV,CAAeygB,IAAf,CAAL,CAA2B,CACzB,MAAO,CAAC,EAAR,CACD,CAED,QAAA,CACD,CAED,0BAAA,CAA2BkB,QAA3B,CAAqC;AAEnC,GAAIQ,oBAAoBniB,IAApB,CAAyB2hB,QAAzB,CAAJ,CAAwC,CACtC,SAAA,CACD,CAED,QAAA,CACD,CAED,sBAAA,CAAuBA,QAAvB,CAAiC;AAE/B,GAAIS,mBAAmBpiB,IAAnB,CAAwB2hB,QAAxB,CAAJ,CAAuC;;;;AAKrC,GAAIQ,oBAAoBniB,IAApB,CAAyB2hB,QAAzB,CAAJ,CAAwC,CACtC,MAAO,CAAC,EAAR,CACD,CACF,CAED,QAAA,CACD,CAED,sBAAA,CAAuBE,OAAvB,CAAgC,CAC9B,iBAAO,CAAW,IAAMA,OAAjB,CAA0B,GAA1B,CAAP,CACD,CAED,gBAAA,CAAiBT,KAAjB,CAAwBvY,QAAxB,CAAkC,CAChC,MAAO,CAACA,UAAYuY,MAAMhgB,IAAN,EAAb,EAA6B,GAA7B,EAAoCggB,MAAM1f,IAAN,CAAW,OAAX,GAAuB,EAA3D,EAAiE,GAAjE,EAAwE0f,MAAM1f,IAAN,CAAW,IAAX,GAAoB,EAA5F,CAAP,CACD,CAED,mBAAA,CAAoB2K,IAApB,CAA0B,CACxB,UAAYA,KAAKgW,KAAjB,CACI3B,WAAarU,KAAKqU,UADtB,CAEImB,QAAUxV,KAAKwV,OAFnB,CAGInU,UAAYrB,KAAKqB,SAHrB,CAII7O,EAAIwN,KAAKxN,CAJb,CAKIyjB,kBAAoBjW,KAAKyV,YAL7B,CAMIA,aAAeQ,oBAAsB5Y,SAAtB,CAAkC,EAAlC,CAAuC4Y,iBAN1D,CAQA5U,UAAYA,WAAalF,MAAIoF,KAAJ,CAAU8S,UAAV,CAAzB,CACA,cAAgB6B,cAAcV,OAAd,CAAhB,CACA,SAAWW,cAAY3jB,CAAZ,CAAX;;;;;;;AASA,gBAAkBwjB,MAAM/f,MAAN,CAAa,SAAUmgB,aAAV,CAAyBC,IAAzB,CAA+B;;;AAI5D,UAAY3hB,WAAS2hB,IAAT,CAAZ,CACA,SAAWC,eAAa7hB,MAAM2f,IAAnB,CAAX,CACA,UAAY5hB,EAAE6jB,IAAF,CAAZ,CACA,aAAetB,MAAMhgB,IAAN,EAAf,CAEA,GAAI,CAACwhB,YAAYnC,IAAZ,CAAkBC,UAAlB,CAA8BmB,OAA9B,CAAuCnU,SAAvC,CAAkD7E,QAAlD,CAA4DiZ,YAA5D,CAAL,CAAgF,CAC9E,oBAAA,CACD;AAGD,GAAI,CAACW,cAAchC,IAAd,CAAL,CAA0B,CACxBgC,cAAchC,IAAd,EAAsB,CACpB5c,MAAO,CADa,CAEpBgF,SAAUA,QAFU,CAGpB4X,KAAMA,IAHc,CAAtB,CAKD,CAND,IAMO,CACLgC,cAAchC,IAAd,EAAoB5X,QAApB,CAA+B4Z,cAAchC,IAAd,EAAoB5X,QAApB,CAA+B,GAA/B,CAAqCA,QAApE,CACD,CAED,iBAAmB4Z,cAAchC,IAAd,CAAnB,CACA,aAAeoC,QAAQzB,KAAR,CAAevY,QAAf,CAAf,CACA,YAAcia,iBAAerC,IAAf,CAAd,CAEA,UAAYsC,aAAatC,IAAb,CAAmByB,SAAnB,CAAZ,CACAre,OAASmf,kBAAkBrB,QAAlB,CAAT,CACA9d,OAASof,cAActB,QAAd,CAAT,CACA9d,OAASqf,cAAcvB,QAAd,CAAT,CACA9d,OAASsf,iBAAiB/B,KAAjB,CAAT,CACAvd,OAASuf,qBAAqB3C,IAArB,CAAT,CACA5c,OAASwf,gBAAgB1R,OAAhB,CAAyBsP,IAAzB,CAAT,CACApd,OAASyf,cAAcza,QAAd,CAAwB8I,OAAxB,CAAT,CACA9N,OAAS0f,gBAAgB1f,KAAhB,CAAuB6c,UAAvB,CAAmCD,IAAnC,CAAT,CAEA+C,aAAa3f,KAAb,CAAqBA,KAArB,CAEA,oBAAA,CACD,CAzCiB,CAyCf,EAzCe,CAAlB,CA2CA,0BAAwB4f,WAAjB,EAA8BjjB,MAA9B,GAAyC,CAAzC,CAA6C,IAA7C,CAAoDijB,WAA3D,CACD;;AAKD,gCAAkC,CAChCpG,QAAS,gBAAA,CAAiBhR,IAAjB,CAAuB,CAC9B,MAAQA,KAAKxN,CAAb,CACIyJ,IAAM+D,KAAK/D,GADf,CAEIoF,UAAYrB,KAAKqB,SAFrB,CAGI4U,kBAAoBjW,KAAKyV,YAH7B,CAIIA,aAAeQ,oBAAsB5Y,SAAtB,CAAkC,EAAlC,CAAuC4Y,iBAJ1D,CAMA5U,UAAYA,WAAalF,MAAIoF,KAAJ,CAAUtF,GAAV,CAAzB,CAEA,eAAiBqa,eAAara,GAAb,CAAjB,CACA,YAAcob,iBAAepb,GAAf,CAAoBoF,SAApB,CAAd,CAEA,UAAY7O,EAAE,SAAF,EAAauK,OAAb,EAAZ,CAEA,gBAAkBua,WAAW,CAC3BtB,MAAOA,KADoB,CAE3B3B,WAAYA,UAFe,CAG3BmB,QAASA,OAHkB,CAI3BnU,UAAWA,SAJgB,CAK3B7O,EAAGA,CALwB,CAM3BijB,aAAcA,YANa,CAAX,CAAlB;AAUA,GAAI,CAAC8B,WAAL,CAAkB,WAAA;;AAIlB,YAAcxU,mBAAiBwU,WAAjB,EAA8BthB,MAA9B,CAAqC,SAAUC,GAAV,CAAemgB,IAAf,CAAqB,CACtE,eAAiBkB,YAAYlB,IAAZ,CAAjB,CACA,kBAAkB7e,KAAX,CAAmBtB,IAAIsB,KAAvB,CAA+BggB,UAA/B,CAA4CthB,GAAnD,CACD,CAHa,CAGX,CAAEsB,MAAO,CAAC,GAAV,CAHW,CAAd;;AAOA,GAAIigB,QAAQjgB,KAAR,EAAiB,EAArB,CAAyB,CACvB,eAAe4c,IAAf,CACD,CAED,WAAA,CACD,CAzC+B,CAAlC,CA4CA,6BAA+B,CAAC,QAAD,CAA/B,CAEA,oBAAA,CAAqBnY,GAArB,CAA0B,CACxB,cAAgBE,MAAIoF,KAAJ,CAAUtF,GAAV,CAAhB,CACA,aAAeoF,UAAUpB,QAAzB,CAEA,eAAA,CACD,CAED,eAAA,CAAgBhE,GAAhB,CAAqB,CACnB,MAAO,CACLA,IAAKA,GADA,CAELoN,OAAQqO,YAAYzb,GAAZ,CAFH,CAAP,CAID,CAED,wBAA0B,CACxB+U,QAAS,gBAAA,CAAiBhR,IAAjB,CAAuB,CAC9B,MAAQA,KAAKxN,CAAb,CACIyJ,IAAM+D,KAAK/D,GADf,CAEIsV,UAAYvR,KAAKuR,SAFrB,CAIA,eAAiB/e,EAAE,qBAAF,CAAjB,CACA,GAAImlB,WAAWxjB,MAAX,GAAsB,CAA1B,CAA6B,CAC3B,SAAWwjB,WAAWtiB,IAAX,CAAgB,MAAhB,CAAX,CACA,GAAI+e,IAAJ,CAAU,CACR,cAAcA,IAAP,CAAP,CACD,CACF,CAED,YAAc5C,mBAAmBhf,CAAnB,CAAsBolB,wBAAtB,CAAgDrG,SAAhD,CAAd,CACA,GAAIsG,OAAJ,CAAa,CACX,cAAcA,OAAP,CAAP,CACD,CAED,cAAc5b,GAAP,CAAP,CACD,CApBuB,CAA1B,CAuBA,2BAA6B,CAAC,gBAAD,CAAmB,qBAAnB,CAA7B,CAEA,gBAAA,CAAiBb,OAAjB,CAA0B5I,CAA1B,CAA6B,CAC3B,cAAgBiN,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,GAApF,CAEArE,QAAUA,QAAQ7B,OAAR,CAAgB,UAAhB,CAA4B,GAA5B,EAAiCjB,IAAjC,EAAV,CACA,mBAAiB8C,OAAV,CAAmB0c,SAAnB,CAA8B,CAAEC,QAAS,UAAX,CAA9B,CAAP,CACD,CAED,4BAA8B,CAC5B/G,QAAS,gBAAA,CAAiBhR,IAAjB,CAAuB,CAC9B,MAAQA,KAAKxN,CAAb,CACI4I,QAAU4E,KAAK5E,OADnB,CAEImW,UAAYvR,KAAKuR,SAFrB,CAIA,YAAcC,mBAAmBhf,CAAnB,CAAsBwlB,sBAAtB,CAA8CzG,SAA9C,CAAd,CACA,GAAI/G,OAAJ,CAAa,CACX,eAAe3N,YAAU2N,OAAV,CAAmBhY,CAAnB,CAAR,CAAP,CACD;AAED,cAAgB,GAAhB,CACA,iBAAmB4I,QAAQ7C,KAAR,CAAc,CAAd,CAAiBuf,UAAY,CAA7B,CAAnB,CACA,eAAetlB,EAAEylB,YAAF,EAAgBljB,IAAhB,EAAR,CAAgCvC,CAAhC,CAAmCslB,SAAnC,CAAP,CACD,CAd2B,CAA9B,CAiBA,8BAAgC,CAC9B9G,QAAS,gBAAA,CAAiBhR,IAAjB,CAAuB,CAC9B,YAAcA,KAAK5E,OAAnB,CAEA,MAAQyN,UAAQC,IAAR,CAAa1N,OAAb,CAAR,CACA,aAAe5I,EAAE,KAAF,EAASwI,KAAT,EAAf,CAEA,SAAW1B,kBAAgByC,SAAShH,IAAT,EAAhB,CAAX,CACA,YAAYwQ,KAAL,CAAW,IAAX,EAAiBpR,MAAxB,CACD,CAT6B,CAAhC,CAYA,qBAAuB;AAErBkV,OAAQ,GAFa,CAGrB7C,MAAO0R,sBAAsBlH,OAHR,CAIrBrH,eAAgBwO,8BAA8BnH,OAJzB,CAKrBtH,OAAQ0O,uBAAuBpH,OALV,CAMrB5V,QAASid,wBAAwBrH,OAAxB,CAAgCsH,IAAhC,CAAqCD,uBAArC,CANY,CAOrB/N,eAAgBiO,6BAA6BvH,OAPxB,CAQrBjH,IAAKyO,oBAAoBxH,OARJ,CASrBzG,cAAekO,4BAA4BzH,OATtB,CAUrB0H,eAAgBC,oBAAoB3H,OAVf,CAWrBxG,QAASoO,wBAAwB5H,OAXZ,CAYrB6H,WAAYC,0BAA0B9H,OAZjB,CAarB+H,UAAW,kBAAA,CAAmB/Y,IAAnB,CAAyB,CAClC,UAAYA,KAAKwG,KAAjB,CACA,yBAAuBwS,YAAhB,CAA6BxS,KAA7B,CAAP,CACD,CAhBoB,CAkBrBwK,QAAS,gBAAA,CAAiB1Q,OAAjB,CAA0B,CACjC,SAAWA,QAAQzL,IAAnB,CACIoc,WAAa3Q,QAAQuI,OADzB,CAEIrW,EAAI8N,QAAQ9N,CAFhB,CAKA,GAAIqC,MAAQ,CAACrC,CAAb,CAAgB,CACd,WAAaye,WAAWnI,IAAX,CAAgBjU,IAAhB,CAAb,CACAyL,QAAQ9N,CAAR,CAAYymB,MAAZ,CACD,CAED,UAAY,KAAKzS,KAAL,CAAWlG,OAAX,CAAZ,CACA,mBAAqB,KAAKqJ,cAAL,CAAoBrJ,OAApB,CAArB,CACA,WAAa,KAAKoJ,MAAL,CAAYpJ,OAAZ,CAAb,CACA,YAAc,KAAKlF,OAAL,CAAaqG,WAAS,EAAT,CAAanB,OAAb,CAAsB,CAAEkG,MAAOA,KAAT,CAAtB,CAAb,CAAd,CACA,mBAAqB,KAAK8D,cAAL,CAAoB7I,WAAS,EAAT,CAAanB,OAAb,CAAsB,CAAElF,QAASA,OAAX,CAAtB,CAApB,CAArB,CACA,QAAU,KAAK2O,GAAL,CAAStI,WAAS,EAAT,CAAanB,OAAb,CAAsB,CAAElF,QAASA,OAAX,CAAtB,CAAT,CAAV,CACA,kBAAoB,KAAKmP,aAAL,CAAmBjK,OAAnB,CAApB,CACA,YAAc,KAAKkK,OAAL,CAAa/I,WAAS,EAAT,CAAanB,OAAb,CAAsB,CAAElF,QAASA,OAAX,CAAtB,CAAb,CAAd,CACA,eAAiB,KAAKyd,UAAL,CAAgBpX,WAAS,EAAT,CAAanB,OAAb,CAAsB,CAAElF,QAASA,OAAX,CAAtB,CAAhB,CAAjB,CACA,cAAgB,KAAK2d,SAAL,CAAe,CAAEvS,MAAOA,KAAT,CAAf,CAAhB,CAEA,oBAAsB,KAAKkS,cAAL,CAAoBpY,OAApB,CAAtB,CACIrE,IAAMid,gBAAgBjd,GAD1B,CAEIoN,OAAS6P,gBAAgB7P,MAF7B,CAIA,MAAO,CACL7C,MAAOA,KADF,CAELkD,OAAQA,MAFH,CAGLC,eAAgBA,gBAAkB,IAH7B,CAILI,IAAKA,GAJA,CAKLO,eAAgBA,cALX,CAMLlP,QAASA,OANJ,CAOLmP,cAAeA,aAPV,CAQLtO,IAAKA,GARA,CASLoN,OAAQA,MATH,CAULmB,QAASA,OAVJ,CAWLqO,WAAYA,UAXP,CAYLE,UAAWA,SAZN,CAAP,CAcD,CA1DoB,CAAvB,CA6DA,qBAAA,CAAsB9c,GAAtB,CAA2BoF,SAA3B,CAAsC,CACpCA,UAAYA,WAAalF,MAAIoF,KAAJ,CAAUtF,GAAV,CAAzB,CACA,eAAiBoF,SAAjB,CACIpB,SAAWkZ,WAAWlZ,QAD1B,CAGA,eAAiBA,SAASsF,KAAT,CAAe,GAAf,EAAoBhN,KAApB,CAA0B,CAAC,CAA3B,EAA8BnH,IAA9B,CAAmC,GAAnC,CAAjB,CAEA,kBAAkB6O,QAAX,GAAwBmZ,WAAWC,UAAX,CAAxB,EAAkDC,gBAAzD,CACD;AAID,yBAAA,CAA0Bvd,QAA1B,CAAoCvJ,CAApC,CAAuCwN,IAAvC,CAA6C,CAC3C,UAAYA,KAAKkJ,KAAjB,CAEA,GAAI,CAACA,KAAL,CAAY,eAAA,CAEZ1W,EAAE0W,MAAM9X,IAAN,CAAW,GAAX,CAAF,CAAmB2K,QAAnB,EAA6B5I,MAA7B,GAEA,eAAA,CACD;AAGD,0BAAA,CAA2B4I,QAA3B,CAAqCvJ,CAArC,CAAwCuS,KAAxC,CAA+C,CAC7C,eAAiBA,MAAMyE,UAAvB,CAEA,GAAI,CAACA,UAAL,CAAiB,eAAA,CAEjBzG,mBAAiByG,UAAjB,EAA6BlN,OAA7B,CAAqC,SAAU1H,GAAV,CAAe,CAClD,aAAepC,EAAEoC,GAAF,CAAOmH,QAAP,CAAf,CACA,UAAYyN,WAAW5U,GAAX,CAAZ;AAGA,GAAI,YAAA,GAAiB,QAArB,CAA+B,CAC7B2kB,SAAS7mB,IAAT,CAAc,SAAUC,KAAV,CAAiBU,IAAjB,CAAuB,CACnCwP,iBAAiBrQ,EAAEa,IAAF,CAAjB,CAA0Bb,CAA1B,CAA6BgX,WAAW5U,GAAX,CAA7B,EACD,CAFD,EAGD,CAJD,QAIW,YAAA,GAAiB,UAArB,CAAiC;AAEtC2kB,SAAS7mB,IAAT,CAAc,SAAUC,KAAV,CAAiBU,IAAjB,CAAuB,CACnC,WAAaoK,MAAMjL,EAAEa,IAAF,CAAN,CAAeb,CAAf,CAAb;AAEA,GAAI,aAAA,GAAkB,QAAtB,CAAgC,CAC9BqQ,iBAAiBrQ,EAAEa,IAAF,CAAjB,CAA0Bb,CAA1B,CAA6BkW,MAA7B,EACD,CACF,CAND,EAOD,CACF,CAnBD,EAqBA,eAAA,CACD,CAED,6BAAA,CAA8BlW,CAA9B,CAAiCwV,SAAjC,CAA4C,CAC1C,iBAAiBhS,IAAV,CAAe,SAAU9E,QAAV,CAAoB,CACxC,GAAIsoB,MAAMC,OAAN,CAAcvoB,QAAd,CAAJ,CAA6B,CAC3B,cAAgB2T,iBAAe3T,QAAf,CAAyB,CAAzB,CAAhB,CACIkZ,EAAIsP,UAAU,CAAV,CADR,CAEIrkB,KAAOqkB,UAAU,CAAV,CAFX,CAIA,SAAStP,CAAF,EAAKjW,MAAL,GAAgB,CAAhB,EAAqB3B,EAAE4X,CAAF,EAAK/U,IAAL,CAAUA,IAAV,CAArB,EAAwC7C,EAAE4X,CAAF,EAAK/U,IAAL,CAAUA,IAAV,EAAgBiD,IAAhB,KAA2B,EAA1E,CACD;AAGD,SAASpH,QAAF,EAAYiD,MAAZ,GAAuB,CAAvB,EAA4B3B,EAAEtB,QAAF,EAAY6D,IAAZ,GAAmBuD,IAAnB,KAA8B,EAAjE,CACD,CAXM,CAAP,CAYD,CAED,eAAA,CAAgBoY,IAAhB,CAAsB,CACpB,MAAQA,KAAKle,CAAb,CACIsU,KAAO4J,KAAK5J,IADhB,CAEI6S,eAAiBjJ,KAAKiJ,cAF1B,CAGIC,kBAAoBlJ,KAAKmJ,WAH7B,CAIIA,YAAcD,oBAAsBvc,SAAtB,CAAkC,KAAlC,CAA0Cuc,iBAJ5D;AAOA,GAAI,CAACD,cAAL,CAAqB,WAAA;;AAIrB,GAAI,qBAAA,GAA0B,QAA9B,CAAwC,qBAAA,CAExC,cAAgBA,eAAe3R,SAA/B,CACI8R,sBAAwBH,eAAe3P,cAD3C,CAEIA,eAAiB8P,wBAA0Bzc,SAA1B,CAAsC,IAAtC,CAA6Cyc,qBAFlE,CAKA,qBAAuBC,qBAAqBvnB,CAArB,CAAwBwV,SAAxB,CAAvB,CAEA,GAAI,CAACgS,gBAAL,CAAuB,WAAA;;;;;AAQvB,GAAIH,WAAJ,CAAiB,CACf,aAAernB,EAAEwnB,gBAAF,CAAf;AAGAje,SAAS2D,IAAT,CAAclN,EAAE,aAAF,CAAd,EACAuJ,SAAWA,SAASjD,MAAT,EAAX,CAEAiD,SAAWke,kBAAkBle,QAAlB,CAA4BvJ,CAA5B,CAA+BmnB,cAA/B,CAAX,CACA5d,SAAWme,iBAAiBne,QAAjB,CAA2BvJ,CAA3B,CAA8BmnB,cAA9B,CAAX,CAEA5d,SAAWoe,SAASrT,IAAT,EAAe/K,QAAf,CAAyB0F,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE1G,eAAgBA,cAAlB,CAAnB,CAAzB,CAAX,CAEA,SAASnV,IAAF,CAAOkH,QAAP,CAAP,CACD,CAED,WAAa,MAAb;;AAIA,GAAIyd,MAAMC,OAAN,CAAcO,gBAAd,CAAJ,CAAqC,CACnC,sBAAwBnV,iBAAemV,gBAAf,CAAiC,CAAjC,CAAxB,CACI9oB,SAAWkpB,kBAAkB,CAAlB,CADf,CAEI/kB,KAAO+kB,kBAAkB,CAAlB,CAFX,CAIA1R,OAASlW,EAAEtB,QAAF,EAAYmE,IAAZ,CAAiBA,IAAjB,EAAuBiD,IAAvB,EAAT,CACD,CAND,IAMO,CACLoQ,OAASlW,EAAEwnB,gBAAF,EAAoBjlB,IAApB,GAA2BuD,IAA3B,EAAT,CACD;;AAID,GAAI0R,cAAJ,CAAoB,CAClB,gBAAgBlD,IAAT,EAAe4B,MAAf,CAAuBgI,IAAvB,CAAP,CACD,CAED,aAAA,CACD,CAED,sBAAA,CAAuBA,IAAvB,CAA6B,CAC3B,SAAWA,KAAK5J,IAAhB,CACIqC,UAAYuH,KAAKvH,SADrB,CAEIkR,eAAiB3J,KAAK4J,QAF1B,CAGIA,SAAWD,iBAAmBhd,SAAnB,CAA+B,IAA/B,CAAsCgd,cAHrD,CAMA,WAAaE,OAAO9Y,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAEiJ,eAAgBxQ,UAAUrC,IAAV,CAAlB,CAAnB,CAAP,CAAb;AAGA,GAAI4B,MAAJ,CAAY,CACV,aAAA,CACD;;AAID,GAAI4R,QAAJ,CAAc,wBAAwBxT,IAAjB,EAAuB4J,IAAvB,CAAP,CAEd,WAAA,CACD,CAED,kBAAoB,CAClBM,QAAS,gBAAA,EAAmB,CAC1B,cAAgBvR,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE6Z,gBAApF,CACA,SAAW7Z,UAAU,CAAV,CAAX,CACA,UAAYiR,IAAZ,CACI8J,YAAcC,MAAMD,WADxB,CAEIE,eAAiBD,MAAMC,cAF3B;AAKA,GAAIvR,UAAUE,MAAV,GAAqB,GAAzB,CAA8B,iBAAiB2H,OAAV,CAAkBN,IAAlB,CAAP,CAE9BA,KAAOjP,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CACxBvH,UAAWA,SADa,CAAnB,CAAP,CAIA,GAAIqR,WAAJ,CAAiB,CACf,aAAeG,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,SAAR,CAAmB+S,YAAa,IAAhC,CAAsCrT,MAAOkU,cAA7C,CAAnB,CAAd,CAAf,CAEA,MAAO,CACLtf,QAASwf,QADJ,CAAP,CAGD,CACD,UAAYD,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,OAAR,CAAnB,CAAd,CAAZ,CACA,mBAAqB6T,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,gBAAR,CAAnB,CAAd,CAArB,CACA,WAAa6T,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,QAAR,CAAnB,CAAd,CAAb,CACA,kBAAoB6T,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,eAAR,CAAnB,CAAd,CAApB,CACA,YAAc6T,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,SAAR,CAAmB+S,YAAa,IAAhC,CAAsCrT,MAAOA,KAA7C,CAAnB,CAAd,CAAd,CAEA,mBAAqBmU,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,gBAAR,CAA0B1L,QAASA,OAAnC,CAAnB,CAAd,CAArB,CACA,YAAcuf,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,SAAR,CAAmB1L,QAASA,OAA5B,CAAnB,CAAd,CAAd,CACA,QAAUuf,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,KAAR,CAAe1L,QAASA,OAAxB,CAAiCoP,QAASA,OAA1C,CAAnB,CAAd,CAAV,CACA,eAAiBmQ,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,YAAR,CAAsB1L,QAASA,OAA/B,CAAnB,CAAd,CAAjB,CACA,cAAgBuf,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,WAAR,CAAqBN,MAAOA,KAA5B,CAAnB,CAAd,CAAhB,CAEA,UAAYmU,cAAclZ,WAAS,EAAT,CAAaiP,IAAb,CAAmB,CAAE5J,KAAM,gBAAR,CAAnB,CAAd,GAAiE,CAAE7K,IAAK,IAAP,CAAaoN,OAAQ,IAArB,CAA7E,CACIpN,IAAMqF,MAAMrF,GADhB,CAEIoN,OAAS/H,MAAM+H,MAFnB,CAIA,MAAO,CACL7C,MAAOA,KADF,CAELpL,QAASA,OAFJ,CAGLsO,OAAQA,MAHH,CAILC,eAAgBA,cAJX,CAKLW,eAAgBA,cALX,CAMLP,IAAKA,GANA,CAOLQ,cAAeA,aAPV,CAQLtO,IAAKA,GARA,CASLoN,OAAQA,MATH,CAULmB,QAASA,OAVJ,CAWLqO,WAAYA,UAXP,CAYLE,UAAWA,SAZN,CAAP,CAcD,CApDiB,CAApB,CAuDA,oBAAuB,UAAY,CACjC,SAAW3X,kBAAkB7B,oBAAoBC,IAApB,CAAyB,gBAAA,CAAiBuF,KAAjB,CAAwB,CAC5E,kBAAoBA,MAAMwF,aAA1B,CACI1V,KAAOkQ,MAAMlQ,IADjB,CAEIrC,EAAIuS,MAAMvS,CAFd,CAGI+e,UAAYxM,MAAMwM,SAHtB,CAII7I,OAAS3D,MAAM2D,MAJnB,CAKImS,UAAY9V,MAAM8V,SALtB,CAMIrU,MAAQzB,MAAMyB,KANlB,CAOIvK,IAAM8I,MAAM9I,GAPhB,CAQIgV,WAAalM,MAAM8D,OARvB,CASA,SAAA,CAAW4M,YAAX,CAAyBqF,aAAzB,CAAwCC,cAAxC,CAAwDlC,UAAxD,CACA,2BAA2BnZ,IAApB,CAAyB,iBAAA,CAAkBC,QAAlB,CAA4B,CAC1D,MAAO,CAAP,CAAU,CACR,OAAQA,SAAShE,IAAT,CAAgBgE,SAAS5M,IAAjC,EACE,MAAA;AAEEioB,MAAQ,CAAR,CACAvF,aAAe,CAACa,eAAara,GAAb,CAAD,CAAf;;AAKF,MAAA,CACE,GAAI,EAAEsO,eAAiByQ,MAAQ,EAA3B,CAAJ,CAAoC,CAClCrb,SAAS5M,IAAT,CAAgB,EAAhB,CACA,MACD,CAEDioB,OAAS,CAAT,CACArb,SAAS5M,IAAT,CAAgB,CAAhB,CACA,gBAAgBwV,MAAT,CAAgBgC,aAAhB,CAAP,CAEF,MAAA,CACE/X,EAAImN,SAASsC,IAAb,CAEApN,KAAOrC,EAAEqC,IAAF,EAAP,CAEAimB,cAAgB,CACd7e,IAAKsO,aADS,CAEd1V,KAAMA,IAFQ,CAGdrC,EAAGA,CAHW,CAId+e,UAAWA,SAJG,CAKdiJ,YAAa,IALC,CAMdE,eAAgBlU,KANF,CAOdiP,aAAcA,YAPA,CAQd5M,QAASoI,UARK,CAAhB,CAUA8J,eAAiBE,cAAcjK,OAAd,CAAsB6J,SAAtB,CAAiCC,aAAjC,CAAjB,CAGArF,aAAaxP,IAAb,CAAkBsE,aAAlB,EACA7B,OAASjH,WAAS,EAAT,CAAaiH,MAAb,CAAqB,CAC5BtN,QAAS,aAAesN,OAAOtN,OAAtB,CAAgC,mCAAhC,CAAsE4f,KAAtE,CAA8E,iBAA9E,CAAkGD,eAAe3f,OAAjH,CAA2H,YADxG,CAArB,CAAT,CAIAmP,cAAgBwQ,eAAexQ,aAA/B,CACA5K,SAAS5M,IAAT,CAAgB,CAAhB,CACA,MAEF,OAAA,CACE8lB,WAAaS,iBAAiBT,UAAjB,CAA4B,CAAEzd,QAAS,QAAUsN,OAAOtN,OAAjB,CAA2B,QAAtC,CAA5B,CAAb,CACA,gBAAgB+G,MAAT,CAAgB,QAAhB,CAA0BV,WAAS,EAAT,CAAaiH,MAAb,CAAqB,CACpDwS,YAAaF,KADuC,CAEpDG,eAAgBH,KAFoC,CAGpDnC,WAAYA,UAHwC,CAArB,CAA1B,CAAP,CAMF,OAAA,CACA,IAAK,KAAL,CACE,gBAAgB/Y,IAAT,EAAP,CAxDJ,CA0DD,CACF,CA7DM,CA6DJwC,OA7DI,CA6DK,IA7DL,CAAP,CA8DD,CAzE4B,CAAlB,CAAX,CA2EA,wBAAA,CAAyB8Y,EAAzB,CAA6B,CAC3B,YAAY3Y,KAAL,CAAW,IAAX,CAAiBhD,SAAjB,CAAP,CACD,CAED,sBAAA,CACD,CAjFqB,EAAtB,CAmFA,YAAc,CACZ8B,MAAO,cAAA,CAAetF,GAAf,CAAoBpH,IAApB,CAA0B,CAC/B,UAAY,IAAZ,CAEA,SAAW4K,UAAUtL,MAAV,CAAmB,CAAnB,EAAwBsL,UAAU,CAAV,IAAiBpC,SAAzC,CAAqDoC,UAAU,CAAV,CAArD,CAAoE,EAA/E,CACA,yBAAyBF,oBAAoBC,IAApB,CAAyB,gBAAA,EAAmB,CACnE,uBAAA,CAAyB6b,aAAzB,CAAwChB,cAAxC,CAAwDC,QAAxD,CAAkEjZ,SAAlE,CAA6EwZ,SAA7E,CAAwFroB,CAAxF,CAA2F+e,SAA3F,CAAsG7I,MAAtG,CAA8G4S,OAA9G,CAAuH9U,KAAvH,CAA8H+D,aAA9H,CAEA,2BAA2B7K,IAApB,CAAyB,iBAAA,CAAkBC,QAAlB,CAA4B,CAC1D,MAAO,CAAP,CAAU,CACR,OAAQA,SAAShE,IAAT,CAAgBgE,SAAS5M,IAAjC,EACE,MAAA,CACEwoB,oBAAsB7K,KAAK2K,aAA3B,CAA0CA,cAAgBE,sBAAwBle,SAAxB,CAAoC,IAApC,CAA2Cke,mBAArG,CAA0HlB,eAAiB3J,KAAK4J,QAAhJ,CAA0JA,SAAWD,iBAAmBhd,SAAnB,CAA+B,IAA/B,CAAsCgd,cAA3M,CACAhZ,UAAYlF,MAAIoF,KAAJ,CAAUtF,GAAV,CAAZ,CAEA,GAAIuf,YAAYna,SAAZ,CAAJ,CAA4B,CAC1B1B,SAAS5M,IAAT,CAAgB,CAAhB,CACA,MACD,CAED,gBAAgBoP,MAAT,CAAgB,QAAhB,CAA0BE,OAAOnC,MAAjC,CAAP,CAEF,MAAA,CACE2a,UAAYY,aAAaxf,GAAb,CAAkBoF,SAAlB,CAAZ;AAGA1B,SAAS5M,IAAT,CAAgB,CAAhB,CACA,gBAAgBwV,MAAT,CAAgBtM,GAAhB,CAAqBpH,IAArB,CAA2BwM,SAA3B,CAAP,CAEF,MAAA,CACE7O,EAAImN,SAASsC,IAAb,CAEA,GAAI,CAACzP,EAAE2N,KAAP,CAAc,CACZR,SAAS5M,IAAT,CAAgB,EAAhB,CACA,MACD,CAED,gBAAgBoP,MAAT,CAAgB,QAAhB,CAA0B3P,CAA1B,CAAP,CAEF,OAAA,CAEEqC,KAAOrC,EAAEqC,IAAF,EAAP;;AAIA0c,UAAY/e,EAAE,MAAF,EAAUvB,GAAV,CAAc,SAAU+K,CAAV,CAAa3I,IAAb,CAAmB,CAC3C,SAASA,IAAF,EAAQgC,IAAR,CAAa,MAAb,CAAP,CACD,CAFW,EAET0H,OAFS,EAAZ,CAGA2L,OAASuS,cAAcjK,OAAd,CAAsB6J,SAAtB,CAAiC,CACxC5e,IAAKA,GADmC,CAExCpH,KAAMA,IAFkC,CAGxCrC,EAAGA,CAHqC,CAIxC+e,UAAWA,SAJ6B,CAKxClQ,UAAWA,SAL6B,CAMxCiZ,SAAUA,QAN8B,CAOxCzR,QAASA,SAP+B,CAAjC,CAAT,CASAyS,QAAU5S,MAAV,CAAkBlC,MAAQ8U,QAAQ9U,KAAlC,CAAyC+D,cAAgB+Q,QAAQ/Q,aAAjE;AAIA,GAAI,EAAE8Q,eAAiB9Q,aAAnB,CAAJ,CAAuC,CACrC5K,SAAS5M,IAAT,CAAgB,EAAhB,CACA,MACD,CAED4M,SAAS5M,IAAT,CAAgB,EAAhB,CACA,uBAAuB,CACrB8nB,UAAWA,SADU,CAErBtQ,cAAeA,aAFM,CAGrB1V,KAAMA,IAHe,CAIrBrC,EAAGA,CAJkB,CAKrB+e,UAAWA,SALU,CAMrB7I,OAAQA,MANa,CAOrBlC,MAAOA,KAPc,CAQrBvK,IAAKA,GARgB,CASrB4M,QAASA,SATY,CAAhB,CAAP,CAYF,OAAA,CACEH,OAAS/I,SAASsC,IAAlB,CACAtC,SAAS5M,IAAT,CAAgB,EAAhB,CACA,MAEF,OAAA,CACE2V,OAASjH,WAAS,EAAT,CAAaiH,MAAb,CAAqB,CAC5BwS,YAAa,CADe,CAE5BQ,eAAgB,CAFY,CAArB,CAAT,CAKF,OAAA,CACE,gBAAgBvZ,MAAT,CAAgB,QAAhB,CAA0BuG,MAA1B,CAAP,CAEF,OAAA,CACA,IAAK,KAAL,CACE,gBAAgB5I,IAAT,EAAP,CArFJ,CAuFD,CACF,CA1FM,CA0FJwC,OA1FI,CA0FKqG,KA1FL,CAAP,CA2FD,CA9FwB,CAAlB,GAAP,CA+FD,CApGW;;AAyGZgT,cAAe,sBAAA,CAAuB1f,GAAvB,CAA4B,CACzC,WAAa,IAAb,CAEA,yBAAyBsD,oBAAoBC,IAApB,CAAyB,iBAAA,EAAoB,CACpE,2BAA2BE,IAApB,CAAyB,kBAAA,CAAmBkc,SAAnB,CAA8B,CAC5D,MAAO,CAAP,CAAU,CACR,OAAQA,UAAUjgB,IAAV,CAAiBigB,UAAU7oB,IAAnC,EACE,MAAA,CACE6oB,UAAU7oB,IAAV,CAAiB,CAAjB,CACA,gBAAgBwV,MAAT,CAAgBtM,GAAhB,CAAP,CAEF,MAAA,CACE,iBAAiBkG,MAAV,CAAiB,QAAjB,CAA2ByZ,UAAU3Z,IAArC,CAAP,CAEF,MAAA,CACA,IAAK,KAAL,CACE,iBAAiBnC,IAAV,EAAP,CAVJ,CAYD,CACF,CAfM,CAeJ+b,QAfI,CAeMC,MAfN,CAAP,CAgBD,CAjBwB,CAAlB,GAAP,CAkBD,CA9HW,CAAd,CAiIA,YAAiBC,OAAjB;;ACznJe,SAASC,YAAT,CAAsBC,OAAtB,EAA0C;oCAARjV,MAAQ;UAAA;;;MACnDA,OAAO7S,MAAX,EAAmB;WACV8nB,QAAQhmB,MAAR,CAAe,UAACyS,MAAD,EAASwT,IAAT,EAAeC,GAAf,EAAuB;UACvC1e,QAAQuJ,OAAOmV,GAAP,CAAZ;;UAEI1e,SAAS,OAAOA,MAAM2e,QAAb,KAA0B,UAAvC,EAAmD;gBACzC3e,MAAM2e,QAAN,EAAR;OADF,MAEO;gBACG,EAAR;;;aAGK1T,SAASwT,IAAT,GAAgBze,KAAvB;KATK,EAUJ,EAVI,CAAP;;;SAaKwe,QAAQ7qB,IAAR,CAAa,EAAb,CAAP;;;ACbF,IAAMirB,cAAc,sBAApB;AACA,IAAMC,qBAAqB,MAA3B;;AAEA,AAAe,SAASC,QAAT,CAAkBN,OAAlB,EAAsC;oCAARjV,MAAQ;UAAA;;;MAC7CwV,WAAWR,+BAAaC,OAAb,SAAyBjV,MAAzB,EAAjB;;aACawV,SAAS5kB,KAAT,CAAeykB,WAAf,KAA+B,EAFO;;MAE9C1b,IAF8C;;MAG/C8b,cAAc,gBAAlB;;MAEI,CAAC9b,IAAL,EAAW;WACF6b,QAAP;kBACc,gBAAd;;;SAGK7b,KAAK4E,KAAL,CAAW,IAAX,EACJhN,KADI,CACE,CADF,EAEJtH,GAFI,CAEA,UAACyrB,IAAD,EAAU;WACNA,KAAKnjB,OAAL,CAAakjB,WAAb,EAA0B,IAA1B,CAAP;;QAEIH,mBAAmB3oB,IAAnB,CAAwB+oB,IAAxB,CAAJ,EAAmC;aAC1BA,KAAKnjB,OAAL,CAAa+iB,kBAAb,EAAiC,EAAjC,CAAP;;;WAGKI,IAAP;GATG,EAWJtrB,IAXI,CAWC,IAXD,CAAP;;;;;ACfF,AAEA,wBAAe,UAAU6O,QAAV,EAAoBzC,IAApB,EAA0B;SAChC+e,QAAP,kBACiB/e,IADjB,EAEeyC,QAFf;;;;;;ACHF,AAEA,IAAM0c,SAAS,CACb,KADa,EAEb,QAFa,EAGb,SAHa,EAIb,YAJa,EAKb,eALa,EAMb,SANa,EAOb,WAPa,EAQb,aARa,EASb,gBATa,CAAf;;AAYA,SAASC,OAAT,CAAiBhoB,GAAjB,EAAsB6I,KAAtB,EAA6Bof,GAA7B,EAAkCC,IAAlC,EAAwC7gB,GAAxC,EAA6C;MACvC0gB,OAAO3mB,IAAP,CAAY;WAAKqb,MAAMzc,GAAX;GAAZ,CAAJ,EAAiC,OAAO,EAAP;;SAE1B2nB,QAAP,oBACkB3nB,GADlB,EAE+CA,GAF/C,EAGkBioB,GAHlB,EAK+BC,IAL/B,EAOe7gB,GAPf,EASoBrH,GATpB,EAcyBA,GAdzB,EAciC6I,cAAaA,KAAb,SAAyB,IAd1D;;;AAmBF,4BAAe,UAAUqf,IAAV,EAAgB7gB,GAAhB,EAAqB4gB,GAArB,EAA0BnU,MAA1B,EAAkClL,IAAlC,EAAwC;SAC9C+e,QAAP,mBAUc/e,IAVd,EAgBWvB,GAhBX,EAqBQ,iBAAgByM,MAAhB,EAAwBzX,GAAxB,CAA4B;WAAK2rB,QAAQvL,CAAR,EAAW3I,OAAO2I,CAAP,CAAX,EAAsBwL,GAAtB,EAA2BC,IAA3B,EAAiC7gB,GAAjC,CAAL;GAA5B,EAAwE7K,IAAxE,CAA6E,MAA7E,CArBR,EAyBcyrB,GAzBd,EA6B2BC,IA7B3B,EA+BW7gB,GA/BX;;;ACrCF;;;AAGA,AACA,AACA,AACA,AACA,AAMA,AACA,AACA,AAEA,IAAM8gB,YAAY,CAChB;QACQ,OADR;QAEQ,SAFR;WAGW,yEAHX;UAAA,oBAIWtf,KAJX,EAIkB;qBACOtB,IAAIoF,KAAJ,CAAU9D,KAAV,CADP;QACNwC,QADM,cACNA,QADM;;QAEVA,QAAJ,EAAc,OAAO,IAAP;;WAEP,KAAP;;CATY,CAAlB;AAaA,IAAI+c,gBAAJ;;AAEA,SAASC,OAAT,CAAiBC,EAAjB,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,SAAhC,EAA2C;YAC/BC,IAAI,EAAEvoB,MAAMqoB,GAAR,EAAJ,CAAV;UACQxd,KAAR;MACM8I,SAASwU,uCAAMC,IAAN,EAAf;;MAEIzU,UAAUA,OAAO6U,IAArB,EAA2B;WAClBA,IAAP,CAAY;aAAKC,SAASC,CAAT,EAAYN,IAAZ,EAAkBE,SAAlB,CAAL;KAAZ;GADF,MAEO;YACGK,OAAR;;;SAGKhV,MAAP;;;AAGF,SAASiV,gBAAT,CAA0Bd,GAA1B,EAA+BO,GAA/B,EAAoC;MAC9B,CAACQ,GAAGC,UAAH,CAAchB,GAAd,CAAL,EAAyB;YACfe,GAAGE,SAAX,EAAsB,CAACjB,GAAD,CAAtB,EAA6BO,GAA7B;;;;AAIJ,SAASW,MAAT,CAAgB9hB,GAAhB,EAAqB;oBACEE,IAAIoF,KAAJ,CAAUtF,GAAV,CADF;MACXgE,QADW,eACXA,QADW;;sCAEeA,QAAlC;;;AAGF,SAAS+d,oBAAT,CAA8B/hB,GAA9B,EAAmC;MAC3B4gB,MAAMkB,OAAO9hB,GAAP,CAAZ;;oBACqBE,IAAIoF,KAAJ,CAAUtF,GAAV,CAFY;MAEzBgE,QAFyB,eAEzBA,QAFyB;;MAG7Bod,YAAY,KAAhB;;MAEI,CAACO,GAAGC,UAAH,CAAchB,GAAd,CAAL,EAAyB;gBACX,IAAZ;qBACiBA,GAAjB,gBAAkC5c,QAAlC;qCAC+BA,QAA/B,EAA2C,6BAA3C;;;UAGM8b,QAAQJ,aAAhB,EAA+B,CAAC1f,GAAD,CAA/B,EAAsC,kBAAtC,EAA0DohB,SAA1D;;;AAGFY,SAASC,MAAT,CAAgBnB,SAAhB,EAA2BQ,IAA3B,CAAgC,UAACY,OAAD,EAAa;uBACtBA,QAAQC,OAA7B;CADF;;AAIA,SAASC,gBAAT,CAA0BpiB,GAA1B,EAA+B6gB,IAA/B,EAAqCpU,MAArC,EAA6C;oBACtBvM,IAAIoF,KAAJ,CAAUtF,GAAV,CADsB;MACnCgE,QADmC,eACnCA,QADmC;;MAErCkJ,YAAYmV,kBAAkBre,QAAlB,EAA4Bse,cAActe,QAAd,CAA5B,CAAlB;MACMue,gBACJC,sBACE3B,IADF,EACQ7gB,GADR,EACa8hB,OAAO9hB,GAAP,CADb,EAC0ByM,MAD1B,EACkC6V,cAActe,QAAd,CADlC,CADF;;KAKGye,aAAH,CAAoBX,OAAO9hB,GAAP,CAApB,gBAA4CkN,SAA5C;KACGuV,aAAH,CAAoBX,OAAO9hB,GAAP,CAApB,qBAAiDuiB,aAAjD;KACGG,cAAH,CACE,kCADF,EAEEC,aAAa3iB,GAAb,CAFF;oDAIkC8hB,OAAO9hB,GAAP,CAAlC;;;AAGF,SAASuhB,QAAT,CAAkBhrB,CAAlB,QAA4B6qB,SAA5B,EAAuC;;MAAjBphB,GAAiB;;oBAChBE,IAAIoF,KAAJ,CAAUtF,GAAV,CADgB;MAC7BgE,QAD6B,eAC7BA,QAD6B;;UAG7Byd,OAAR;;MAEMmB,WAAW,IAAIC,IAAJ,GAAWC,OAAX,EAAjB;MACMjC,uBAAqB7c,QAArB,SAAiC4e,QAAjC,UAAN;;uBAEkBrsB,EAAE,GAAF,EAAOwI,KAAP,EAAlB,EAAkCxI,CAAlC,EAAqCyJ,GAArC;IACE,eAAF,EAAmBvJ,IAAnB,CAAwB,UAACC,KAAD,EAAQU,IAAR,EAAiB;QACjCE,QAAQf,EAAEa,IAAF,CAAd;QACMgjB,OAAO9iB,MAAM8B,IAAN,CAAW,KAAX,CAAb;QACIghB,QAAQA,KAAK9d,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,IAAjC,EAAuC;YAC/BlD,IAAN,CAAW,KAAX,YAA0BghB,IAA1B;;GAJJ;MAOMxhB,OAAOY,cAAcjD,EAAE,GAAF,EAAOwI,KAAP,EAAd,EAA8BxI,CAA9B,EAAiC,CAAC,QAAD,CAAjC,EAA6CqC,IAA7C,EAAb;;KAEG6pB,aAAH,CAAiB5B,IAAjB,EAAuBjoB,IAAvB;;UAEQ0M,KAAR,CAActF,GAAd,EAAmBpH,IAAnB,EAAyB0oB,IAAzB,CAA8B,UAAC7U,MAAD,EAAY;QACpC2U,SAAJ,EAAe;cACLgB,gBAAR,EAA0B,CAACpiB,GAAD,EAAM6gB,IAAN,EAAYpU,MAAZ,CAA1B,EAA+C,6BAA/C;cACQsW,GAAR,4GACqB/e,QADrB,wDAGwBA,QAHxB;KAFF,MAMO;cACG+e,GAAR,mHAEuClC,IAFvC,iHAI4BA,IAJ5B;;GARJ;;;AAiBF,SAAS8B,YAAT,CAAsB3iB,GAAtB,EAA2B;oBACJE,IAAIoF,KAAJ,CAAUtF,GAAV,CADI;MACjBgE,QADiB,eACjBA,QADiB;;gCAEEA,QAA3B;;;AAGF,SAASse,aAAT,CAAuBte,QAAvB,EAAiC;MACzBzC,OAAOyC,SACVsF,KADU,CACJ,GADI,EAEVtU,GAFU,CAEN;gBAAQguB,EAAEC,MAAF,CAAS,CAAT,EAAYC,WAAZ,EAAR,GAAoCF,EAAE1mB,KAAF,CAAQ,CAAR,CAApC;GAFM,EAGVnH,IAHU,CAGL,EAHK,CAAb;SAIUoM,IAAV;"}